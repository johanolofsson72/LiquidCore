
/***********************************************************************
 * LiquidCore Framework
 * (C) Johan Olofsson 2007-2008
 * 
 * CoreLib components
 * Web defined components
 * 
 * Special thanks to Benzi K. Ahmed and the Citrus framework components
 * 
 * *********************************************************************/

using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.Data;
using System.Web;
using System.Reflection;
using System.Xml;  
using System.Configuration;
using System.Reflection;

//DomainObject
namespace LiquidCore.CoreLib
{
    public abstract class DomainObject
    {
        #region Properties and fields

        internal Wrap<DomainObjectState> _state = new Wrap<DomainObjectState>(DomainObjectState.Unintialized);
        /// <summary>
        /// Gets the current state of the object
        /// </summary>
        public DomainObjectState ObjectState
        {
            get { return _state.Value; }            
        }

        /// <summary>
        /// A mechanism for data transfer to the IDomainObject methods        
        /// </summary>
        protected NameValueSet DataFields = new NameValueSet();

        private Wrap<DomainObject> _container = new Wrap<DomainObject>();
        /// <summary>
        /// The DomainObject container
        /// </summary>
        protected DomainObject Container
        {
            get { return _container.Value; }
            set { _container.Value = value; }
        }

        /// <summary>
        /// Flag to determine whether the container domain
        /// object must be notified when this domain object 
        /// undergoes a state change
        /// </summary>
        protected bool NotifyContainerOnStateChange = false;

        /// <summary>
        /// Flag to determine whether the container domain
        /// object must be marked as dirty when this domain object 
        /// undergoes a state change
        /// </summary>
        protected bool MarkContainerOnStateChange = false;

        /// <summary>
        /// Flag to determine whether to set self as dirty
        /// when the container changes
        /// </summary>
        protected bool MarkSelfAsDirtyOnContainerChange = false;

        /// <summary>
        /// Flag to determine whether to set self as dirty
        /// when the container's state changes
        /// </summary>
        protected bool MarkSelfAsDirtyOnContainerStateChange = false;

        /// <summary>
        /// Flag to determine if container state changes are being monitored
        /// </summary>
        private bool MonitoringContainerStateChange = false;

        #endregion

        #region Ctor

        /// <summary>
        /// The initial state of the object must be specified
        /// </summary>
        /// <param name="initialState">The starting state of the object</param>
        /// <param name="container">The parent domain object container</param>
        public DomainObject(DomainObject container, DomainObjectState initialState)
        {
            // A new instance of a domain object must reflect a new
            // entity or an existing entity
            if (initialState != DomainObjectState.Clean && initialState != DomainObjectState.New)
            {
                throw new ArgumentException("The initial object state must be either DomainObjectState.New or DomainObjectState.Clean", "initialState");
            }

            // The new domain object must support the 
            // IDomainObject interface
            if(!(this is IDomainObject))
            {
                throw new ArgumentException("DomainObjects must support the IDomainObject interface explicitly", GetType().FullName);
            }

            // TODO: Ensure that the IDomainObject interface has been explicity implemented

            _state.Value = initialState;
            _state.ValueUpdating += new Wrap<DomainObjectState>.ValueUpdateEventHandler(ValidateStateChange);
            
            
            // Save the container
            _container.Value = container;

            // Any changes made to the container will
            // mark this object as dirty
            _container.ValueUpdated += new Wrap<DomainObject>.ValueUpdateEventHandler(ContainerChanged);
        }

        /// <summary>
        /// The initial state of the object must be specified
        /// </summary>
        /// <param name="initialState"></param>
        public DomainObject(DomainObjectState initialState) : this(null, initialState) { }

        /// <summary>
        /// Hide the default ctor
        /// </summary>
        private DomainObject() : this(DomainObjectState.New) {}

        #endregion

        #region Methods

        /// <summary>
        /// The object has undergone updation
        /// This method will be called by the container's
        /// model objects
        /// </summary>
        internal void SetAsDirty()
        {
            // New objects always remain new, only
            // previously clean objects can become dirty
            if (_state.Value == DomainObjectState.New)
                return;

            _state.Value = DomainObjectState.Dirty;            
        }

        /// <summary>
        /// Deletes the current instance
        /// </summary>
        public void Delete()
        {
            _state.Value = DomainObjectState.ToDelete;            
            CommitCurrentState();
        }

        /// <summary>
        /// Saves the changes that were made
        /// </summary>
        public void Save()
        {
            CommitCurrentState();
        }

        /// <summary>
        /// Commits the current state
        /// Based on the current state of the object, invokes
        /// the appropriate IDomainObject method
        /// </summary>
        private void CommitCurrentState()
        {
            switch (_state.Value)
            {
                // If we have a new object,
                // create it
                case DomainObjectState.New:
                    ((IDomainObject)this).CreateEntity();
                    _state.Value = DomainObjectState.Clean;
                    break;

                // If the object is clean, do
                // nothing
                case DomainObjectState.Clean:
                    break;

                // If the object is dirty
                // update it
                case DomainObjectState.Dirty:
                    ((IDomainObject)this).UpdateEntity();
                    _state.Value = DomainObjectState.Clean;
                    break;

                // If the object is to be deleted
                // delete it
                case DomainObjectState.ToDelete:
                    ((IDomainObject)this).DeleteEntity();
                    DataFields.Clear();
                    _state.Value = DomainObjectState.Deleted;
                    break;

                // If the object has been deleted,
                // no more commits can happen
                case DomainObjectState.Deleted:
                    throw new InvalidOperationException("Deleted objects cannot saved");
            }
        }

        /// <summary>
        /// Marks the current domain object as being dirty when
        /// its container changes
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        void ContainerChanged(object sender, ValueUpdateEventArgs<DomainObject> e)
        {
            // Reset the internal flag for monitoring container state changes
            MonitoringContainerStateChange = false;

            // If the current object has to be set as dirty
            // do it
            if (MarkSelfAsDirtyOnContainerChange)
            {
                SetAsDirty();
            }

            // Hook up the state change handler for the container's state change
            if (null != Container && !MonitoringContainerStateChange)
            {
                Container._state.ValueUpdated += new Wrap<DomainObjectState>.ValueUpdateEventHandler(ContainerStateChanged);
                MonitoringContainerStateChange = true;
            }
        }

        /// <summary>
        /// Handler for monitoring state changes made to the container
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        void ContainerStateChanged(object sender, ValueUpdateEventArgs<DomainObjectState> e)
        {
            if (MarkSelfAsDirtyOnContainerStateChange)
            {
                SetAsDirty();
            }
        }

        /// <summary>
        /// Validates the state transitions.
        /// Throws exceptions if any invalid state changes occur
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        void ValidateStateChange(object sender, ValueUpdateEventArgs<DomainObjectState> e)
        {
            // Cannot delete a new object that is not saved
            if (e.OldItem == DomainObjectState.New && e.NewItem == DomainObjectState.ToDelete)
            {
                throw new Exception("New objects cannot be deleted");
            }

            // A deleted object cannot be deleted again
            if (e.OldItem == DomainObjectState.Deleted && e.NewItem == DomainObjectState.ToDelete)
            {
                throw new Exception("Deleted objects cannot be deleted again");
            }

            // At this stage we have a valid state change
            // So notify the parent container (if any) and if required
            if (_container != null && NotifyContainerOnStateChange)
            {
                Container.OnContainedObjectStateChanged(this, e.OldItem, e.NewItem);
            }
            // If required mark the container as dirty also
            if (_container != null && MarkContainerOnStateChange)
            {
                Container.SetAsDirty();
            }
        }

        /// <summary>
        /// Method to notify the container that a contained object
        /// has undergone a state change
        /// Override this in case a domain object needs to process changes
        /// being made to its contained domain objects
        /// </summary>
        /// <param name="containedObject">The contained object that has changed state</param>
        /// <param name="oldState">The previous state</param>
        /// <param name="newState">The new state</param>
        protected virtual void OnContainedObjectStateChanged(DomainObject containedObject, DomainObjectState oldState, DomainObjectState newState) { }

        #endregion     
    }
}

//DomainObjectState
namespace LiquidCore.CoreLib
{
    /// <summary>
    /// The various states of an object
    /// </summary>
    public enum DomainObjectState
    {
        /// <summary>
        /// A new object state
        /// </summary>
        New, 
        /// <summary>
        /// An up-to-date object state
        /// </summary>
        Clean, 
        /// <summary>
        /// A modified object state
        /// </summary>
        Dirty, 
        /// <summary>
        /// A marked for destroy object state
        /// </summary>
        ToDelete,
        /// <summary>
        /// A destroyed object state
        /// </summary>
        Deleted,
        /// <summary>
        /// An invalid object state
        /// </summary>
        Unintialized
    }
}

//IDomainObject
namespace LiquidCore.CoreLib
{
    /// <summary>
    /// The IDomainObject contract to be supported by
    /// all DomainObject classes
    /// </summary>
    public interface IDomainObject
    {
        /// <summary>
        /// Creates the entity in the underlying data store
        /// </summary>
        void CreateEntity();

        /// <summary>
        /// Loads the existing entity from the underlying data store
        /// </summary>
        void LoadEntity(ModelObject source);

        /// <summary>
        /// Updates the current entity to the underlying data store
        /// </summary>
        void UpdateEntity();

        /// <summary>
        /// Deletes the existing entity from the underlying data store
        /// </summary>
        void DeleteEntity();
    }
}

//ModelObject
namespace LiquidCore.CoreLib
{
    /// <summary>
    /// Class to abtract domain model objects
    /// </summary>
    public abstract class ModelObject
    {
        #region Properties and fields

        private DomainObject _container = null;
        /// <summary>
        /// The container for this model
        /// </summary>
        protected DomainObject Container
        {
            get { return _container; }
        }

        #endregion

        #region Ctor

        private ModelObject() {}

        /// <summary>
        /// Contructs a new model object for the 
        /// associated container domain object 
        /// </summary>
        /// <param name="container">The container domain object</param>
        public ModelObject(DomainObject container)
        {
            if (null == container)
                throw new ArgumentException("Container cannot be null", "container");            

            // Now determine how to set up the values for this model
            // based on the container's initial state
            switch (container.ObjectState)
            {
                case DomainObjectState.New:
                    // In case the state is new, we do not need to
                    // perform anything
                    break;
                case DomainObjectState.Clean:
                    // If the the container is clean (i.e. an existing
                    // model object is being loaded), ask the container
                    // to load this model
                    ((IDomainObject)container).LoadEntity(this);
                    break;
                default:
                    throw new Exception("The container domain object's state " + container.ObjectState + " is invalid for creating a model object. The domain object state must be either new or clean");
            }

            _container = container;
        }

        #endregion

        #region Methods

        protected void NotifyContainer(object sender, ValueUpdateEventArgs<string> e)
        {
            // Notify the container that it has become dirty
            _container.SetAsDirty();
        }

        protected void NotifyContainer(object sender, ValueUpdateEventArgs<int> e)
        {
            // Notify the container that it has become dirty
            _container.SetAsDirty();
        }

        protected void NotifyContainer(object sender, ValueUpdateEventArgs<bool> e)
        {
            // Notify the container that it has become dirty
            _container.SetAsDirty();
        }

        protected void NotifyContainer(object sender, ValueUpdateEventArgs<DateTime> e)
        {
            // Notify the container that it has become dirty
            _container.SetAsDirty();
        }

        protected void NotifyContainer(object sender, ValueUpdateEventArgs<List<Site>> e)
        {
            // Notify the container that it has become dirty
            _container.SetAsDirty();
        }

        protected void NotifyContainer(object sender, ValueUpdateEventArgs<List<Setting>> e)
        {
            // Notify the container that it has become dirty
            _container.SetAsDirty();
        }

        protected void NotifyContainer(object sender, ValueUpdateEventArgs<List<Page>> e)
        {
            // Notify the container that it has become dirty
            _container.SetAsDirty();
        }

        protected void NotifyContainer(object sender, ValueUpdateEventArgs<List<Module>> e)
        {
            // Notify the container that it has become dirty
            _container.SetAsDirty();
        }

        protected void NotifyContainer(object sender, ValueUpdateEventArgs<List<Object>> e)
        {
            // Notify the container that it has become dirty
            _container.SetAsDirty();
        }

        protected void NotifyContainer(object sender, ValueUpdateEventArgs<List<Model>> e)
        {
            // Notify the container that it has become dirty
            _container.SetAsDirty();
        }

        protected void NotifyContainer(object sender, ValueUpdateEventArgs<List<ModelItem>> e)
        {
            // Notify the container that it has become dirty
            _container.SetAsDirty();
        }

        protected void NotifyContainer(object sender, ValueUpdateEventArgs<List<ModDef>> e)
        {
            // Notify the container that it has become dirty
            _container.SetAsDirty();
        }


        #endregion
    }
}

//NameValueSet
namespace LiquidCore.CoreLib
{
    /// <summary>
    /// A name value set data structure
    /// </summary>
    public class NameValueSet
    {
        /// <summary>
        /// The collection of elements
        /// </summary>
        private Dictionary<string, object> elements = new Dictionary<string, object>();

        /// <summary>
        /// Provides a mechanism for storing and retrieving
        /// elements from the bean bag
        /// </summary>
        /// <param name="key">The key for the element to retrieve</param>
        /// <returns>The element for the key provided, null if key is not contained</returns>
        public object this[string key]
        {           
            get
            {
                if (elements.ContainsKey(key))
                {
                    return elements[key];
                }
                else
                {
                    return null;
                }
            }
            set
            {
                elements[key] = value; 
            }
        }
        /// <summary>
        /// Clears the elements in the bean bag
        /// </summary>
        public void Clear() { elements.Clear(); }
    }
}

//TypedObject
namespace LiquidCore.CoreLib
{
    /// <summary>
    /// Implements a generic class that handles
    /// implicit type conversions
    /// </summary>
    /// <typeparam name="Type"></typeparam>
    public class TypedObject<Type>
    {
        /// <summary>
        /// Constructs a typed object
        /// </summary>
        /// <param name="value"></param>
        public TypedObject(object value)
        {
            this._value = value;
        }

        private object _value;
        /// <summary>
        /// The value type
        /// </summary>
        public Type Value
        {
            get
            {
                return (Type)_value;
            }
        }
    }
}

//ValueUpdateEventArgs
namespace LiquidCore.CoreLib
{
    public class ValueUpdateEventArgs<Item> : EventArgs
    {
        Item _oldItem;

        public Item OldItem
        {
            get { return _oldItem; }
            set { _oldItem = value; }
        }

        Item _newItem;

        public Item NewItem
        {
            get { return _newItem; }
            set { _newItem = value; }
        }

        public ValueUpdateEventArgs(Item oldItem, Item newItem)
        {
            this._oldItem = oldItem;
            this._newItem = newItem;
        }
    }
}

//Wrap
namespace LiquidCore.CoreLib
{
    /// <summary>
    /// Generic wrap class for arbitrary types
    /// </summary>
    /// <typeparam name="ItemType"></typeparam>
    public class Wrap<ItemType>
    {
        #region Properties and fields

        private ItemType _value;
        /// <summary>
        /// The wrapped item
        /// </summary>
        public ItemType Value
        {
            set
            {
                ItemType oldValue = _value;
                ItemType newValue = value;               

                // Check if the old and new values are the same, in case yes,
                // we do not need to modify
                if (oldValue!=null && oldValue.Equals(newValue)) return;

                OnValueUpdating(new ValueUpdateEventArgs<ItemType>(oldValue, newValue));

                // Check if the old and new values are the same, done again
                // as newValue can be changed as it is a reference parameter
                if (oldValue != null && oldValue.Equals(newValue)) return;

                _value = newValue;

                OnValueUpdated(new ValueUpdateEventArgs<ItemType>(oldValue, newValue));
            }
            get
            {
                return _value;
            }
        }

        #endregion

        #region Ctor

        public Wrap(params object[] args)
        {
            if(args.Length > 0) Value = (ItemType)Activator.CreateInstance(typeof(ItemType), args);
        }

        public Wrap(ItemType t)
        {
            Value = t;
        }

        private Wrap()
        {
            _value = default(ItemType);
        }

        #endregion

        #region Event handling 

        /// <summary>
        /// Event fired when the value of the the item has 
        /// been updated
        /// </summary>
        public event ValueUpdateEventHandler ValueUpdated;

        /// <summary>
        /// Event fired when the value of the the item 
        /// is going to be updated
        /// </summary>
        public event ValueUpdateEventHandler ValueUpdating;

        /// <summary>
        /// Fires up the ValueUpdating event
        /// </summary>
        /// <param name="e"></param>
        /// <param name="overrideValue"></param>
        void OnValueUpdating(ValueUpdateEventArgs<ItemType> e)
        {
            if (ValueUpdating != null)
            {
                ValueUpdating(this, e);
            }            
        }

        /// <summary>
        /// Fires up the ValueUpdated event
        /// </summary>
        /// <param name="e"></param>
        void OnValueUpdated(ValueUpdateEventArgs<ItemType> e)
        {
            if (ValueUpdated != null)
            {
                ValueUpdated(this, e);
            }
        }

        /// <summary>
        /// Delegate definition for updated event handlers
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        public delegate void ValueUpdateEventHandler(
            object sender, 
            ValueUpdateEventArgs<ItemType> e);

        #endregion 

        #region Overrides and operator overloads

        /// <summary>
        /// Returns the type of the wrapped item
        /// </summary>
        /// <returns></returns>
        public new System.Type GetType()
        {
            return typeof(ItemType);
        }

        /// <summary>
        /// The string form of the wrapped item
        /// </summary>
        /// <returns></returns>
        public override string ToString()
        {
            if (Value == null)
            {
                return null;
            }
            else
            {
                return Value.ToString();
            }
        }

        public override bool Equals(object obj)
        {
            return Value.Equals(obj);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }

        public static bool operator == (Wrap<ItemType> x, ItemType y)
        {
            if ((x == null && y == null) || x.Value == null && y == null)
                return true;
            else if (((x == null || x.Value == null) && y != null) || ((x != null || x.Value != null) && y == null))
                return false;
            else
                return x.Value.Equals(y);
        }

        public static bool operator != (Wrap<ItemType> x, ItemType y)
        {
            return !(x == y);
        }

        public static implicit operator ItemType(Wrap<ItemType> y)
        {
            return y._value;
        }

        #endregion
    }    
}




// BusinessLayer
namespace LiquidCore
{
    using LiquidCore.Definition;
    public class Sites : SitesDefinition
    {
        public Sites() : base() { }
        public Sites(String Alias) : base(Alias) { }
    }
    public class Site : SiteDefinition
    {
        public int Id
        {
            get { return base.Details.Id; }
            set { base.Details.Id = value; }
        }
        public int Status
        {
            get { return base.Details.Status; }
            set { base.Details.Status = value; }
        }
        public int Language
        {
            get { return base.Details.Language; }
            set { base.Details.Language = value; }
        }
        public int ParentId
        {
            get { return base.Details.ParentId; }
            set { base.Details.ParentId = value; }
        }
        public int Order
        {
            get { return base.Details.Order; }
            set { base.Details.Order = value; }
        }
        public string Title
        {
            get { return base.Details.Title; }
            set { base.Details.Title = value; }
        }
        public string Alias
        {
            get { return base.Details.Alias; }
            set { base.Details.Alias = value; }
        }
        public string Description
        {
            get { return base.Details.Description; }
            set { base.Details.Description = value; }
        }
        public DateTime CreatedDate
        {
            get { return base.Details.CreatedDate; }
            set { base.Details.CreatedDate = value; }
        }
        public string CreatedBy
        {
            get { return base.Details.CreatedBy; }
            set { base.Details.CreatedBy = value; }
        }
        public DateTime UpdatedDate
        {
            get { return base.Details.UpdatedDate; }
            set { base.Details.UpdatedDate = value; }
        }
        public string UpdatedBy
        {
            get { return base.Details.UpdatedBy; }
            set { base.Details.UpdatedBy = value; }
        }
        public bool Hidden
        {
            get { return base.Details.Hidden; }
            set { base.Details.Hidden = value; }
        }
        public bool Deleted
        {
            get { return base.Details.Deleted; }
            set { base.Details.Deleted = value; }
        }

        public Settings Settings
        {
            get { return new Settings(this.Id, 0, 0, 0); }
        }

        public Pages Pages
        {
            get { return new Pages(this.Id, 0); }
        }

        public Site() : base() { }
        public Site(Int32 Id) : base(Id) { }

    }
    public class Settings : SettingsDefinition
    {
        public Settings() : base() { }
        public Settings(Int32 SitId, Int32 PagId, Int32 ModId, Int32 ParentId) : base(SitId, PagId, ModId, ParentId) { }
        public Settings(String Alias) : base(Alias) { }

    }
    public class Setting : SettingDefinition
    {
        public int Id
        {
            get { return base.Details.Id; }
            set { base.Details.Id = value; }
        }
        public int Status
        {
            get { return base.Details.Status; }
            set { base.Details.Status = value; }
        }
        public int Language
        {
            get { return base.Details.Language; }
            set { base.Details.Language = value; }
        }
        public int SitId
        {
            get { return base.Details.SitId; }
            set { base.Details.SitId = value; }
        }
        public int PagId
        {
            get { return base.Details.PagId; }
            set { base.Details.PagId = value; }
        }
        public int ModId
        {
            get { return base.Details.ModId; }
            set { base.Details.ModId = value; }
        }
        public int ParentId
        {
            get { return base.Details.ParentId; }
            set { base.Details.ParentId = value; }
        }
        public int Order
        {
            get { return base.Details.Order; }
            set { base.Details.Order = value; }
        }
        public string Title
        {
            get { return base.Details.Title; }
            set { base.Details.Title = value; }
        }
        public string Alias
        {
            get { return base.Details.Alias; }
            set { base.Details.Alias = value; }
        }
        public string Description
        {
            get { return base.Details.Description; }
            set { base.Details.Description = value; }
        }
        public string Value
        {
            get { return base.Details.Value; }
            set { base.Details.Value = value; }
        }
        public DateTime CreatedDate
        {
            get { return base.Details.CreatedDate; }
            set { base.Details.CreatedDate = value; }
        }
        public string CreatedBy
        {
            get { return base.Details.CreatedBy; }
            set { base.Details.CreatedBy = value; }
        }
        public DateTime UpdatedDate
        {
            get { return base.Details.UpdatedDate; }
            set { base.Details.UpdatedDate = value; }
        }
        public string UpdatedBy
        {
            get { return base.Details.UpdatedBy; }
            set { base.Details.UpdatedBy = value; }
        }
        public bool Hidden
        {
            get { return base.Details.Hidden; }
            set { base.Details.Hidden = value; }
        }
        public bool Deleted
        {
            get { return base.Details.Deleted; }
            set { base.Details.Deleted = value; }
        }
        public Setting() : base() { }
        public Setting(Int32 Id) : base(Id) { }
        public Setting(String Alias) : base(Alias) {  }

    }
    public class Pages : PagesDefinition
    {
        public Pages() : base() { }
        public Pages(Int32 SitId, Int32 ParentId) : base(SitId, ParentId) { }
        public Pages(String Alias) : base(Alias) { }
    }
    public class Page : PageDefinition
    {
        public int Id
        {
            get { return base.Details.Id; }
            set { base.Details.Id = value; }
        }
        public int SitId
        {
            get { return base.Details.SitId; }
            set { base.Details.SitId = value; }
        }
        public int Status
        {
            get { return base.Details.Status; }
            set { base.Details.Status = value; }
        }
        public int Language
        {
            get { return base.Details.Language; }
            set { base.Details.Language = value; }
        }
        public int ModelId
        {
            get { return base.Details.ModelId; }
            set { base.Details.ModelId = value; }
        }
        public int ParentId
        {
            get { return base.Details.ParentId; }
            set { base.Details.ParentId = value; }
        }
        public int Order
        {
            get { return base.Details.Order; }
            set { base.Details.Order = value; }
        }
        public string Title
        {
            get { return base.Details.Title; }
            set { base.Details.Title = value; }
        }
        public string Alias
        {
            get { return base.Details.Alias; }
            set { base.Details.Alias = value; }
        }
        public string Description
        {
            get { return base.Details.Description; }
            set { base.Details.Description = value; }
        }
        public string Template
        {
            get { return base.Details.Template; }
            set { base.Details.Template = value; }
        }
        public DateTime CreatedDate
        {
            get { return base.Details.CreatedDate; }
            set { base.Details.CreatedDate = value; }
        }
        public string CreatedBy
        {
            get { return base.Details.CreatedBy; }
            set { base.Details.CreatedBy = value; }
        }
        public DateTime UpdatedDate
        {
            get { return base.Details.UpdatedDate; }
            set { base.Details.UpdatedDate = value; }
        }
        public string UpdatedBy
        {
            get { return base.Details.UpdatedBy; }
            set { base.Details.UpdatedBy = value; }
        }
        public bool Hidden
        {
            get { return base.Details.Hidden; }
            set { base.Details.Hidden = value; }
        }
        public bool Deleted
        {
            get { return base.Details.Deleted; }
            set { base.Details.Deleted = value; }
        }

        public Settings Settings
        {
            get { return new Settings(this.SitId, this.Id, 0, 0); }
        }

        public Modules Modules
        {
            get { return new Modules(this.SitId, this.Id, 0); }
        }

        public Page() : base() { }
        public Page(Int32 Id) : base(Id) { }

    }
    public class Modules : ModulesDefinition
    {
        public Modules() : base() { }
        public Modules(Int32 SitId, Int32 PagId, Int32 ParentId) : base(SitId, PagId, ParentId) { }
        public Modules(String Alias) : base(Alias) { }
    }
    public class Module : ModuleDefinition
    {
        public int Id
        {
            get { return base.Details.Id; }
            set { base.Details.Id = value; }
        }
        public int SitId
        {
            get { return base.Details.SitId; }
            set { base.Details.SitId = value; }
        }
        public int PagId
        {
            get { return base.Details.PagId; }
            set { base.Details.PagId = value; }
        }
        public int MdeId
        {
            get { return base.Details.MdeId; }
            set { base.Details.MdeId = value; }
        }
        public int Status
        {
            get { return base.Details.Status; }
            set { base.Details.Status = value; }
        }
        public int Language
        {
            get { return base.Details.Language; }
            set { base.Details.Language = value; }
        }
        public int ParentId
        {
            get { return base.Details.ParentId; }
            set { base.Details.ParentId = value; }
        }
        public int Order
        {
            get { return base.Details.Order; }
            set { base.Details.Order = value; }
        }
        public string Title
        {
            get { return base.Details.Title; }
            set { base.Details.Title = value; }
        }
        public string Alias
        {
            get { return base.Details.Alias; }
            set { base.Details.Alias = value; }
        }
        public string Description
        {
            get { return base.Details.Description; }
            set { base.Details.Description = value; }
        }
        public string Src
        {
            get { return base.Details.Src; }
            set { base.Details.Src = value; }
        }
        public string ContentPane
        {
            get { return base.Details.ContentPane; }
            set { base.Details.ContentPane = value; }
        }
        public DateTime CreatedDate
        {
            get { return base.Details.CreatedDate; }
            set { base.Details.CreatedDate = value; }
        }
        public string CreatedBy
        {
            get { return base.Details.CreatedBy; }
            set { base.Details.CreatedBy = value; }
        }
        public DateTime UpdatedDate
        {
            get { return base.Details.UpdatedDate; }
            set { base.Details.UpdatedDate = value; }
        }
        public string UpdatedBy
        {
            get { return base.Details.UpdatedBy; }
            set { base.Details.UpdatedBy = value; }
        }
        public bool Hidden
        {
            get { return base.Details.Hidden; }
            set { base.Details.Hidden = value; }
        }
        public bool Deleted
        {
            get { return base.Details.Deleted; }
            set { base.Details.Deleted = value; }
        }

        public Settings Settings
        {
            get { return new Settings(this.SitId, this.PagId, this.Id, 0); }
        }

        public Module() : base() { }
        public Module(Int32 Id) : base(Id) { }

    }
    public class Objects : ObjectsDefinition
    {
        public Objects() : base() { }
        public Objects(Int32 SitId, Int32 PagId, Int32 ModId, Int32 ParentId) : base(SitId, PagId, ModId, ParentId) { }
        public Objects(String Alias) : base(Alias) { }
    }
    public class Object : ObjectDefinition
    {
        public int Id
        {
            get { return base.Details.Id; }
            set { base.Details.Id = value; }
        }
        public int SitId
        {
            get { return base.Details.SitId; }
            set { base.Details.SitId = value; }
        }
        public int PagId
        {
            get { return base.Details.PagId; }
            set { base.Details.PagId = value; }
        }
        public int ModId
        {
            get { return base.Details.ModId; }
            set { base.Details.ModId = value; }
        }
        public int Status
        {
            get { return base.Details.Status; }
            set { base.Details.Status = value; }
        }
        public int Language
        {
            get { return base.Details.Language; }
            set { base.Details.Language = value; }
        }
        public int Type
        {
            get { return base.Details.Type; }
            set { base.Details.Type = value; }
        }
        public int ParentId
        {
            get { return base.Details.ParentId; }
            set { base.Details.ParentId = value; }
        }
        public int Order
        {
            get { return base.Details.Order; }
            set { base.Details.Order = value; }
        }
        public string Title
        {
            get { return base.Details.Title; }
            set { base.Details.Title = value; }
        }
        public string Alias
        {
            get { return base.Details.Alias; }
            set { base.Details.Alias = value; }
        }
        public string Description
        {
            get { return base.Details.Description; }
            set { base.Details.Description = value; }
        }
        public string Value1
        {
            get { return base.Details.Value1; }
            set { base.Details.Value1 = value; }
        }
        public string Value2
        {
            get { return base.Details.Value2; }
            set { base.Details.Value2 = value; }
        }
        public string Value3
        {
            get { return base.Details.Value3; }
            set { base.Details.Value3 = value; }
        }
        public string Value4
        {
            get { return base.Details.Value4; }
            set { base.Details.Value4 = value; }
        }
        public string Value5
        {
            get { return base.Details.Value5; }
            set { base.Details.Value5 = value; }
        }
        public string Value6
        {
            get { return base.Details.Value7; }
            set { base.Details.Value7 = value; }
        }
        public string Value8
        {
            get { return base.Details.Value8; }
            set { base.Details.Value8 = value; }
        }
        public string Value9
        {
            get { return base.Details.Value9; }
            set { base.Details.Value9 = value; }
        }
        public string Value10
        {
            get { return base.Details.Value10; }
            set { base.Details.Value10 = value; }
        }
        public DateTime CreatedDate
        {
            get { return base.Details.CreatedDate; }
            set { base.Details.CreatedDate = value; }
        }
        public string CreatedBy
        {
            get { return base.Details.CreatedBy; }
            set { base.Details.CreatedBy = value; }
        }
        public DateTime UpdatedDate
        {
            get { return base.Details.UpdatedDate; }
            set { base.Details.UpdatedDate = value; }
        }
        public string UpdatedBy
        {
            get { return base.Details.UpdatedBy; }
            set { base.Details.UpdatedBy = value; }
        }
        public bool Hidden
        {
            get { return base.Details.Hidden; }
            set { base.Details.Hidden = value; }
        }
        public bool Deleted
        {
            get { return base.Details.Deleted; }
            set { base.Details.Deleted = value; }
        }

        public Object() : base() { }
        public Object(Int32 Id) : base(Id) { }

    }
    public class Models : ModelsDefinition
    {
        public Models() : base() { }
        public Models(Int32 SitId, Int32 ParentId) : base(SitId, ParentId) { }
    }
    public class Model : ModelDefinition
    {
        public int Id
        {
            get { return base.Details.Id; }
            set { base.Details.Id = value; }
        }
        public int SitId
        {
            get { return base.Details.SitId; }
            set { base.Details.SitId = value; }
        }
        public int Status
        {
            get { return base.Details.Status; }
            set { base.Details.Status = value; }
        }
        public int Language
        {
            get { return base.Details.Language; }
            set { base.Details.Language = value; }
        }
        public int ParentId
        {
            get { return base.Details.ParentId; }
            set { base.Details.ParentId = value; }
        }
        public int Order
        {
            get { return base.Details.Order; }
            set { base.Details.Order = value; }
        }
        public string Title
        {
            get { return base.Details.Title; }
            set { base.Details.Title = value; }
        }
        public string Alias
        {
            get { return base.Details.Alias; }
            set { base.Details.Alias = value; }
        }
        public string Description
        {
            get { return base.Details.Description; }
            set { base.Details.Description = value; }
        }
        public DateTime CreatedDate
        {
            get { return base.Details.CreatedDate; }
            set { base.Details.CreatedDate = value; }
        }
        public string CreatedBy
        {
            get { return base.Details.CreatedBy; }
            set { base.Details.CreatedBy = value; }
        }
        public DateTime UpdatedDate
        {
            get { return base.Details.UpdatedDate; }
            set { base.Details.UpdatedDate = value; }
        }
        public string UpdatedBy
        {
            get { return base.Details.UpdatedBy; }
            set { base.Details.UpdatedBy = value; }
        }
        public bool Hidden
        {
            get { return base.Details.Hidden; }
            set { base.Details.Hidden = value; }
        }
        public bool Deleted
        {
            get { return base.Details.Deleted; }
            set { base.Details.Deleted = value; }
        }

        public Model() : base() { }
        public Model(Int32 Id) : base(Id) { }

    }
    public class ModelItems : ModelItemsDefinition
    {
        public ModelItems() : base() { }
        public ModelItems(Int32 SitId, Int32 MdlId, Int32 ParentId) : base(SitId, MdlId, ParentId) { }
    }
    public class ModelItem : ModelItemDefinition
    {
        public int Id
        {
            get { return base.Details.Id; }
            set { base.Details.Id = value; }
        }
        public int SitId
        {
            get { return base.Details.SitId; }
            set { base.Details.SitId = value; }
        }
        public int MdlId
        {
            get { return base.Details.MdlId; }
            set { base.Details.MdlId = value; }
        }
        public int MdeId
        {
            get { return base.Details.MdeId; }
            set { base.Details.MdeId = value; }
        }
        public int Status
        {
            get { return base.Details.Status; }
            set { base.Details.Status = value; }
        }
        public int Language
        {
            get { return base.Details.Language; }
            set { base.Details.Language = value; }
        }
        public int ParentId
        {
            get { return base.Details.ParentId; }
            set { base.Details.ParentId = value; }
        }
        public int Order
        {
            get { return base.Details.Order; }
            set { base.Details.Order = value; }
        }
        public string ContentPane
        {
            get { return base.Details.ContentPane; }
            set { base.Details.ContentPane = value; }
        }
        public DateTime CreatedDate
        {
            get { return base.Details.CreatedDate; }
            set { base.Details.CreatedDate = value; }
        }
        public string CreatedBy
        {
            get { return base.Details.CreatedBy; }
            set { base.Details.CreatedBy = value; }
        }
        public DateTime UpdatedDate
        {
            get { return base.Details.UpdatedDate; }
            set { base.Details.UpdatedDate = value; }
        }
        public string UpdatedBy
        {
            get { return base.Details.UpdatedBy; }
            set { base.Details.UpdatedBy = value; }
        }
        public bool Hidden
        {
            get { return base.Details.Hidden; }
            set { base.Details.Hidden = value; }
        }
        public bool Deleted
        {
            get { return base.Details.Deleted; }
            set { base.Details.Deleted = value; }
        }

        public ModelItem() : base() { }
        public ModelItem(Int32 Id) : base(Id) { }

    }
    public class ModDefs : ModDefsDefinition
    {
        public ModDefs() : base() { }
        public ModDefs(Int32 SitId, Int32 ParentId) : base(SitId, ParentId) { }
    }
    public class ModDef : ModDefDefinition
    {
        public int Id
        {
            get { return base.Details.Id; }
            set { base.Details.Id = value; }
        }
        public int SitId
        {
            get { return base.Details.SitId; }
            set { base.Details.SitId = value; }
        }
        public int Status
        {
            get { return base.Details.Status; }
            set { base.Details.Status = value; }
        }
        public int Language
        {
            get { return base.Details.Language; }
            set { base.Details.Language = value; }
        }
        public int ParentId
        {
            get { return base.Details.ParentId; }
            set { base.Details.ParentId = value; }
        }
        public int Order
        {
            get { return base.Details.Order; }
            set { base.Details.Order = value; }
        }
        public string Title
        {
            get { return base.Details.Title; }
            set { base.Details.Title = value; }
        }
        public string Alias
        {
            get { return base.Details.Alias; }
            set { base.Details.Alias = value; }
        }
        public string Description
        {
            get { return base.Details.Description; }
            set { base.Details.Description = value; }
        }
        public string Src
        {
            get { return base.Details.Src; }
            set { base.Details.Src = value; }
        }
        public DateTime CreatedDate
        {
            get { return base.Details.CreatedDate; }
            set { base.Details.CreatedDate = value; }
        }
        public string CreatedBy
        {
            get { return base.Details.CreatedBy; }
            set { base.Details.CreatedBy = value; }
        }
        public DateTime UpdatedDate
        {
            get { return base.Details.UpdatedDate; }
            set { base.Details.UpdatedDate = value; }
        }
        public string UpdatedBy
        {
            get { return base.Details.UpdatedBy; }
            set { base.Details.UpdatedBy = value; }
        }
        public bool Hidden
        {
            get { return base.Details.Hidden; }
            set { base.Details.Hidden = value; }
        }
        public bool Deleted
        {
            get { return base.Details.Deleted; }
            set { base.Details.Deleted = value; }
        }

        public ModDef() : base() { }
        public ModDef(Int32 Id) : base(Id) { }

    }
}

// DefinitionLayer
namespace LiquidCore
{
    namespace LiquidCore.Definition
    {
        using CoreLib;
        using LiquidCore.Modeler;
        public class SitesDefinition : DomainObject, IDomainObject, IDisposable, ICollection<Site>
        {
            private bool _disposed = false;
            protected List<Site> _list = new List<Site>();

            private SitesModel _details = null;

            public Site this[Int32 index]
            {
                get
                {
                    return _list[index];
                }
            }

            public SitesDefinition()
                : base(DomainObjectState.Clean)
            {
                _details = new SitesModel(this);
            }

            public SitesDefinition(String Alias)
                : base(DomainObjectState.Clean)
            {
                this.DataFields["Alias"] = Alias;
                _details = new SitesModel(this);
            }

            ~SitesDefinition() { Dispose(false); }

            protected virtual void Dispose(bool disposing)
            {
                if (!_disposed)
                {
                    if (disposing)
                    {
                        _details = null;
                        DataFields = null;
                        foreach (Site l in _list)
                            l.Dispose();
                    }
                }
                _disposed = true;
            }

            public IEnumerator GetEnumerator()
            {
                return _list.GetEnumerator();
            }

            public new void Save()
            {
                foreach (Site l in _list)
                    if (l.ObjectState == DomainObjectState.Dirty)
                        l.Save();
            }
           
            #region IDomainObject Members

            void IDomainObject.CreateEntity()
            {
                // Not in use...
            }

            void IDomainObject.LoadEntity(ModelObject details)
            {
                LiquidCore.Data.SiteData.LoadAll(ref _list, this.DataFields);
            }

            void IDomainObject.UpdateEntity()
            {
                foreach (Site l in _list)
                    if (l.ObjectState == DomainObjectState.Dirty)
                        l.Save();
            }

            void IDomainObject.DeleteEntity()
            {
                foreach (Site l in _list)
                    l.Delete();
            }

            #endregion

            #region IDisposable Members

            void IDisposable.Dispose()
            {
                Dispose(true); 
                GC.SuppressFinalize(this);
            }

            #endregion

            #region ICollection<Site> Members

            public void Clear()
            {
                _list.Clear();
            }

            public bool Contains(Site item)
            {
                return _list.Contains(item);
            }

            public void CopyTo(Site[] array, int arrayIndex)
            {
                _list.CopyTo(array, arrayIndex);
            }

            public int Count
            {
                get { return _list.Count; }
            }

            public bool IsReadOnly
            {
                get { throw new Exception("The method or operation is not implemented."); }
            }

            public bool Remove(Site item)
            {
                return _list.Remove(item);
            }

            public void Add(Site item)
            {
                _list.Add(item);
            }

            #endregion

            #region IEnumerable<Site> Members

            IEnumerator<Site> IEnumerable<Site>.GetEnumerator()
            {
                return _list.GetEnumerator();
            }

            #endregion

            #region GenericComparer Members

            public enum SortOrderEnum
            {
                Ascending,
                Descending
            }

            public enum SortParamEnum
            {
                Id,
                Name,
                CreatedDate,
                UpdatedDate,
            }

            public class GenericComparer : IComparer<Site>
            {
                private String _Property = null;
                private SortOrderEnum _SortOrder = SortOrderEnum.Ascending;

                public String SortProperty
                {
                    get { return _Property; }
                    set { _Property = value; }
                }

                public SortOrderEnum SortOrder
                {
                    get { return _SortOrder; }
                    set { _SortOrder = value; }
                }

                public int Compare(Site x, Site y)
                {
                    try
                    {
                        Site ing1 = (Site)x;
                        Site ing2 = (Site)y;

                        if (this.SortOrder.Equals(SortOrderEnum.Ascending))
                            return ing1.CompareTo(ing2, this.SortProperty);
                        else
                            return ing2.CompareTo(ing1, this.SortProperty);
                    }
                    catch (Exception ex)
                    {
                        return 0;
                    }
                }
            }


            public void Sort(SortParamEnum SortBy, SortOrderEnum SortOrder)
            {
                GenericComparer comparer = new GenericComparer();
                comparer.SortProperty = SortBy.ToString();
                comparer.SortOrder = SortOrder;
                _list.Sort((IComparer<Site>)comparer);
            }

            #endregion GenericComparer Members
        }
        public class SiteDefinition : DomainObject, IDomainObject, IDisposable
        {
            private bool _disposed = false;
            private SiteModel _details = null;

            protected SiteModel Details
            {
                get { return _details; }
                set { _details = value; }
            }

            public SiteDefinition()
                : base(DomainObjectState.New)
            {
                _details = new SiteModel(this);
            }

            public SiteDefinition(Int32 Id)
                : base(DomainObjectState.Clean)
            {
                DataFields["Id"] = Id;
                _details = new SiteModel(this);
            }

            ~SiteDefinition() { Dispose(false); }

            public void Dispose() { Dispose(true); GC.SuppressFinalize(this); }

            protected virtual void Dispose(bool disposing)
            {
                if (!_disposed)
                {
                    if (disposing)
                    {
                        _details = null;
                        DataFields = null;
                        //base.Dispose(true);
                    }
                }
                _disposed = true;
            }

            #region IDomainObject Members

            void IDomainObject.CreateEntity()
            {
                LiquidCore.Data.SiteData.Create(Details);
            }

            void IDomainObject.LoadEntity(ModelObject Details)
            {
                LiquidCore.Data.SiteData.Load(Details, DataFields);
            }

            void IDomainObject.UpdateEntity()
            {
                LiquidCore.Data.SiteData.Update(Details);
            }

            void IDomainObject.DeleteEntity()
            {
                LiquidCore.Data.SiteData.Delete(Details);
            }

            #endregion

            #region GenericComparer Members
            public int CompareTo(object obj, string Property)
            {
                try
                {
                    Type type = this.GetType();
                    PropertyInfo propertie = type.GetProperty(Property);


                    Type type2 = obj.GetType();
                    PropertyInfo propertie2 = type2.GetProperty(Property);

                    object[] index = null;

                    object Obj1 = propertie.GetValue(this, index);
                    object Obj2 = propertie2.GetValue(obj, index);

                    IComparable Ic1 = (IComparable)Obj1;
                    IComparable Ic2 = (IComparable)Obj2;

                    int ret = Ic1.CompareTo(Ic2);

                    return ret;

                }
                catch (Exception ex)
                {
                    return 0;
                }
            }
            #endregion GenericComparer Members

        }
        public class SettingsDefinition : DomainObject, IDomainObject, IDisposable, ICollection<Setting>
        {
            private bool _disposed = false;
            protected List<Setting> _list = new List<Setting>();

            private SettingsModel _details = null;

            public Setting this[Int32 index]
            {
                get
                {
                    return _list[index];
                }
            }

            public SettingsDefinition()
                : base(DomainObjectState.Clean)
            {
                _details = new SettingsModel(this);
            }

            public SettingsDefinition(Int32 SitId, Int32 PagId, Int32 ModId, Int32 ParentId)
                : base(DomainObjectState.Clean)
            {
                this.DataFields["SitId"] = SitId;
                this.DataFields["PagId"] = PagId;
                this.DataFields["ModId"] = ModId;
                this.DataFields["ParentId"] = ParentId;
                _details = new SettingsModel(this);
            }

            public SettingsDefinition(String Alias)
                : base(DomainObjectState.Clean)
            {
                this.DataFields["Alias"] = Alias;
                _details = new SettingsModel(this);
            }

            ~SettingsDefinition() { Dispose(false); }

            protected virtual void Dispose(bool disposing)
            {
                if (!_disposed)
                {
                    if (disposing)
                    {
                        _details = null;
                        DataFields = null;
                        foreach (Setting l in _list)
                            l.Dispose();
                    }
                }
                _disposed = true;
            }

            public IEnumerator GetEnumerator()
            {
                return _list.GetEnumerator();
            }

            public new void Save()
            {
                foreach (Setting l in _list)
                    if (l.ObjectState == DomainObjectState.Dirty)
                        l.Save();
            }

            #region IDomainObject Members

            void IDomainObject.CreateEntity()
            {
                // Not in use...
            }

            void IDomainObject.LoadEntity(ModelObject details)
            {
                LiquidCore.Data.SettingData.LoadAll(ref _list, this.DataFields);
            }

            void IDomainObject.UpdateEntity()
            {
                foreach (Setting l in _list)
                    if (l.ObjectState == DomainObjectState.Dirty)
                        l.Save();
            }

            void IDomainObject.DeleteEntity()
            {
                foreach (Setting l in _list)
                    l.Delete();
            }

            #endregion

            #region IDisposable Members

            void IDisposable.Dispose()
            {
                Dispose(true);
                GC.SuppressFinalize(this);
            }

            #endregion

            #region ICollection<Setting> Members

            public void Clear()
            {
                _list.Clear();
            }

            public bool Contains(Setting item)
            {
                return _list.Contains(item);
            }

            public void CopyTo(Setting[] array, int arrayIndex)
            {
                _list.CopyTo(array, arrayIndex);
            }

            public int Count
            {
                get { return _list.Count; }
            }

            public bool IsReadOnly
            {
                get { throw new Exception("The method or operation is not implemented."); }
            }

            public bool Remove(Setting item)
            {
                return _list.Remove(item);
            }

            public void Add(Setting item)
            {
                _list.Add(item);
            }

            #endregion

            #region IEnumerable<Setting> Members

            IEnumerator<Setting> IEnumerable<Setting>.GetEnumerator()
            {
                return _list.GetEnumerator();
            }

            #endregion

            #region GenericComparer Members

            public enum SortOrderEnum
            {
                Ascending,
                Descending
            }

            public enum SortParamEnum
            {
                Id,
                Title,
                Value,
                CreatedDate,
                UpdatedDate,
            }

            public class GenericComparer : IComparer<Setting>
            {
                private String _Property = null;
                private SortOrderEnum _SortOrder = SortOrderEnum.Ascending;

                public String SortProperty
                {
                    get { return _Property; }
                    set { _Property = value; }
                }

                public SortOrderEnum SortOrder
                {
                    get { return _SortOrder; }
                    set { _SortOrder = value; }
                }

                public int Compare(Setting x, Setting y)
                {
                    try
                    {
                        Setting ing1 = (Setting)x;
                        Setting ing2 = (Setting)y;

                        if (this.SortOrder.Equals(SortOrderEnum.Ascending))
                            return ing1.CompareTo(ing2, this.SortProperty);
                        else
                            return ing2.CompareTo(ing1, this.SortProperty);
                    }
                    catch (Exception ex)
                    {
                        return 0;
                    }
                }
            }


            public void Sort(SortParamEnum SortBy, SortOrderEnum SortOrder)
            {
                GenericComparer comparer = new GenericComparer();
                comparer.SortProperty = SortBy.ToString();
                comparer.SortOrder = SortOrder;
                _list.Sort((IComparer<Setting>)comparer);
            }

            #endregion GenericComparer Members
        }
        public class SettingDefinition : DomainObject, IDomainObject, IDisposable
        {
            private bool _disposed = false;
            private SettingModel _details = null;

            protected SettingModel Details
            {
                get { return _details; }
                set { _details = value; }
            }

            public SettingDefinition()
                : base(DomainObjectState.New)
            {
                _details = new SettingModel(this);
            }

            public SettingDefinition(Int32 Id)
                : base(DomainObjectState.Clean)
            {
                DataFields["Id"] = Id;
                _details = new SettingModel(this);
            }

            public SettingDefinition(String Alias)
                : base(DomainObjectState.Clean)
            {
                DataFields["Alias"] = Alias;
                _details = new SettingModel(this);
            }

            ~SettingDefinition() { Dispose(false); }

            public void Dispose() { Dispose(true); GC.SuppressFinalize(this); }

            protected virtual void Dispose(bool disposing)
            {
                if (!_disposed)
                {
                    if (disposing)
                    {
                        _details = null;
                        DataFields = null;
                        //base.Dispose(true);
                    }
                }
                _disposed = true;
            }

            #region IDomainObject Members

            void IDomainObject.CreateEntity()
            {
                LiquidCore.Data.SettingData.Create(Details);
            }

            void IDomainObject.LoadEntity(ModelObject Details)
            {
                LiquidCore.Data.SettingData.Load(Details, DataFields);
            }

            void IDomainObject.UpdateEntity()
            {
                LiquidCore.Data.SettingData.Update(Details);
            }

            void IDomainObject.DeleteEntity()
            {
                LiquidCore.Data.SettingData.Delete(Details);
            }

            #endregion

            #region GenericComparer Members
            public int CompareTo(object obj, string Property)
            {
                try
                {
                    Type type = this.GetType();
                    PropertyInfo propertie = type.GetProperty(Property);


                    Type type2 = obj.GetType();
                    PropertyInfo propertie2 = type2.GetProperty(Property);

                    object[] index = null;

                    object Obj1 = propertie.GetValue(this, index);
                    object Obj2 = propertie2.GetValue(obj, index);

                    IComparable Ic1 = (IComparable)Obj1;
                    IComparable Ic2 = (IComparable)Obj2;

                    int ret = Ic1.CompareTo(Ic2);

                    return ret;

                }
                catch (Exception ex)
                {
                    return 0;
                }
            }
            #endregion GenericComparer Members

        }
        public class PagesDefinition : DomainObject, IDomainObject, IDisposable, ICollection<Page>
        {
            private bool _disposed = false;
            protected List<Page> _list = new List<Page>();

            private PagesModel _details = null;

            public Page this[Int32 index]
            {
                get
                {
                    return _list[index];
                }
            }

            public PagesDefinition()
                : base(DomainObjectState.Clean)
            {
                _details = new PagesModel(this);
            }

            public PagesDefinition(Int32 SitId, Int32 ParentId)
                : base(DomainObjectState.Clean)
            {
                this.DataFields["SitId"] = SitId;
                this.DataFields["ParentId"] = ParentId;
                _details = new PagesModel(this);
            }

            public PagesDefinition(String Alias)
                : base(DomainObjectState.Clean)
            {
                this.DataFields["Alias"] = Alias;
                _details = new PagesModel(this);
            }

            ~PagesDefinition() { Dispose(false); }

            protected virtual void Dispose(bool disposing)
            {
                if (!_disposed)
                {
                    if (disposing)
                    {
                        _details = null;
                        DataFields = null;
                        foreach (Page l in _list)
                            l.Dispose();
                    }
                }
                _disposed = true;
            }

            public IEnumerator GetEnumerator()
            {
                return _list.GetEnumerator();
            }

            public new void Save()
            {
                foreach (Page l in _list)
                    if (l.ObjectState == DomainObjectState.Dirty)
                        l.Save();
            }

            #region IDomainObject Members

            void IDomainObject.CreateEntity()
            {
                // Not in use...
            }

            void IDomainObject.LoadEntity(ModelObject details)
            {
                LiquidCore.Data.PageData.LoadAll(ref _list, this.DataFields);
            }

            void IDomainObject.UpdateEntity()
            {
                foreach (Page l in _list)
                    if (l.ObjectState == DomainObjectState.Dirty)
                        l.Save();
            }

            void IDomainObject.DeleteEntity()
            {
                foreach (Page l in _list)
                    l.Delete();
            }

            #endregion

            #region IDisposable Members

            void IDisposable.Dispose()
            {
                Dispose(true);
                GC.SuppressFinalize(this);
            }

            #endregion

            #region ICollection<Page> Members

            public void Clear()
            {
                _list.Clear();
            }

            public bool Contains(Page item)
            {
                return _list.Contains(item);
            }

            public void CopyTo(Page[] array, int arrayIndex)
            {
                _list.CopyTo(array, arrayIndex);
            }

            public int Count
            {
                get { return _list.Count; }
            }

            public bool IsReadOnly
            {
                get { throw new Exception("The method or operation is not implemented."); }
            }

            public bool Remove(Page item)
            {
                return _list.Remove(item);
            }

            public void Add(Page item)
            {
                _list.Add(item);
            }

            #endregion

            #region IEnumerable<Page> Members

            IEnumerator<Page> IEnumerable<Page>.GetEnumerator()
            {
                return _list.GetEnumerator();
            }

            #endregion

            #region GenericComparer Members

            public enum SortOrderEnum
            {
                Ascending,
                Descending
            }

            public enum SortParamEnum
            {
                Id,
                Name,
                CreatedDate,
                UpdatedDate,
            }

            public class GenericComparer : IComparer<Page>
            {
                private String _Property = null;
                private SortOrderEnum _SortOrder = SortOrderEnum.Ascending;

                public String SortProperty
                {
                    get { return _Property; }
                    set { _Property = value; }
                }

                public SortOrderEnum SortOrder
                {
                    get { return _SortOrder; }
                    set { _SortOrder = value; }
                }

                public int Compare(Page x, Page y)
                {
                    try
                    {
                        Page ing1 = (Page)x;
                        Page ing2 = (Page)y;

                        if (this.SortOrder.Equals(SortOrderEnum.Ascending))
                            return ing1.CompareTo(ing2, this.SortProperty);
                        else
                            return ing2.CompareTo(ing1, this.SortProperty);
                    }
                    catch (Exception ex)
                    {
                        return 0;
                    }
                }
            }


            public void Sort(SortParamEnum SortBy, SortOrderEnum SortOrder)
            {
                GenericComparer comparer = new GenericComparer();
                comparer.SortProperty = SortBy.ToString();
                comparer.SortOrder = SortOrder;
                _list.Sort((IComparer<Page>)comparer);
            }

            #endregion GenericComparer Members
        }
        public class PageDefinition : DomainObject, IDomainObject, IDisposable
        {
            private bool _disposed = false;
            private PageModel _details = null;

            protected PageModel Details
            {
                get { return _details; }
                set { _details = value; }
            }

            public PageDefinition()
                : base(DomainObjectState.New)
            {
                _details = new PageModel(this);
            }

            public PageDefinition(Int32 Id)
                : base(DomainObjectState.Clean)
            {
                DataFields["Id"] = Id;
                _details = new PageModel(this);
            }

            ~PageDefinition() { Dispose(false); }

            public void Dispose() { Dispose(true); GC.SuppressFinalize(this); }

            protected virtual void Dispose(bool disposing)
            {
                if (!_disposed)
                {
                    if (disposing)
                    {
                        _details = null;
                        DataFields = null;
                        //base.Dispose(true);
                    }
                }
                _disposed = true;
            }

            #region IDomainObject Members

            void IDomainObject.CreateEntity()
            {
                LiquidCore.Data.PageData.Create(Details);
            }

            void IDomainObject.LoadEntity(ModelObject Details)
            {
                LiquidCore.Data.PageData.Load(Details, DataFields);
            }

            void IDomainObject.UpdateEntity()
            {
                LiquidCore.Data.PageData.Update(Details);
            }

            void IDomainObject.DeleteEntity()
            {
                LiquidCore.Data.PageData.Delete(Details);
            }

            #endregion

            #region GenericComparer Members
            public int CompareTo(object obj, string Property)
            {
                try
                {
                    Type type = this.GetType();
                    PropertyInfo propertie = type.GetProperty(Property);


                    Type type2 = obj.GetType();
                    PropertyInfo propertie2 = type2.GetProperty(Property);

                    object[] index = null;

                    object Obj1 = propertie.GetValue(this, index);
                    object Obj2 = propertie2.GetValue(obj, index);

                    IComparable Ic1 = (IComparable)Obj1;
                    IComparable Ic2 = (IComparable)Obj2;

                    int ret = Ic1.CompareTo(Ic2);

                    return ret;

                }
                catch (Exception ex)
                {
                    return 0;
                }
            }
            #endregion GenericComparer Members

        }
        public class ModulesDefinition : DomainObject, IDomainObject, IDisposable, ICollection<Module>
        {
            private bool _disposed = false;
            protected List<Module> _list = new List<Module>();

            private ModulesModel _details = null;

            public Module this[Int32 index]
            {
                get
                {
                    return _list[index];
                }
            }

            public ModulesDefinition()
                : base(DomainObjectState.Clean)
            {
                _details = new ModulesModel(this);
            }

            public ModulesDefinition(Int32 SitId, Int32 PagId, Int32 ParentId)
                : base(DomainObjectState.Clean)
            {
                this.DataFields["SitId"] = SitId;
                this.DataFields["PagId"] = PagId;
                this.DataFields["ParentId"] = ParentId;
                _details = new ModulesModel(this);
            }

            public ModulesDefinition(String Alias)
                : base(DomainObjectState.Clean)
            {
                this.DataFields["Alias"] = Alias;
                _details = new ModulesModel(this);
            }

            ~ModulesDefinition() { Dispose(false); }

            protected virtual void Dispose(bool disposing)
            {
                if (!_disposed)
                {
                    if (disposing)
                    {
                        _details = null;
                        DataFields = null;
                        foreach (Module l in _list)
                            l.Dispose();
                    }
                }
                _disposed = true;
            }

            public IEnumerator GetEnumerator()
            {
                return _list.GetEnumerator();
            }

            public new void Save()
            {
                foreach (Module l in _list)
                    if (l.ObjectState == DomainObjectState.Dirty)
                        l.Save();
            }

            #region IDomainObject Members

            void IDomainObject.CreateEntity()
            {
                // Not in use...
            }

            void IDomainObject.LoadEntity(ModelObject details)
            {
                LiquidCore.Data.ModuleData.LoadAll(ref _list, this.DataFields);
            }

            void IDomainObject.UpdateEntity()
            {
                foreach (Module l in _list)
                    if (l.ObjectState == DomainObjectState.Dirty)
                        l.Save();
            }

            void IDomainObject.DeleteEntity()
            {
                foreach (Module l in _list)
                    l.Delete();
            }

            #endregion

            #region IDisposable Members

            void IDisposable.Dispose()
            {
                Dispose(true);
                GC.SuppressFinalize(this);
            }

            #endregion

            #region ICollection<Module> Members

            public void Clear()
            {
                _list.Clear();
            }

            public bool Contains(Module item)
            {
                return _list.Contains(item);
            }

            public void CopyTo(Module[] array, int arrayIndex)
            {
                _list.CopyTo(array, arrayIndex);
            }

            public int Count
            {
                get { return _list.Count; }
            }

            public bool IsReadOnly
            {
                get { throw new Exception("The method or operation is not implemented."); }
            }

            public bool Remove(Module item)
            {
                return _list.Remove(item);
            }

            public void Add(Module item)
            {
                _list.Add(item);
            }

            #endregion

            #region IEnumerable<Module> Members

            IEnumerator<Module> IEnumerable<Module>.GetEnumerator()
            {
                return _list.GetEnumerator();
            }

            #endregion

            #region GenericComparer Members

            public enum SortOrderEnum
            {
                Ascending,
                Descending
            }

            public enum SortParamEnum
            {
                Id,
                Name,
                CreatedDate,
                UpdatedDate,
            }

            public class GenericComparer : IComparer<Module>
            {
                private String _Property = null;
                private SortOrderEnum _SortOrder = SortOrderEnum.Ascending;

                public String SortProperty
                {
                    get { return _Property; }
                    set { _Property = value; }
                }

                public SortOrderEnum SortOrder
                {
                    get { return _SortOrder; }
                    set { _SortOrder = value; }
                }

                public int Compare(Module x, Module y)
                {
                    try
                    {
                        Module ing1 = (Module)x;
                        Module ing2 = (Module)y;

                        if (this.SortOrder.Equals(SortOrderEnum.Ascending))
                            return ing1.CompareTo(ing2, this.SortProperty);
                        else
                            return ing2.CompareTo(ing1, this.SortProperty);
                    }
                    catch (Exception ex)
                    {
                        return 0;
                    }
                }
            }


            public void Sort(SortParamEnum SortBy, SortOrderEnum SortOrder)
            {
                GenericComparer comparer = new GenericComparer();
                comparer.SortProperty = SortBy.ToString();
                comparer.SortOrder = SortOrder;
                _list.Sort((IComparer<Module>)comparer);
            }

            #endregion GenericComparer Members
        }
        public class ModuleDefinition : DomainObject, IDomainObject, IDisposable
        {
            private bool _disposed = false;
            private ModuleModel _details = null;

            protected ModuleModel Details
            {
                get { return _details; }
                set { _details = value; }
            }

            public ModuleDefinition()
                : base(DomainObjectState.New)
            {
                _details = new ModuleModel(this);
            }

            public ModuleDefinition(Int32 Id)
                : base(DomainObjectState.Clean)
            {
                DataFields["Id"] = Id;
                _details = new ModuleModel(this);
            }

            ~ModuleDefinition() { Dispose(false); }

            public void Dispose() { Dispose(true); GC.SuppressFinalize(this); }

            protected virtual void Dispose(bool disposing)
            {
                if (!_disposed)
                {
                    if (disposing)
                    {
                        _details = null;
                        DataFields = null;
                        //base.Dispose(true);
                    }
                }
                _disposed = true;
            }

            #region IDomainObject Members

            void IDomainObject.CreateEntity()
            {
                LiquidCore.Data.ModuleData.Create(Details);
            }

            void IDomainObject.LoadEntity(ModelObject Details)
            {
                LiquidCore.Data.ModuleData.Load(Details, DataFields);
            }

            void IDomainObject.UpdateEntity()
            {
                LiquidCore.Data.ModuleData.Update(Details);
            }

            void IDomainObject.DeleteEntity()
            {
                LiquidCore.Data.ModuleData.Delete(Details);
            }

            #endregion

            #region GenericComparer Members
            public int CompareTo(object obj, string Property)
            {
                try
                {
                    Type type = this.GetType();
                    PropertyInfo propertie = type.GetProperty(Property);


                    Type type2 = obj.GetType();
                    PropertyInfo propertie2 = type2.GetProperty(Property);

                    object[] index = null;

                    object Obj1 = propertie.GetValue(this, index);
                    object Obj2 = propertie2.GetValue(obj, index);

                    IComparable Ic1 = (IComparable)Obj1;
                    IComparable Ic2 = (IComparable)Obj2;

                    int ret = Ic1.CompareTo(Ic2);

                    return ret;

                }
                catch (Exception ex)
                {
                    return 0;
                }
            }
            #endregion GenericComparer Members

        }
        public class ObjectsDefinition : DomainObject, IDomainObject, IDisposable, ICollection<Object>
        {
            private bool _disposed = false;
            protected List<Object> _list = new List<Object>();

            private ObjectsModel _details = null;

            public Object this[Int32 index]
            {
                get
                {
                    return _list[index];
                }
            }

            public ObjectsDefinition()
                : base(DomainObjectState.Clean)
            {
                _details = new ObjectsModel(this);
            }

            public ObjectsDefinition(Int32 SitId, Int32 PagId, Int32 ModId, Int32 ParentId)
                : base(DomainObjectState.Clean)
            {
                this.DataFields["SitId"] = SitId;
                this.DataFields["PagId"] = PagId;
                this.DataFields["ModId"] = ModId;
                this.DataFields["ParentId"] = ParentId;
                _details = new ObjectsModel(this);
            }

            public ObjectsDefinition(String Alias)
                : base(DomainObjectState.Clean)
            {
                this.DataFields["Alias"] = Alias;
                _details = new ObjectsModel(this);
            }

            ~ObjectsDefinition() { Dispose(false); }

            protected virtual void Dispose(bool disposing)
            {
                if (!_disposed)
                {
                    if (disposing)
                    {
                        _details = null;
                        DataFields = null;
                        foreach (Object l in _list)
                            l.Dispose();
                    }
                }
                _disposed = true;
            }

            public IEnumerator GetEnumerator()
            {
                return _list.GetEnumerator();
            }

            public new void Save()
            {
                foreach (Object l in _list)
                    if (l.ObjectState == DomainObjectState.Dirty)
                        l.Save();
            }

            #region IDomainObject Members

            void IDomainObject.CreateEntity()
            {
                // Not in use...
            }

            void IDomainObject.LoadEntity(ModelObject details)
            {
                LiquidCore.Data.ObjectData.LoadAll(ref _list, this.DataFields);
            }

            void IDomainObject.UpdateEntity()
            {
                foreach (Object l in _list)
                    if (l.ObjectState == DomainObjectState.Dirty)
                        l.Save();
            }

            void IDomainObject.DeleteEntity()
            {
                foreach (Object l in _list)
                    l.Delete();
            }

            #endregion

            #region IDisposable Members

            void IDisposable.Dispose()
            {
                Dispose(true);
                GC.SuppressFinalize(this);
            }

            #endregion

            #region ICollection<Object> Members

            public void Clear()
            {
                _list.Clear();
            }

            public bool Contains(Object item)
            {
                return _list.Contains(item);
            }

            public void CopyTo(Object[] array, int arrayIndex)
            {
                _list.CopyTo(array, arrayIndex);
            }

            public int Count
            {
                get { return _list.Count; }
            }

            public bool IsReadOnly
            {
                get { throw new Exception("The method or operation is not implemented."); }
            }

            public bool Remove(Object item)
            {
                return _list.Remove(item);
            }

            public void Add(Object item)
            {
                _list.Add(item);
            }

            #endregion

            #region IEnumerable<Module> Members

            IEnumerator<Object> IEnumerable<Object>.GetEnumerator()
            {
                return _list.GetEnumerator();
            }

            #endregion

            #region GenericComparer Members

            public enum SortOrderEnum
            {
                Ascending,
                Descending
            }

            public enum SortParamEnum
            {
                Id,
                Name,
                CreatedDate,
                UpdatedDate,
            }

            public class GenericComparer : IComparer<Object>
            {
                private String _Property = null;
                private SortOrderEnum _SortOrder = SortOrderEnum.Ascending;

                public String SortProperty
                {
                    get { return _Property; }
                    set { _Property = value; }
                }

                public SortOrderEnum SortOrder
                {
                    get { return _SortOrder; }
                    set { _SortOrder = value; }
                }

                public int Compare(Object x, Object y)
                {
                    try
                    {
                        Object ing1 = (Object)x;
                        Object ing2 = (Object)y;

                        if (this.SortOrder.Equals(SortOrderEnum.Ascending))
                            return ing1.CompareTo(ing2, this.SortProperty);
                        else
                            return ing2.CompareTo(ing1, this.SortProperty);
                    }
                    catch (Exception ex)
                    {
                        return 0;
                    }
                }
            }


            public void Sort(SortParamEnum SortBy, SortOrderEnum SortOrder)
            {
                GenericComparer comparer = new GenericComparer();
                comparer.SortProperty = SortBy.ToString();
                comparer.SortOrder = SortOrder;
                _list.Sort((IComparer<Object>)comparer);
            }

            #endregion GenericComparer Members
        }
        public class ObjectDefinition : DomainObject, IDomainObject, IDisposable
        {
            private bool _disposed = false;
            private ObjectModel _details = null;

            protected ObjectModel Details
            {
                get { return _details; }
                set { _details = value; }
            }

            public ObjectDefinition()
                : base(DomainObjectState.New)
            {
                _details = new ObjectModel(this);
            }

            public ObjectDefinition(Int32 Id)
                : base(DomainObjectState.Clean)
            {
                DataFields["Id"] = Id;
                _details = new ObjectModel(this);
            }

            ~ObjectDefinition() { Dispose(false); }

            public void Dispose() { Dispose(true); GC.SuppressFinalize(this); }

            protected virtual void Dispose(bool disposing)
            {
                if (!_disposed)
                {
                    if (disposing)
                    {
                        _details = null;
                        DataFields = null;
                        //base.Dispose(true);
                    }
                }
                _disposed = true;
            }

            #region IDomainObject Members

            void IDomainObject.CreateEntity()
            {
                LiquidCore.Data.ObjectData.Create(Details);
            }

            void IDomainObject.LoadEntity(ModelObject Details)
            {
                LiquidCore.Data.ObjectData.Load(Details, DataFields);
            }

            void IDomainObject.UpdateEntity()
            {
                LiquidCore.Data.ObjectData.Update(Details);
            }

            void IDomainObject.DeleteEntity()
            {
                LiquidCore.Data.ObjectData.Delete(Details);
            }

            #endregion

            #region GenericComparer Members
            public int CompareTo(object obj, string Property)
            {
                try
                {
                    Type type = this.GetType();
                    PropertyInfo propertie = type.GetProperty(Property);


                    Type type2 = obj.GetType();
                    PropertyInfo propertie2 = type2.GetProperty(Property);

                    object[] index = null;

                    object Obj1 = propertie.GetValue(this, index);
                    object Obj2 = propertie2.GetValue(obj, index);

                    IComparable Ic1 = (IComparable)Obj1;
                    IComparable Ic2 = (IComparable)Obj2;

                    int ret = Ic1.CompareTo(Ic2);

                    return ret;

                }
                catch (Exception ex)
                {
                    return 0;
                }
            }
            #endregion GenericComparer Members

        }
        public class ModelsDefinition : DomainObject, IDomainObject, IDisposable, ICollection<Model>
        {
            private bool _disposed = false;
            protected List<Model> _list = new List<Model>();

            private ModelsModel _details = null;

            public Model this[Int32 index]
            {
                get
                {
                    return _list[index];
                }
            }

            public ModelsDefinition()
                : base(DomainObjectState.Clean)
            {
                _details = new ModelsModel(this);
            }

            public ModelsDefinition(Int32 SitId, Int32 ParentId)
                : base(DomainObjectState.Clean)
            {
                this.DataFields["SitId"] = SitId;
                this.DataFields["ParentId"] = ParentId;
                _details = new ModelsModel(this);
            }

            ~ModelsDefinition() { Dispose(false); }

            protected virtual void Dispose(bool disposing)
            {
                if (!_disposed)
                {
                    if (disposing)
                    {
                        _details = null;
                        DataFields = null;
                        foreach (Model l in _list)
                            l.Dispose();
                    }
                }
                _disposed = true;
            }

            public IEnumerator GetEnumerator()
            {
                return _list.GetEnumerator();
            }

            public new void Save()
            {
                foreach (Model l in _list)
                    if (l.ObjectState == DomainObjectState.Dirty)
                        l.Save();
            }

            #region IDomainObject Members

            void IDomainObject.CreateEntity()
            {
                // Not in use...
            }

            void IDomainObject.LoadEntity(ModelObject details)
            {
                LiquidCore.Data.ModelData.LoadAll(ref _list, this.DataFields);
            }

            void IDomainObject.UpdateEntity()
            {
                foreach (Model l in _list)
                    if (l.ObjectState == DomainObjectState.Dirty)
                        l.Save();
            }

            void IDomainObject.DeleteEntity()
            {
                foreach (Model l in _list)
                    l.Delete();
            }

            #endregion

            #region IDisposable Members

            void IDisposable.Dispose()
            {
                Dispose(true);
                GC.SuppressFinalize(this);
            }

            #endregion

            #region ICollection<Model> Members

            public void Clear()
            {
                _list.Clear();
            }

            public bool Contains(Model item)
            {
                return _list.Contains(item);
            }

            public void CopyTo(Model[] array, int arrayIndex)
            {
                _list.CopyTo(array, arrayIndex);
            }

            public int Count
            {
                get { return _list.Count; }
            }

            public bool IsReadOnly
            {
                get { throw new Exception("The method or operation is not implemented."); }
            }

            public bool Remove(Model item)
            {
                return _list.Remove(item);
            }

            public void Add(Model item)
            {
                _list.Add(item);
            }

            #endregion

            #region IEnumerable<Model> Members

            IEnumerator<Model> IEnumerable<Model>.GetEnumerator()
            {
                return _list.GetEnumerator();
            }

            #endregion

            #region GenericComparer Members

            public enum SortOrderEnum
            {
                Ascending,
                Descending
            }

            public enum SortParamEnum
            {
                Id,
                Name,
                CreatedDate,
                UpdatedDate,
            }

            public class GenericComparer : IComparer<Model>
            {
                private String _Property = null;
                private SortOrderEnum _SortOrder = SortOrderEnum.Ascending;

                public String SortProperty
                {
                    get { return _Property; }
                    set { _Property = value; }
                }

                public SortOrderEnum SortOrder
                {
                    get { return _SortOrder; }
                    set { _SortOrder = value; }
                }

                public int Compare(Model x, Model y)
                {
                    try
                    {
                        Model ing1 = (Model)x;
                        Model ing2 = (Model)y;

                        if (this.SortOrder.Equals(SortOrderEnum.Ascending))
                            return ing1.CompareTo(ing2, this.SortProperty);
                        else
                            return ing2.CompareTo(ing1, this.SortProperty);
                    }
                    catch (Exception ex)
                    {
                        return 0;
                    }
                }
            }


            public void Sort(SortParamEnum SortBy, SortOrderEnum SortOrder)
            {
                GenericComparer comparer = new GenericComparer();
                comparer.SortProperty = SortBy.ToString();
                comparer.SortOrder = SortOrder;
                _list.Sort((IComparer<Model>)comparer);
            }

            #endregion GenericComparer Members
        }
        public class ModelDefinition : DomainObject, IDomainObject, IDisposable
        {
            private bool _disposed = false;
            private ModelModel _details = null;

            protected ModelModel Details
            {
                get { return _details; }
                set { _details = value; }
            }

            public ModelDefinition()
                : base(DomainObjectState.New)
            {
                _details = new ModelModel(this);
            }

            public ModelDefinition(Int32 Id)
                : base(DomainObjectState.Clean)
            {
                DataFields["Id"] = Id;
                _details = new ModelModel(this);
            }

            ~ModelDefinition() { Dispose(false); }

            public void Dispose() { Dispose(true); GC.SuppressFinalize(this); }

            protected virtual void Dispose(bool disposing)
            {
                if (!_disposed)
                {
                    if (disposing)
                    {
                        _details = null;
                        DataFields = null;
                        //base.Dispose(true);
                    }
                }
                _disposed = true;
            }

            #region IDomainObject Members

            void IDomainObject.CreateEntity()
            {
                LiquidCore.Data.ModelData.Create(Details);
            }

            void IDomainObject.LoadEntity(ModelObject Details)
            {
                LiquidCore.Data.ModelData.Load(Details, DataFields);
            }

            void IDomainObject.UpdateEntity()
            {
                LiquidCore.Data.ModelData.Update(Details);
            }

            void IDomainObject.DeleteEntity()
            {
                LiquidCore.Data.ModelData.Delete(Details);
            }

            #endregion

            #region GenericComparer Members
            public int CompareTo(object obj, string Property)
            {
                try
                {
                    Type type = this.GetType();
                    PropertyInfo propertie = type.GetProperty(Property);


                    Type type2 = obj.GetType();
                    PropertyInfo propertie2 = type2.GetProperty(Property);

                    object[] index = null;

                    object Obj1 = propertie.GetValue(this, index);
                    object Obj2 = propertie2.GetValue(obj, index);

                    IComparable Ic1 = (IComparable)Obj1;
                    IComparable Ic2 = (IComparable)Obj2;

                    int ret = Ic1.CompareTo(Ic2);

                    return ret;

                }
                catch (Exception ex)
                {
                    return 0;
                }
            }
            #endregion GenericComparer Members

        }
        public class ModelItemsDefinition : DomainObject, IDomainObject, IDisposable, ICollection<ModelItem>
        {
            private bool _disposed = false;
            protected List<ModelItem> _list = new List<ModelItem>();

            private ModelItemsModel _details = null;

            public ModelItem this[Int32 index]
            {
                get
                {
                    return _list[index];
                }
            }

            public ModelItemsDefinition()
                : base(DomainObjectState.Clean)
            {
                _details = new ModelItemsModel(this);
            }

            public ModelItemsDefinition(Int32 SitId, Int32 MdlId, Int32 ParentId)
                : base(DomainObjectState.Clean)
            {
                this.DataFields["SitId"] = SitId;
                this.DataFields["MdlId"] = MdlId;
                this.DataFields["ParentId"] = ParentId;
                _details = new ModelItemsModel(this);
            }

            ~ModelItemsDefinition() { Dispose(false); }

            protected virtual void Dispose(bool disposing)
            {
                if (!_disposed)
                {
                    if (disposing)
                    {
                        _details = null;
                        DataFields = null;
                        foreach (ModelItem l in _list)
                            l.Dispose();
                    }
                }
                _disposed = true;
            }

            public IEnumerator GetEnumerator()
            {
                return _list.GetEnumerator();
            }

            public new void Save()
            {
                foreach (ModelItem l in _list)
                    if (l.ObjectState == DomainObjectState.Dirty)
                        l.Save();
            }

            #region IDomainObject Members

            void IDomainObject.CreateEntity()
            {
                // Not in use...
            }

            void IDomainObject.LoadEntity(ModelObject details)
            {
                LiquidCore.Data.ModelItemData.LoadAll(ref _list, this.DataFields);
            }

            void IDomainObject.UpdateEntity()
            {
                foreach (ModelItem l in _list)
                    if (l.ObjectState == DomainObjectState.Dirty)
                        l.Save();
            }

            void IDomainObject.DeleteEntity()
            {
                foreach (ModelItem l in _list)
                    l.Delete();
            }

            #endregion

            #region IDisposable Members

            void IDisposable.Dispose()
            {
                Dispose(true);
                GC.SuppressFinalize(this);
            }

            #endregion

            #region ICollection<ModelItem> Members

            public void Clear()
            {
                _list.Clear();
            }

            public bool Contains(ModelItem item)
            {
                return _list.Contains(item);
            }

            public void CopyTo(ModelItem[] array, int arrayIndex)
            {
                _list.CopyTo(array, arrayIndex);
            }

            public int Count
            {
                get { return _list.Count; }
            }

            public bool IsReadOnly
            {
                get { throw new Exception("The method or operation is not implemented."); }
            }

            public bool Remove(ModelItem item)
            {
                return _list.Remove(item);
            }

            public void Add(ModelItem item)
            {
                _list.Add(item);
            }

            #endregion

            #region IEnumerable<ModelItem> Members

            IEnumerator<ModelItem> IEnumerable<ModelItem>.GetEnumerator()
            {
                return _list.GetEnumerator();
            }

            #endregion

            #region GenericComparer Members

            public enum SortOrderEnum
            {
                Ascending,
                Descending
            }

            public enum SortParamEnum
            {
                Id,
                Name,
                CreatedDate,
                UpdatedDate,
            }

            public class GenericComparer : IComparer<ModelItem>
            {
                private String _Property = null;
                private SortOrderEnum _SortOrder = SortOrderEnum.Ascending;

                public String SortProperty
                {
                    get { return _Property; }
                    set { _Property = value; }
                }

                public SortOrderEnum SortOrder
                {
                    get { return _SortOrder; }
                    set { _SortOrder = value; }
                }

                public int Compare(ModelItem x, ModelItem y)
                {
                    try
                    {
                        ModelItem ing1 = (ModelItem)x;
                        ModelItem ing2 = (ModelItem)y;

                        if (this.SortOrder.Equals(SortOrderEnum.Ascending))
                            return ing1.CompareTo(ing2, this.SortProperty);
                        else
                            return ing2.CompareTo(ing1, this.SortProperty);
                    }
                    catch (Exception ex)
                    {
                        return 0;
                    }
                }
            }


            public void Sort(SortParamEnum SortBy, SortOrderEnum SortOrder)
            {
                GenericComparer comparer = new GenericComparer();
                comparer.SortProperty = SortBy.ToString();
                comparer.SortOrder = SortOrder;
                _list.Sort((IComparer<ModelItem>)comparer);
            }

            #endregion GenericComparer Members
        }
        public class ModelItemDefinition : DomainObject, IDomainObject, IDisposable
        {
            private bool _disposed = false;
            private ModelItemModel _details = null;

            protected ModelItemModel Details
            {
                get { return _details; }
                set { _details = value; }
            }

            public ModelItemDefinition()
                : base(DomainObjectState.New)
            {
                _details = new ModelItemModel(this);
            }

            public ModelItemDefinition(Int32 Id)
                : base(DomainObjectState.Clean)
            {
                DataFields["Id"] = Id;
                _details = new ModelItemModel(this);
            }

            ~ModelItemDefinition() { Dispose(false); }

            public void Dispose() { Dispose(true); GC.SuppressFinalize(this); }

            protected virtual void Dispose(bool disposing)
            {
                if (!_disposed)
                {
                    if (disposing)
                    {
                        _details = null;
                        DataFields = null;
                        //base.Dispose(true);
                    }
                }
                _disposed = true;
            }

            #region IDomainObject Members

            void IDomainObject.CreateEntity()
            {
                LiquidCore.Data.ModelItemData.Create(Details);
            }

            void IDomainObject.LoadEntity(ModelObject Details)
            {
                LiquidCore.Data.ModelItemData.Load(Details, DataFields);
            }

            void IDomainObject.UpdateEntity()
            {
                LiquidCore.Data.ModelItemData.Update(Details);
            }

            void IDomainObject.DeleteEntity()
            {
                LiquidCore.Data.ModelItemData.Delete(Details);
            }

            #endregion

            #region GenericComparer Members
            public int CompareTo(object obj, string Property)
            {
                try
                {
                    Type type = this.GetType();
                    PropertyInfo propertie = type.GetProperty(Property);


                    Type type2 = obj.GetType();
                    PropertyInfo propertie2 = type2.GetProperty(Property);

                    object[] index = null;

                    object Obj1 = propertie.GetValue(this, index);
                    object Obj2 = propertie2.GetValue(obj, index);

                    IComparable Ic1 = (IComparable)Obj1;
                    IComparable Ic2 = (IComparable)Obj2;

                    int ret = Ic1.CompareTo(Ic2);

                    return ret;

                }
                catch (Exception ex)
                {
                    return 0;
                }
            }
            #endregion GenericComparer Members

        }
        public class ModDefsDefinition : DomainObject, IDomainObject, IDisposable, ICollection<ModDef>
        {
            private bool _disposed = false;
            protected List<ModDef> _list = new List<ModDef>();

            private ModDefsModel _details = null;

            public ModDef this[Int32 index]
            {
                get
                {
                    return _list[index];
                }
            }

            public ModDefsDefinition()
                : base(DomainObjectState.Clean)
            {
                _details = new ModDefsModel(this);
            }

            public ModDefsDefinition(Int32 SitId, Int32 ParentId)
                : base(DomainObjectState.Clean)
            {
                this.DataFields["SitId"] = SitId;
                this.DataFields["ParentId"] = ParentId;
                _details = new ModDefsModel(this);
            }

            ~ModDefsDefinition() { Dispose(false); }

            protected virtual void Dispose(bool disposing)
            {
                if (!_disposed)
                {
                    if (disposing)
                    {
                        _details = null;
                        DataFields = null;
                        foreach (ModDef l in _list)
                            l.Dispose();
                    }
                }
                _disposed = true;
            }

            public IEnumerator GetEnumerator()
            {
                return _list.GetEnumerator();
            }

            public new void Save()
            {
                foreach (ModDef l in _list)
                    if (l.ObjectState == DomainObjectState.Dirty)
                        l.Save();
            }

            #region IDomainObject Members

            void IDomainObject.CreateEntity()
            {
                // Not in use...
            }

            void IDomainObject.LoadEntity(ModelObject details)
            {
                LiquidCore.Data.ModDefData.LoadAll(ref _list, this.DataFields);
            }

            void IDomainObject.UpdateEntity()
            {
                foreach (ModDef l in _list)
                    if (l.ObjectState == DomainObjectState.Dirty)
                        l.Save();
            }

            void IDomainObject.DeleteEntity()
            {
                foreach (ModDef l in _list)
                    l.Delete();
            }

            #endregion

            #region IDisposable Members

            void IDisposable.Dispose()
            {
                Dispose(true);
                GC.SuppressFinalize(this);
            }

            #endregion

            #region ICollection<ModDef> Members

            public void Clear()
            {
                _list.Clear();
            }

            public bool Contains(ModDef item)
            {
                return _list.Contains(item);
            }

            public void CopyTo(ModDef[] array, int arrayIndex)
            {
                _list.CopyTo(array, arrayIndex);
            }

            public int Count
            {
                get { return _list.Count; }
            }

            public bool IsReadOnly
            {
                get { throw new Exception("The method or operation is not implemented."); }
            }

            public bool Remove(ModDef item)
            {
                return _list.Remove(item);
            }

            public void Add(ModDef item)
            {
                _list.Add(item);
            }

            #endregion

            #region IEnumerable<ModelItem> Members

            IEnumerator<ModDef> IEnumerable<ModDef>.GetEnumerator()
            {
                return _list.GetEnumerator();
            }

            #endregion

            #region GenericComparer Members

            public enum SortOrderEnum
            {
                Ascending,
                Descending
            }

            public enum SortParamEnum
            {
                Id,
                Name,
                CreatedDate,
                UpdatedDate,
            }

            public class GenericComparer : IComparer<ModDef>
            {
                private String _Property = null;
                private SortOrderEnum _SortOrder = SortOrderEnum.Ascending;

                public String SortProperty
                {
                    get { return _Property; }
                    set { _Property = value; }
                }

                public SortOrderEnum SortOrder
                {
                    get { return _SortOrder; }
                    set { _SortOrder = value; }
                }

                public int Compare(ModDef x, ModDef y)
                {
                    try
                    {
                        ModDef ing1 = (ModDef)x;
                        ModDef ing2 = (ModDef)y;

                        if (this.SortOrder.Equals(SortOrderEnum.Ascending))
                            return ing1.CompareTo(ing2, this.SortProperty);
                        else
                            return ing2.CompareTo(ing1, this.SortProperty);
                    }
                    catch (Exception ex)
                    {
                        return 0;
                    }
                }
            }


            public void Sort(SortParamEnum SortBy, SortOrderEnum SortOrder)
            {
                GenericComparer comparer = new GenericComparer();
                comparer.SortProperty = SortBy.ToString();
                comparer.SortOrder = SortOrder;
                _list.Sort((IComparer<ModDef>)comparer);
            }

            #endregion GenericComparer Members
        }
        public class ModDefDefinition : DomainObject, IDomainObject, IDisposable
        {
            private bool _disposed = false;
            private ModDefModel _details = null;

            protected ModDefModel Details
            {
                get { return _details; }
                set { _details = value; }
            }

            public ModDefDefinition()
                : base(DomainObjectState.New)
            {
                _details = new ModDefModel(this);
            }

            public ModDefDefinition(Int32 Id)
                : base(DomainObjectState.Clean)
            {
                DataFields["Id"] = Id;
                _details = new ModDefModel(this);
            }

            ~ModDefDefinition() { Dispose(false); }

            public void Dispose() { Dispose(true); GC.SuppressFinalize(this); }

            protected virtual void Dispose(bool disposing)
            {
                if (!_disposed)
                {
                    if (disposing)
                    {
                        _details = null;
                        DataFields = null;
                        //base.Dispose(true);
                    }
                }
                _disposed = true;
            }

            #region IDomainObject Members

            void IDomainObject.CreateEntity()
            {
                LiquidCore.Data.ModDefData.Create(Details);
            }

            void IDomainObject.LoadEntity(ModelObject Details)
            {
                LiquidCore.Data.ModDefData.Load(Details, DataFields);
            }

            void IDomainObject.UpdateEntity()
            {
                LiquidCore.Data.ModDefData.Update(Details);
            }

            void IDomainObject.DeleteEntity()
            {
                LiquidCore.Data.ModDefData.Delete(Details);
            }

            #endregion

            #region GenericComparer Members
            public int CompareTo(object obj, string Property)
            {
                try
                {
                    Type type = this.GetType();
                    PropertyInfo propertie = type.GetProperty(Property);


                    Type type2 = obj.GetType();
                    PropertyInfo propertie2 = type2.GetProperty(Property);

                    object[] index = null;

                    object Obj1 = propertie.GetValue(this, index);
                    object Obj2 = propertie2.GetValue(obj, index);

                    IComparable Ic1 = (IComparable)Obj1;
                    IComparable Ic2 = (IComparable)Obj2;

                    int ret = Ic1.CompareTo(Ic2);

                    return ret;

                }
                catch (Exception ex)
                {
                    return 0;
                }
            }
            #endregion GenericComparer Members

        }
       
    }
}

// ModelerLayer
namespace LiquidCore
{
    namespace LiquidCore.Modeler
    {
        using CoreLib;
        public class SitesModel : ModelObject
        {
            private Wrap<List<Site>> _sites = new Wrap<List<Site>>();

            public SitesModel(DomainObject container)
                : base(container)
            {
                _sites.ValueUpdated += new Wrap<List<Site>>.ValueUpdateEventHandler(NotifyContainer);
            }
        }
        public class SiteModel : ModelObject
        {
            private Wrap<int> _id = new Wrap<int>();
            private Wrap<int> _sta_id = new Wrap<int>();
            private Wrap<int> _lng_id = new Wrap<int>();
            private Wrap<int> _parentid = new Wrap<int>();
            private Wrap<int> _order = new Wrap<int>();
            private Wrap<string> _title = new Wrap<string>();
            private Wrap<string> _alias = new Wrap<string>();
            private Wrap<string> _description = new Wrap<string>();
            private Wrap<DateTime> _createddate = new Wrap<DateTime>();
            private Wrap<string> _createdby = new Wrap<string>();
            private Wrap<DateTime> _updateddate = new Wrap<DateTime>();
            private Wrap<string> _updatedby = new Wrap<string>();
            private Wrap<bool> _hidden = new Wrap<bool>();
            private Wrap<bool> _deleted = new Wrap<bool>();

            public int Id
            {
                get { return _id.Value; }
                set { _id.Value = value; }
            }
            public int Status
            {
                get { return _sta_id.Value; }
                set { _sta_id.Value = value; }
            }
            public int Language
            {
                get { return _lng_id.Value; }
                set { _lng_id.Value = value; }
            }
            public int ParentId
            {
                get { return _parentid.Value; }
                set { _parentid.Value = value; }
            }
            public int Order
            {
                get { return _order.Value; }
                set { _order.Value = value; }
            }
            public string Title
            {
                get { return _title.Value; }
                set { _title.Value = value; }
            }
            public string Alias
            {
                get { return _alias.Value; }
                set { _alias.Value = value; }
            }
            public string Description
            {
                get { return _description.Value; }
                set { _description.Value = value; }
            }
            public DateTime CreatedDate
            {
                get { return _createddate.Value; }
                set { _createddate.Value = value; }
            }
            public string CreatedBy
            {
                get { return _createdby.Value; }
                set { _createdby.Value = value; }
            }
            public DateTime UpdatedDate
            {
                get { return _updateddate.Value; }
                set { _updateddate.Value = value; }
            }
            public string UpdatedBy
            {
                get { return _updatedby.Value; }
                set { _updatedby.Value = value; }
            }
            public bool Hidden
            {
                get { return _hidden.Value; }
                set { _hidden.Value = value; }
            }
            public bool Deleted
            {
                get { return _deleted.Value; }
                set { _deleted.Value = value; }
            }

            public SiteModel(DomainObject container)
                : base(container)
            {
                _id.ValueUpdated += new Wrap<int>.ValueUpdateEventHandler(NotifyContainer);
                _sta_id.ValueUpdated += new Wrap<int>.ValueUpdateEventHandler(NotifyContainer);
                _lng_id.ValueUpdated += new Wrap<int>.ValueUpdateEventHandler(NotifyContainer);
                _parentid.ValueUpdated += new Wrap<int>.ValueUpdateEventHandler(NotifyContainer);
                _order.ValueUpdated += new Wrap<int>.ValueUpdateEventHandler(NotifyContainer);
                _title.ValueUpdated += new Wrap<string>.ValueUpdateEventHandler(NotifyContainer);
                _alias.ValueUpdated += new Wrap<string>.ValueUpdateEventHandler(NotifyContainer);
                _description.ValueUpdated += new Wrap<string>.ValueUpdateEventHandler(NotifyContainer);
                _createddate.ValueUpdated += new Wrap<DateTime>.ValueUpdateEventHandler(NotifyContainer);
                _createdby.ValueUpdated += new Wrap<string>.ValueUpdateEventHandler(NotifyContainer);
                _updateddate.ValueUpdated += new Wrap<DateTime>.ValueUpdateEventHandler(NotifyContainer);
                _updatedby.ValueUpdated += new Wrap<string>.ValueUpdateEventHandler(NotifyContainer);
                _hidden.ValueUpdated += new Wrap<bool>.ValueUpdateEventHandler(NotifyContainer);
                _deleted.ValueUpdated += new Wrap<bool>.ValueUpdateEventHandler(NotifyContainer);
            }
        }
        public class SettingsModel : ModelObject
        {
            private Wrap<List<Setting>> _settings = new Wrap<List<Setting>>();

            public SettingsModel(DomainObject container)
                : base(container)
            {
                _settings.ValueUpdated += new Wrap<List<Setting>>.ValueUpdateEventHandler(NotifyContainer);
            }
        }
        public class SettingModel : ModelObject
        {
            private Wrap<int> _id = new Wrap<int>();
            private Wrap<int> _sta_id = new Wrap<int>();
            private Wrap<int> _lng_id = new Wrap<int>();
            private Wrap<int> _sit_id = new Wrap<int>();
            private Wrap<int> _pag_id = new Wrap<int>();
            private Wrap<int> _mod_id = new Wrap<int>();
            private Wrap<int> _parentid = new Wrap<int>();
            private Wrap<int> _order = new Wrap<int>();
            private Wrap<string> _title = new Wrap<string>();
            private Wrap<string> _alias = new Wrap<string>();
            private Wrap<string> _description = new Wrap<string>();
            private Wrap<string> _value = new Wrap<string>();
            private Wrap<DateTime> _createddate = new Wrap<DateTime>();
            private Wrap<string> _createdby = new Wrap<string>();
            private Wrap<DateTime> _updateddate = new Wrap<DateTime>();
            private Wrap<string> _updatedby = new Wrap<string>();
            private Wrap<bool> _hidden = new Wrap<bool>();
            private Wrap<bool> _deleted = new Wrap<bool>();

            public int Id
            {
                get { return _id.Value; }
                set { _id.Value = value; }
            }
            public int Status
            {
                get { return _sta_id.Value; }
                set { _sta_id.Value = value; }
            }
            public int Language
            {
                get { return _lng_id.Value; }
                set { _lng_id.Value = value; }
            }
            public int SitId
            {
                get { return _sit_id.Value; }
                set { _sit_id.Value = value; }
            }
            public int PagId
            {
                get { return _pag_id.Value; }
                set { _pag_id.Value = value; }
            }
            public int ModId
            {
                get { return _mod_id.Value; }
                set { _mod_id.Value = value; }
            }
            public int ParentId
            {
                get { return _parentid.Value; }
                set { _parentid.Value = value; }
            }
            public int Order
            {
                get { return _order.Value; }
                set { _order.Value = value; }
            }
            public string Title
            {
                get { return _title.Value; }
                set { _title.Value = value; }
            }
            public string Alias
            {
                get { return _alias.Value; }
                set { _alias.Value = value; }
            }
            public string Description
            {
                get { return _description.Value; }
                set { _description.Value = value; }
            }
            public string Value
            {
                get { return _value.Value; }
                set { _value.Value = value; }
            }
            public DateTime CreatedDate
            {
                get { return _createddate.Value; }
                set { _createddate.Value = value; }
            }
            public string CreatedBy
            {
                get { return _createdby.Value; }
                set { _createdby.Value = value; }
            }
            public DateTime UpdatedDate
            {
                get { return _updateddate.Value; }
                set { _updateddate.Value = value; }
            }
            public string UpdatedBy
            {
                get { return _updatedby.Value; }
                set { _updatedby.Value = value; }
            }
            public bool Hidden
            {
                get { return _hidden.Value; }
                set { _hidden.Value = value; }
            }
            public bool Deleted
            {
                get { return _deleted.Value; }
                set { _deleted.Value = value; }
            }

            public SettingModel(DomainObject container)
                : base(container)
            {
                _id.ValueUpdated += new Wrap<int>.ValueUpdateEventHandler(NotifyContainer);
                _sta_id.ValueUpdated += new Wrap<int>.ValueUpdateEventHandler(NotifyContainer);
                _lng_id.ValueUpdated += new Wrap<int>.ValueUpdateEventHandler(NotifyContainer);
                _sit_id.ValueUpdated += new Wrap<int>.ValueUpdateEventHandler(NotifyContainer);
                _pag_id.ValueUpdated += new Wrap<int>.ValueUpdateEventHandler(NotifyContainer);
                _mod_id.ValueUpdated += new Wrap<int>.ValueUpdateEventHandler(NotifyContainer);
                _parentid.ValueUpdated += new Wrap<int>.ValueUpdateEventHandler(NotifyContainer);
                _order.ValueUpdated += new Wrap<int>.ValueUpdateEventHandler(NotifyContainer);
                _title.ValueUpdated += new Wrap<string>.ValueUpdateEventHandler(NotifyContainer);
                _alias.ValueUpdated += new Wrap<string>.ValueUpdateEventHandler(NotifyContainer);
                _description.ValueUpdated += new Wrap<string>.ValueUpdateEventHandler(NotifyContainer);
                _value.ValueUpdated += new Wrap<string>.ValueUpdateEventHandler(NotifyContainer);
                _createddate.ValueUpdated += new Wrap<DateTime>.ValueUpdateEventHandler(NotifyContainer);
                _createdby.ValueUpdated += new Wrap<string>.ValueUpdateEventHandler(NotifyContainer);
                _updateddate.ValueUpdated += new Wrap<DateTime>.ValueUpdateEventHandler(NotifyContainer);
                _updatedby.ValueUpdated += new Wrap<string>.ValueUpdateEventHandler(NotifyContainer);
                _hidden.ValueUpdated += new Wrap<bool>.ValueUpdateEventHandler(NotifyContainer);
                _deleted.ValueUpdated += new Wrap<bool>.ValueUpdateEventHandler(NotifyContainer);
            }
        }
        public class PagesModel : ModelObject
        {
            private Wrap<List<Page>> _list = new Wrap<List<Page>>();

            public PagesModel(DomainObject container)
                : base(container)
            {
                _list.ValueUpdated += new Wrap<List<Page>>.ValueUpdateEventHandler(NotifyContainer);
            }
        }
        public class PageModel : ModelObject
        {
            private Wrap<int> _id = new Wrap<int>();
            private Wrap<int> _sit_id = new Wrap<int>();
            private Wrap<int> _sta_id = new Wrap<int>();
            private Wrap<int> _lng_id = new Wrap<int>();
            private Wrap<int> _modelid = new Wrap<int>();
            private Wrap<int> _parentid = new Wrap<int>();
            private Wrap<int> _order = new Wrap<int>();
            private Wrap<string> _title = new Wrap<string>();
            private Wrap<string> _alias = new Wrap<string>();
            private Wrap<string> _description = new Wrap<string>();
            private Wrap<string> _template = new Wrap<string>();
            private Wrap<DateTime> _createddate = new Wrap<DateTime>();
            private Wrap<string> _createdby = new Wrap<string>();
            private Wrap<DateTime> _updateddate = new Wrap<DateTime>();
            private Wrap<string> _updatedby = new Wrap<string>();
            private Wrap<bool> _hidden = new Wrap<bool>();
            private Wrap<bool> _deleted = new Wrap<bool>();

            public int Id
            {
                get { return _id.Value; }
                set { _id.Value = value; }
            }
            public int SitId
            {
                get { return _sit_id.Value; }
                set { _sit_id.Value = value; }
            }
            public int Status
            {
                get { return _sta_id.Value; }
                set { _sta_id.Value = value; }
            }
            public int Language
            {
                get { return _lng_id.Value; }
                set { _lng_id.Value = value; }
            }
            public int ModelId
            {
                get { return _modelid.Value; }
                set { _modelid.Value = value; }
            }
            public int ParentId
            {
                get { return _parentid.Value; }
                set { _parentid.Value = value; }
            }
            public int Order
            {
                get { return _order.Value; }
                set { _order.Value = value; }
            }
            public string Title
            {
                get { return _title.Value; }
                set { _title.Value = value; }
            }
            public string Alias
            {
                get { return _alias.Value; }
                set { _alias.Value = value; }
            }
            public string Description
            {
                get { return _description.Value; }
                set { _description.Value = value; }
            }
            public string Template
            {
                get { return _template.Value; }
                set { _template.Value = value; }
            }
            public DateTime CreatedDate
            {
                get { return _createddate.Value; }
                set { _createddate.Value = value; }
            }
            public string CreatedBy
            {
                get { return _createdby.Value; }
                set { _createdby.Value = value; }
            }
            public DateTime UpdatedDate
            {
                get { return _updateddate.Value; }
                set { _updateddate.Value = value; }
            }
            public string UpdatedBy
            {
                get { return _updatedby.Value; }
                set { _updatedby.Value = value; }
            }
            public bool Hidden
            {
                get { return _hidden.Value; }
                set { _hidden.Value = value; }
            }
            public bool Deleted
            {
                get { return _deleted.Value; }
                set { _deleted.Value = value; }
            }

            public PageModel(DomainObject container)
                : base(container)
            {
                _id.ValueUpdated += new Wrap<int>.ValueUpdateEventHandler(NotifyContainer);
                _sit_id.ValueUpdated += new Wrap<int>.ValueUpdateEventHandler(NotifyContainer);
                _sta_id.ValueUpdated += new Wrap<int>.ValueUpdateEventHandler(NotifyContainer);
                _lng_id.ValueUpdated += new Wrap<int>.ValueUpdateEventHandler(NotifyContainer);
                _modelid.ValueUpdated += new Wrap<int>.ValueUpdateEventHandler(NotifyContainer);
                _parentid.ValueUpdated += new Wrap<int>.ValueUpdateEventHandler(NotifyContainer);
                _order.ValueUpdated += new Wrap<int>.ValueUpdateEventHandler(NotifyContainer);
                _title.ValueUpdated += new Wrap<string>.ValueUpdateEventHandler(NotifyContainer);
                _alias.ValueUpdated += new Wrap<string>.ValueUpdateEventHandler(NotifyContainer);
                _description.ValueUpdated += new Wrap<string>.ValueUpdateEventHandler(NotifyContainer);
                _template.ValueUpdated += new Wrap<string>.ValueUpdateEventHandler(NotifyContainer);
                _createddate.ValueUpdated += new Wrap<DateTime>.ValueUpdateEventHandler(NotifyContainer);
                _createdby.ValueUpdated += new Wrap<string>.ValueUpdateEventHandler(NotifyContainer);
                _updateddate.ValueUpdated += new Wrap<DateTime>.ValueUpdateEventHandler(NotifyContainer);
                _updatedby.ValueUpdated += new Wrap<string>.ValueUpdateEventHandler(NotifyContainer);
                _hidden.ValueUpdated += new Wrap<bool>.ValueUpdateEventHandler(NotifyContainer);
                _deleted.ValueUpdated += new Wrap<bool>.ValueUpdateEventHandler(NotifyContainer);
            }
        }
        public class ModulesModel : ModelObject
        {
            private Wrap<List<Module>> _list = new Wrap<List<Module>>();

            public ModulesModel(DomainObject container)
                : base(container)
            {
                _list.ValueUpdated += new Wrap<List<Module>>.ValueUpdateEventHandler(NotifyContainer);
            }
        }
        public class ModuleModel : ModelObject
        {
            private Wrap<int> _id = new Wrap<int>();
            private Wrap<int> _sit_id = new Wrap<int>();
            private Wrap<int> _pag_id = new Wrap<int>();
            private Wrap<int> _mde_id = new Wrap<int>();
            private Wrap<int> _sta_id = new Wrap<int>();
            private Wrap<int> _lng_id = new Wrap<int>();
            private Wrap<int> _parentid = new Wrap<int>();
            private Wrap<int> _order = new Wrap<int>();
            private Wrap<string> _title = new Wrap<string>();
            private Wrap<string> _alias = new Wrap<string>();
            private Wrap<string> _description = new Wrap<string>();
            private Wrap<string> _src = new Wrap<string>();
            private Wrap<string> _contentpane = new Wrap<string>();
            private Wrap<DateTime> _createddate = new Wrap<DateTime>();
            private Wrap<string> _createdby = new Wrap<string>();
            private Wrap<DateTime> _updateddate = new Wrap<DateTime>();
            private Wrap<string> _updatedby = new Wrap<string>();
            private Wrap<bool> _hidden = new Wrap<bool>();
            private Wrap<bool> _deleted = new Wrap<bool>();

            public int Id
            {
                get { return _id.Value; }
                set { _id.Value = value; }
            }
            public int SitId
            {
                get { return _sit_id.Value; }
                set { _sit_id.Value = value; }
            }
            public int PagId
            {
                get { return _pag_id.Value; }
                set { _pag_id.Value = value; }
            }
            public int MdeId
            {
                get { return _mde_id.Value; }
                set { _mde_id.Value = value; }
            }
            public int Status
            {
                get { return _sta_id.Value; }
                set { _sta_id.Value = value; }
            }
            public int Language
            {
                get { return _lng_id.Value; }
                set { _lng_id.Value = value; }
            }
            public int ParentId
            {
                get { return _parentid.Value; }
                set { _parentid.Value = value; }
            }
            public int Order
            {
                get { return _order.Value; }
                set { _order.Value = value; }
            }
            public string Title
            {
                get { return _title.Value; }
                set { _title.Value = value; }
            }
            public string Alias
            {
                get { return _alias.Value; }
                set { _alias.Value = value; }
            }
            public string Description
            {
                get { return _description.Value; }
                set { _description.Value = value; }
            }
            public string Src
            {
                get { return _src.Value; }
                set { _src.Value = value; }
            }
            public string ContentPane
            {
                get { return _contentpane.Value; }
                set { _contentpane.Value = value; }
            }
            public DateTime CreatedDate
            {
                get { return _createddate.Value; }
                set { _createddate.Value = value; }
            }
            public string CreatedBy
            {
                get { return _createdby.Value; }
                set { _createdby.Value = value; }
            }
            public DateTime UpdatedDate
            {
                get { return _updateddate.Value; }
                set { _updateddate.Value = value; }
            }
            public string UpdatedBy
            {
                get { return _updatedby.Value; }
                set { _updatedby.Value = value; }
            }
            public bool Hidden
            {
                get { return _hidden.Value; }
                set { _hidden.Value = value; }
            }
            public bool Deleted
            {
                get { return _deleted.Value; }
                set { _deleted.Value = value; }
            }

            public ModuleModel(DomainObject container)
                : base(container)
            {
                _id.ValueUpdated += new Wrap<int>.ValueUpdateEventHandler(NotifyContainer);
                _sit_id.ValueUpdated += new Wrap<int>.ValueUpdateEventHandler(NotifyContainer);
                _pag_id.ValueUpdated += new Wrap<int>.ValueUpdateEventHandler(NotifyContainer);
                _mde_id.ValueUpdated += new Wrap<int>.ValueUpdateEventHandler(NotifyContainer);
                _sta_id.ValueUpdated += new Wrap<int>.ValueUpdateEventHandler(NotifyContainer);
                _lng_id.ValueUpdated += new Wrap<int>.ValueUpdateEventHandler(NotifyContainer);
                _parentid.ValueUpdated += new Wrap<int>.ValueUpdateEventHandler(NotifyContainer);
                _order.ValueUpdated += new Wrap<int>.ValueUpdateEventHandler(NotifyContainer);
                _title.ValueUpdated += new Wrap<string>.ValueUpdateEventHandler(NotifyContainer);
                _alias.ValueUpdated += new Wrap<string>.ValueUpdateEventHandler(NotifyContainer);
                _description.ValueUpdated += new Wrap<string>.ValueUpdateEventHandler(NotifyContainer);
                _src.ValueUpdated += new Wrap<string>.ValueUpdateEventHandler(NotifyContainer);
                _contentpane.ValueUpdated += new Wrap<string>.ValueUpdateEventHandler(NotifyContainer);
                _createddate.ValueUpdated += new Wrap<DateTime>.ValueUpdateEventHandler(NotifyContainer);
                _createdby.ValueUpdated += new Wrap<string>.ValueUpdateEventHandler(NotifyContainer);
                _updateddate.ValueUpdated += new Wrap<DateTime>.ValueUpdateEventHandler(NotifyContainer);
                _updatedby.ValueUpdated += new Wrap<string>.ValueUpdateEventHandler(NotifyContainer);
                _hidden.ValueUpdated += new Wrap<bool>.ValueUpdateEventHandler(NotifyContainer);
                _deleted.ValueUpdated += new Wrap<bool>.ValueUpdateEventHandler(NotifyContainer);
            }
        }
        public class ObjectsModel : ModelObject
        {
            private Wrap<List<Object>> _list = new Wrap<List<Object>>();

            public ObjectsModel(DomainObject container)
                : base(container)
            {
                _list.ValueUpdated += new Wrap<List<Object>>.ValueUpdateEventHandler(NotifyContainer);
            }
        }
        public class ObjectModel : ModelObject
        {
            private Wrap<int> _id = new Wrap<int>();
            private Wrap<int> _sit_id = new Wrap<int>();
            private Wrap<int> _pag_id = new Wrap<int>();
            private Wrap<int> _mod_id = new Wrap<int>();
            private Wrap<int> _sta_id = new Wrap<int>();
            private Wrap<int> _lng_id = new Wrap<int>();
            private Wrap<int> _parentid = new Wrap<int>();
            private Wrap<int> _order = new Wrap<int>();
            private Wrap<int> _type = new Wrap<int>();
            private Wrap<string> _title = new Wrap<string>();
            private Wrap<string> _alias = new Wrap<string>();
            private Wrap<string> _description = new Wrap<string>();
            private Wrap<string> _value1 = new Wrap<string>();
            private Wrap<string> _value2 = new Wrap<string>();
            private Wrap<string> _value3 = new Wrap<string>();
            private Wrap<string> _value4 = new Wrap<string>();
            private Wrap<string> _value5 = new Wrap<string>();
            private Wrap<string> _value6 = new Wrap<string>();
            private Wrap<string> _value7 = new Wrap<string>();
            private Wrap<string> _value8 = new Wrap<string>();
            private Wrap<string> _value9 = new Wrap<string>();
            private Wrap<string> _value10 = new Wrap<string>();
            private Wrap<DateTime> _createddate = new Wrap<DateTime>();
            private Wrap<string> _createdby = new Wrap<string>();
            private Wrap<DateTime> _updateddate = new Wrap<DateTime>();
            private Wrap<string> _updatedby = new Wrap<string>();
            private Wrap<bool> _hidden = new Wrap<bool>();
            private Wrap<bool> _deleted = new Wrap<bool>();

            public int Id
            {
                get { return _id.Value; }
                set { _id.Value = value; }
            }
            public int SitId
            {
                get { return _sit_id.Value; }
                set { _sit_id.Value = value; }
            }
            public int PagId
            {
                get { return _pag_id.Value; }
                set { _pag_id.Value = value; }
            }
            public int ModId
            {
                get { return _mod_id.Value; }
                set { _mod_id.Value = value; }
            }
            public int Status
            {
                get { return _sta_id.Value; }
                set { _sta_id.Value = value; }
            }
            public int Language
            {
                get { return _lng_id.Value; }
                set { _lng_id.Value = value; }
            }
            public int ParentId
            {
                get { return _parentid.Value; }
                set { _parentid.Value = value; }
            }
            public int Order
            {
                get { return _order.Value; }
                set { _order.Value = value; }
            }
            public int Type
            {
                get { return _type.Value; }
                set { _type.Value = value; }
            }
            public string Title
            {
                get { return _title.Value; }
                set { _title.Value = value; }
            }
            public string Alias
            {
                get { return _alias.Value; }
                set { _alias.Value = value; }
            }
            public string Description
            {
                get { return _description.Value; }
                set { _description.Value = value; }
            }
            public string Value1
            {
                get { return _value1.Value; }
                set { _value1.Value = value; }
            }
            public string Value2
            {
                get { return _value2.Value; }
                set { _value2.Value = value; }
            }
            public string Value3
            {
                get { return _value3.Value; }
                set { _value3.Value = value; }
            }
            public string Value4
            {
                get { return _value4.Value; }
                set { _value4.Value = value; }
            }
            public string Value5
            {
                get { return _value5.Value; }
                set { _value5.Value = value; }
            }
            public string Value6
            {
                get { return _value6.Value; }
                set { _value6.Value = value; }
            }
            public string Value7
            {
                get { return _value7.Value; }
                set { _value7.Value = value; }
            }
            public string Value8
            {
                get { return _value8.Value; }
                set { _value8.Value = value; }
            }
            public string Value9
            {
                get { return _value9.Value; }
                set { _value9.Value = value; }
            }
            public string Value10
            {
                get { return _value10.Value; }
                set { _value10.Value = value; }
            }
            public DateTime CreatedDate
            {
                get { return _createddate.Value; }
                set { _createddate.Value = value; }
            }
            public string CreatedBy
            {
                get { return _createdby.Value; }
                set { _createdby.Value = value; }
            }
            public DateTime UpdatedDate
            {
                get { return _updateddate.Value; }
                set { _updateddate.Value = value; }
            }
            public string UpdatedBy
            {
                get { return _updatedby.Value; }
                set { _updatedby.Value = value; }
            }
            public bool Hidden
            {
                get { return _hidden.Value; }
                set { _hidden.Value = value; }
            }
            public bool Deleted
            {
                get { return _deleted.Value; }
                set { _deleted.Value = value; }
            }

            public ObjectModel(DomainObject container)
                : base(container)
            {
                _id.ValueUpdated += new Wrap<int>.ValueUpdateEventHandler(NotifyContainer);
                _sit_id.ValueUpdated += new Wrap<int>.ValueUpdateEventHandler(NotifyContainer);
                _pag_id.ValueUpdated += new Wrap<int>.ValueUpdateEventHandler(NotifyContainer);
                _mod_id.ValueUpdated += new Wrap<int>.ValueUpdateEventHandler(NotifyContainer);
                _sta_id.ValueUpdated += new Wrap<int>.ValueUpdateEventHandler(NotifyContainer);
                _lng_id.ValueUpdated += new Wrap<int>.ValueUpdateEventHandler(NotifyContainer);
                _parentid.ValueUpdated += new Wrap<int>.ValueUpdateEventHandler(NotifyContainer);
                _order.ValueUpdated += new Wrap<int>.ValueUpdateEventHandler(NotifyContainer);
                _type.ValueUpdated += new Wrap<int>.ValueUpdateEventHandler(NotifyContainer);
                _title.ValueUpdated += new Wrap<string>.ValueUpdateEventHandler(NotifyContainer);
                _alias.ValueUpdated += new Wrap<string>.ValueUpdateEventHandler(NotifyContainer);
                _description.ValueUpdated += new Wrap<string>.ValueUpdateEventHandler(NotifyContainer);
                _value1.ValueUpdated += new Wrap<string>.ValueUpdateEventHandler(NotifyContainer);
                _value2.ValueUpdated += new Wrap<string>.ValueUpdateEventHandler(NotifyContainer);
                _value3.ValueUpdated += new Wrap<string>.ValueUpdateEventHandler(NotifyContainer);
                _value4.ValueUpdated += new Wrap<string>.ValueUpdateEventHandler(NotifyContainer);
                _value5.ValueUpdated += new Wrap<string>.ValueUpdateEventHandler(NotifyContainer);
                _value6.ValueUpdated += new Wrap<string>.ValueUpdateEventHandler(NotifyContainer);
                _value7.ValueUpdated += new Wrap<string>.ValueUpdateEventHandler(NotifyContainer);
                _value8.ValueUpdated += new Wrap<string>.ValueUpdateEventHandler(NotifyContainer);
                _value9.ValueUpdated += new Wrap<string>.ValueUpdateEventHandler(NotifyContainer);
                _value10.ValueUpdated += new Wrap<string>.ValueUpdateEventHandler(NotifyContainer);
                _createddate.ValueUpdated += new Wrap<DateTime>.ValueUpdateEventHandler(NotifyContainer);
                _createdby.ValueUpdated += new Wrap<string>.ValueUpdateEventHandler(NotifyContainer);
                _updateddate.ValueUpdated += new Wrap<DateTime>.ValueUpdateEventHandler(NotifyContainer);
                _updatedby.ValueUpdated += new Wrap<string>.ValueUpdateEventHandler(NotifyContainer);
                _hidden.ValueUpdated += new Wrap<bool>.ValueUpdateEventHandler(NotifyContainer);
                _deleted.ValueUpdated += new Wrap<bool>.ValueUpdateEventHandler(NotifyContainer);
            }
        }
        public class ModelsModel : ModelObject
        {
            private Wrap<List<Model>> _list = new Wrap<List<Model>>();

            public ModelsModel(DomainObject container)
                : base(container)
            {
                _list.ValueUpdated += new Wrap<List<Model>>.ValueUpdateEventHandler(NotifyContainer);
            }
        }
        public class ModelModel : ModelObject
        {
            private Wrap<int> _id = new Wrap<int>();
            private Wrap<int> _sit_id = new Wrap<int>();
            private Wrap<int> _sta_id = new Wrap<int>();
            private Wrap<int> _lng_id = new Wrap<int>();
            private Wrap<int> _parentid = new Wrap<int>();
            private Wrap<int> _order = new Wrap<int>();
            private Wrap<string> _title = new Wrap<string>();
            private Wrap<string> _alias = new Wrap<string>();
            private Wrap<string> _description = new Wrap<string>();
            private Wrap<DateTime> _createddate = new Wrap<DateTime>();
            private Wrap<string> _createdby = new Wrap<string>();
            private Wrap<DateTime> _updateddate = new Wrap<DateTime>();
            private Wrap<string> _updatedby = new Wrap<string>();
            private Wrap<bool> _hidden = new Wrap<bool>();
            private Wrap<bool> _deleted = new Wrap<bool>();

            public int Id
            {
                get { return _id.Value; }
                set { _id.Value = value; }
            }
            public int SitId
            {
                get { return _sit_id.Value; }
                set { _sit_id.Value = value; }
            }
            public int Status
            {
                get { return _sta_id.Value; }
                set { _sta_id.Value = value; }
            }
            public int Language
            {
                get { return _lng_id.Value; }
                set { _lng_id.Value = value; }
            }
            public int ParentId
            {
                get { return _parentid.Value; }
                set { _parentid.Value = value; }
            }
            public int Order
            {
                get { return _order.Value; }
                set { _order.Value = value; }
            }
            public string Title
            {
                get { return _title.Value; }
                set { _title.Value = value; }
            }
            public string Alias
            {
                get { return _alias.Value; }
                set { _alias.Value = value; }
            }
            public string Description
            {
                get { return _description.Value; }
                set { _description.Value = value; }
            }
            public DateTime CreatedDate
            {
                get { return _createddate.Value; }
                set { _createddate.Value = value; }
            }
            public string CreatedBy
            {
                get { return _createdby.Value; }
                set { _createdby.Value = value; }
            }
            public DateTime UpdatedDate
            {
                get { return _updateddate.Value; }
                set { _updateddate.Value = value; }
            }
            public string UpdatedBy
            {
                get { return _updatedby.Value; }
                set { _updatedby.Value = value; }
            }
            public bool Hidden
            {
                get { return _hidden.Value; }
                set { _hidden.Value = value; }
            }
            public bool Deleted
            {
                get { return _deleted.Value; }
                set { _deleted.Value = value; }
            }

            public ModelModel(DomainObject container)
                : base(container)
            {
                _id.ValueUpdated += new Wrap<int>.ValueUpdateEventHandler(NotifyContainer);
                _sit_id.ValueUpdated += new Wrap<int>.ValueUpdateEventHandler(NotifyContainer);
                _sta_id.ValueUpdated += new Wrap<int>.ValueUpdateEventHandler(NotifyContainer);
                _lng_id.ValueUpdated += new Wrap<int>.ValueUpdateEventHandler(NotifyContainer);
                _parentid.ValueUpdated += new Wrap<int>.ValueUpdateEventHandler(NotifyContainer);
                _order.ValueUpdated += new Wrap<int>.ValueUpdateEventHandler(NotifyContainer);
                _title.ValueUpdated += new Wrap<string>.ValueUpdateEventHandler(NotifyContainer);
                _alias.ValueUpdated += new Wrap<string>.ValueUpdateEventHandler(NotifyContainer);
                _description.ValueUpdated += new Wrap<string>.ValueUpdateEventHandler(NotifyContainer);
                _createddate.ValueUpdated += new Wrap<DateTime>.ValueUpdateEventHandler(NotifyContainer);
                _createdby.ValueUpdated += new Wrap<string>.ValueUpdateEventHandler(NotifyContainer);
                _updateddate.ValueUpdated += new Wrap<DateTime>.ValueUpdateEventHandler(NotifyContainer);
                _updatedby.ValueUpdated += new Wrap<string>.ValueUpdateEventHandler(NotifyContainer);
                _hidden.ValueUpdated += new Wrap<bool>.ValueUpdateEventHandler(NotifyContainer);
                _deleted.ValueUpdated += new Wrap<bool>.ValueUpdateEventHandler(NotifyContainer);
            }
        }
        public class ModelItemsModel : ModelObject
        {
            private Wrap<List<ModelItem>> _list = new Wrap<List<ModelItem>>();

            public ModelItemsModel(DomainObject container)
                : base(container)
            {
                _list.ValueUpdated += new Wrap<List<ModelItem>>.ValueUpdateEventHandler(NotifyContainer);
            }
        }
        public class ModelItemModel : ModelObject
        {
            private Wrap<int> _id = new Wrap<int>();
            private Wrap<int> _sit_id = new Wrap<int>();
            private Wrap<int> _mdl_id = new Wrap<int>();
            private Wrap<int> _mde_id = new Wrap<int>();
            private Wrap<int> _sta_id = new Wrap<int>();
            private Wrap<int> _lng_id = new Wrap<int>();
            private Wrap<int> _parentid = new Wrap<int>();
            private Wrap<int> _order = new Wrap<int>();
            private Wrap<string> _contentpane = new Wrap<string>();
            private Wrap<DateTime> _createddate = new Wrap<DateTime>();
            private Wrap<string> _createdby = new Wrap<string>();
            private Wrap<DateTime> _updateddate = new Wrap<DateTime>();
            private Wrap<string> _updatedby = new Wrap<string>();
            private Wrap<bool> _hidden = new Wrap<bool>();
            private Wrap<bool> _deleted = new Wrap<bool>();

            public int Id
            {
                get { return _id.Value; }
                set { _id.Value = value; }
            }
            public int SitId
            {
                get { return _sit_id.Value; }
                set { _sit_id.Value = value; }
            }
            public int MdlId
            {
                get { return _mdl_id.Value; }
                set { _mdl_id.Value = value; }
            }
            public int MdeId
            {
                get { return _mde_id.Value; }
                set { _mde_id.Value = value; }
            }
            public int Status
            {
                get { return _sta_id.Value; }
                set { _sta_id.Value = value; }
            }
            public int Language
            {
                get { return _lng_id.Value; }
                set { _lng_id.Value = value; }
            }
            public int ParentId
            {
                get { return _parentid.Value; }
                set { _parentid.Value = value; }
            }
            public int Order
            {
                get { return _order.Value; }
                set { _order.Value = value; }
            }
            public string ContentPane
            {
                get { return _contentpane.Value; }
                set { _contentpane.Value = value; }
            }
            public DateTime CreatedDate
            {
                get { return _createddate.Value; }
                set { _createddate.Value = value; }
            }
            public string CreatedBy
            {
                get { return _createdby.Value; }
                set { _createdby.Value = value; }
            }
            public DateTime UpdatedDate
            {
                get { return _updateddate.Value; }
                set { _updateddate.Value = value; }
            }
            public string UpdatedBy
            {
                get { return _updatedby.Value; }
                set { _updatedby.Value = value; }
            }
            public bool Hidden
            {
                get { return _hidden.Value; }
                set { _hidden.Value = value; }
            }
            public bool Deleted
            {
                get { return _deleted.Value; }
                set { _deleted.Value = value; }
            }

            public ModelItemModel(DomainObject container)
                : base(container)
            {
                _id.ValueUpdated += new Wrap<int>.ValueUpdateEventHandler(NotifyContainer);
                _sit_id.ValueUpdated += new Wrap<int>.ValueUpdateEventHandler(NotifyContainer);
                _mdl_id.ValueUpdated += new Wrap<int>.ValueUpdateEventHandler(NotifyContainer);
                _mde_id.ValueUpdated += new Wrap<int>.ValueUpdateEventHandler(NotifyContainer);
                _sta_id.ValueUpdated += new Wrap<int>.ValueUpdateEventHandler(NotifyContainer);
                _lng_id.ValueUpdated += new Wrap<int>.ValueUpdateEventHandler(NotifyContainer);
                _parentid.ValueUpdated += new Wrap<int>.ValueUpdateEventHandler(NotifyContainer);
                _order.ValueUpdated += new Wrap<int>.ValueUpdateEventHandler(NotifyContainer);
                _contentpane.ValueUpdated += new Wrap<string>.ValueUpdateEventHandler(NotifyContainer);
                _createddate.ValueUpdated += new Wrap<DateTime>.ValueUpdateEventHandler(NotifyContainer);
                _createdby.ValueUpdated += new Wrap<string>.ValueUpdateEventHandler(NotifyContainer);
                _updateddate.ValueUpdated += new Wrap<DateTime>.ValueUpdateEventHandler(NotifyContainer);
                _updatedby.ValueUpdated += new Wrap<string>.ValueUpdateEventHandler(NotifyContainer);
                _hidden.ValueUpdated += new Wrap<bool>.ValueUpdateEventHandler(NotifyContainer);
                _deleted.ValueUpdated += new Wrap<bool>.ValueUpdateEventHandler(NotifyContainer);
            }
        }
        public class ModDefsModel : ModelObject
        {
            private Wrap<List<ModDef>> _list = new Wrap<List<ModDef>>();

            public ModDefsModel(DomainObject container)
                : base(container)
            {
                _list.ValueUpdated += new Wrap<List<ModDef>>.ValueUpdateEventHandler(NotifyContainer);
            }
        }
        public class ModDefModel : ModelObject
        {
            private Wrap<int> _id = new Wrap<int>();
            private Wrap<int> _sit_id = new Wrap<int>();
            private Wrap<int> _sta_id = new Wrap<int>();
            private Wrap<int> _lng_id = new Wrap<int>();
            private Wrap<int> _parentid = new Wrap<int>();
            private Wrap<int> _order = new Wrap<int>();
            private Wrap<string> _title = new Wrap<string>();
            private Wrap<string> _alias = new Wrap<string>();
            private Wrap<string> _description = new Wrap<string>();
            private Wrap<string> _src = new Wrap<string>();
            private Wrap<DateTime> _createddate = new Wrap<DateTime>();
            private Wrap<string> _createdby = new Wrap<string>();
            private Wrap<DateTime> _updateddate = new Wrap<DateTime>();
            private Wrap<string> _updatedby = new Wrap<string>();
            private Wrap<bool> _hidden = new Wrap<bool>();
            private Wrap<bool> _deleted = new Wrap<bool>();

            public int Id
            {
                get { return _id.Value; }
                set { _id.Value = value; }
            }
            public int SitId
            {
                get { return _sit_id.Value; }
                set { _sit_id.Value = value; }
            }
            public int Status
            {
                get { return _sta_id.Value; }
                set { _sta_id.Value = value; }
            }
            public int Language
            {
                get { return _lng_id.Value; }
                set { _lng_id.Value = value; }
            }
            public int ParentId
            {
                get { return _parentid.Value; }
                set { _parentid.Value = value; }
            }
            public int Order
            {
                get { return _order.Value; }
                set { _order.Value = value; }
            }
            public string Title
            {
                get { return _title.Value; }
                set { _title.Value = value; }
            }
            public string Alias
            {
                get { return _alias.Value; }
                set { _alias.Value = value; }
            }
            public string Description
            {
                get { return _description.Value; }
                set { _description.Value = value; }
            }
            public string Src
            {
                get { return _src.Value; }
                set { _src.Value = value; }
            }
            public DateTime CreatedDate
            {
                get { return _createddate.Value; }
                set { _createddate.Value = value; }
            }
            public string CreatedBy
            {
                get { return _createdby.Value; }
                set { _createdby.Value = value; }
            }
            public DateTime UpdatedDate
            {
                get { return _updateddate.Value; }
                set { _updateddate.Value = value; }
            }
            public string UpdatedBy
            {
                get { return _updatedby.Value; }
                set { _updatedby.Value = value; }
            }
            public bool Hidden
            {
                get { return _hidden.Value; }
                set { _hidden.Value = value; }
            }
            public bool Deleted
            {
                get { return _deleted.Value; }
                set { _deleted.Value = value; }
            }

            public ModDefModel(DomainObject container)
                : base(container)
            {
                _id.ValueUpdated += new Wrap<int>.ValueUpdateEventHandler(NotifyContainer);
                _sit_id.ValueUpdated += new Wrap<int>.ValueUpdateEventHandler(NotifyContainer);
                _sta_id.ValueUpdated += new Wrap<int>.ValueUpdateEventHandler(NotifyContainer);
                _lng_id.ValueUpdated += new Wrap<int>.ValueUpdateEventHandler(NotifyContainer);
                _parentid.ValueUpdated += new Wrap<int>.ValueUpdateEventHandler(NotifyContainer);
                _order.ValueUpdated += new Wrap<int>.ValueUpdateEventHandler(NotifyContainer);
                _title.ValueUpdated += new Wrap<string>.ValueUpdateEventHandler(NotifyContainer);
                _alias.ValueUpdated += new Wrap<string>.ValueUpdateEventHandler(NotifyContainer);
                _description.ValueUpdated += new Wrap<string>.ValueUpdateEventHandler(NotifyContainer);
                _src.ValueUpdated += new Wrap<string>.ValueUpdateEventHandler(NotifyContainer);
                _createddate.ValueUpdated += new Wrap<DateTime>.ValueUpdateEventHandler(NotifyContainer);
                _createdby.ValueUpdated += new Wrap<string>.ValueUpdateEventHandler(NotifyContainer);
                _updateddate.ValueUpdated += new Wrap<DateTime>.ValueUpdateEventHandler(NotifyContainer);
                _updatedby.ValueUpdated += new Wrap<string>.ValueUpdateEventHandler(NotifyContainer);
                _hidden.ValueUpdated += new Wrap<bool>.ValueUpdateEventHandler(NotifyContainer);
                _deleted.ValueUpdated += new Wrap<bool>.ValueUpdateEventHandler(NotifyContainer);
            }
        }
    }
}

// DataLayer
namespace LiquidCore
{
    namespace LiquidCore.Data
    {
        using CoreLib;
        using LiquidCore.Modeler;

        public enum OrderMinMax
        {
            Min = 1,
            Max = 2100000000,
            Step = 2
        }
        public static class SiteData
        {
            static string CLASSNAME = "[Namespace::LiquidCore][Class::SiteData]";

            static Int32 DataBlockSize = Convert.ToInt32(System.Configuration.ConfigurationManager.AppSettings["Data.DataBlockSize"].ToString());

            public static void Create(SiteModel Details)
            {
                string FUNCTIONNAME = CLASSNAME + "[Function::Create]";
                try
                {
                    ((SiteModel)Details).Order = (Int32)OrderMinMax.Max; 
                    ((SiteModel)Details).UpdatedDate = DateTime.Now;
                    ((SiteModel)Details).UpdatedBy = Authentication.User.Name;
                    ((SiteModel)Details).CreatedDate = DateTime.Now;
                    ((SiteModel)Details).CreatedBy = Authentication.User.Name;  

                    System.Data.DataSet ds = new System.Data.DataSet();
                    StringBuilder sSQL = new StringBuilder();
                    sSQL.Append("INSERT INTO sit_sites (sta_id, lng_id, sit_parentid, sit_order, sit_title, ");
                    sSQL.Append("sit_alias, sit_description, sit_createddate, sit_createdby, ");
                    sSQL.Append("sit_updateddate, sit_updatedby, sit_hidden, sit_deleted) VALUES ( ");
                    sSQL.Append(Details.Status.ToString() + ", ");
                    sSQL.Append(Details.Language.ToString() + ", ");
                    sSQL.Append(Details.ParentId.ToString() + ", ");
                    sSQL.Append(Details.Order.ToString() + ", ");
                    sSQL.Append("'" + Details.Title + "', ");
                    sSQL.Append("'" + Details.Alias + "', ");
                    sSQL.Append("'" + Details.Description + "', ");
                    sSQL.Append("'" + Details.CreatedDate.ToString() + "', ");
                    sSQL.Append("'" + Details.CreatedBy + "', ");
                    sSQL.Append("'" + Details.UpdatedDate.ToString() + "', ");
                    sSQL.Append("'" + Details.UpdatedBy + "', ");
                    sSQL.Append("" + (Details.Hidden ? "1" : "0") + ", ");
                    sSQL.Append("" + (Details.Deleted ? "1" : "0") + ")");
                    using (iConsulting.iCDataHandler.iCDataObject oDo = new iConsulting.iCDataHandler.iCDataObject(System.Configuration.ConfigurationManager.AppSettings["Data.DataSource"].ToString(), System.Configuration.ConfigurationManager.AppSettings["Data.ConnectionString"].ToString(), false, true, true))
                    {
                        if (!oDo.ExecuteNonQuery(sSQL.ToString()).Equals(1))
                            throw new Exception(oDo.GetError);
                        ((SiteModel)Details).Id = Convert.ToInt32(oDo.GetDataTable("SELECT SCOPE_IDENTITY()").Rows[0][0]);
                    }
                    SortAll();
                }
                catch (Exception ex)
                {
                    Error.Report(ex, FUNCTIONNAME, "");
                }
            }
            public static void Load(ModelObject Details, NameValueSet DataFields)
            {
                string FUNCTIONNAME = CLASSNAME + "[Function::Load]";
                try
                {
                    System.Data.DataTable dt = null;
                    String CacheItem = "LiquidCore.Sites.Site.Id(" + DataFields["Id"].ToString() + ")";
                    if (HttpContext.Current != null) if (HttpContext.Current != null) dt = (DataTable)HttpContext.Current.Cache[CacheItem];
                    if (dt == null)
                    {
                        StringBuilder sSQL = new StringBuilder();
                        sSQL.Append("SELECT * FROM sit_sites WHERE sit_id = " + DataFields["Id"].ToString() + " AND sit_deleted = 0");
                        using (iConsulting.iCDataHandler.iCDataObject oDo = new iConsulting.iCDataHandler.iCDataObject(System.Configuration.ConfigurationManager.AppSettings["Data.DataSource"].ToString(), System.Configuration.ConfigurationManager.AppSettings["Data.ConnectionString"].ToString(), false, true))
                        {
                            dt = oDo.GetDataTable(sSQL.ToString());
                            if (oDo.HasError)
                                throw new Exception(oDo.GetError);
                        }
                        CacheData.Insert(CacheItem, dt);  
                    }
                    if (dt.Rows.Count > 0)
                    {
                        System.Data.DataRow dr = dt.Rows[0];
                        ((SiteModel)Details).Id = Convert.ToInt32(dr["sit_id"]);
                        ((SiteModel)Details).Status = Convert.ToInt32(dr["sta_id"]);
                        ((SiteModel)Details).Language = Convert.ToInt32(dr["lng_id"]);
                        ((SiteModel)Details).ParentId = Convert.ToInt32(dr["sit_parentid"]);
                        ((SiteModel)Details).Order = Convert.ToInt32(dr["sit_order"]);
                        ((SiteModel)Details).Title = Convert.ToString(dr["sit_title"]);
                        ((SiteModel)Details).Alias = Convert.ToString(dr["sit_alias"]);
                        ((SiteModel)Details).Description = Convert.ToString(dr["sit_description"]);
                        ((SiteModel)Details).CreatedDate = Convert.ToDateTime(dr["sit_createddate"]);
                        ((SiteModel)Details).CreatedBy = Convert.ToString(dr["sit_createdby"]);
                        ((SiteModel)Details).UpdatedDate = Convert.ToDateTime(dr["sit_updateddate"]);
                        ((SiteModel)Details).UpdatedBy = Convert.ToString(dr["sit_updatedby"]);
                        ((SiteModel)Details).Hidden = (dr["sit_hidden"].ToString().Equals("0") ? false : true);
                        ((SiteModel)Details).Deleted = (dr["sit_deleted"].ToString().Equals("0") ? false : true);
                    }
                }
                catch (Exception ex)
                {
                    Error.Report(ex, FUNCTIONNAME, "");
                }
            }
            public static void LoadAll(ref List<Site> _sites)
            {
                string FUNCTIONNAME = CLASSNAME + "[Function::LoadAll]";
                try
                {
                    DataTable dt = null;
                    String CacheItem = "LiquidCore.Sites";
                    if (HttpContext.Current != null) if (HttpContext.Current != null) dt = (DataTable)HttpContext.Current.Cache[CacheItem];
                    if (dt == null)
                    {
                        StringBuilder sSQL = new StringBuilder();
                        sSQL.Append("SELECT * FROM sit_sites WHERE sit_deleted = 0 ORDER BY sta_id, ");
                        sSQL.Append("lng_id, sit_parentid, sit_order");
                        using (iConsulting.iCDataHandler.iCDataObject oDo = new iConsulting.iCDataHandler.iCDataObject(System.Configuration.ConfigurationManager.AppSettings["Data.DataSource"].ToString(), System.Configuration.ConfigurationManager.AppSettings["Data.ConnectionString"].ToString(), false, true))
                        {
                            dt = oDo.GetDataTable(sSQL.ToString());
                            if (oDo.HasError)
                                throw new Exception(oDo.GetError);
                        }
                        CacheData.Insert(CacheItem, dt);  
                    }
                    foreach (DataRow dr in dt.Rows)
                    {
                        Site s = new Site(Convert.ToInt32(dr["sit_id"].ToString()));
                        _sites.Add(s);
                    }          
                }
                catch (Exception ex)
                {
                    Error.Report(ex, FUNCTIONNAME, "");
                }
            }
            public static void LoadAll(ref List<Site> _sites, NameValueSet DataFields)
            {
                string FUNCTIONNAME = CLASSNAME + "[Function::LoadAll]";
                try
                {
                    String PrimaryKey = String.Empty;
                    String CacheItem = String.Empty;
                    StringBuilder sSQL = new StringBuilder();
                    if (DataFields["Alias"] != null)
                    {
                        PrimaryKey = DataFields["Alias"].ToString();
                        CacheItem = "LiquidCore.Sites.PrimaryKey(Alias(" + PrimaryKey + "))";
                        sSQL.Append("SELECT * FROM sit_sites WHERE sit_alias = '" + PrimaryKey + "' AND sit_deleted = 0 ORDER BY sta_id, lng_id, sit_parentid, sit_order");
                    }
                    else
                    {
                        LoadAll(ref _sites);
                        return;
                    }
                    DataTable dt = null;
                    if (HttpContext.Current != null) if (HttpContext.Current != null) dt = (DataTable)HttpContext.Current.Cache[CacheItem];
                    if (dt == null)
                    {
                        using (iConsulting.iCDataHandler.iCDataObject oDo = new iConsulting.iCDataHandler.iCDataObject(System.Configuration.ConfigurationManager.AppSettings["Data.DataSource"].ToString(), System.Configuration.ConfigurationManager.AppSettings["Data.ConnectionString"].ToString(), false, true))
                        {
                            dt = oDo.GetDataTable(sSQL.ToString());
                            if (oDo.HasError)
                                throw new Exception(oDo.GetError);
                        }
                        CacheData.Insert(CacheItem, dt);
                    }
                    foreach (DataRow dr in dt.Rows)
                    {
                        Site s = new Site(Convert.ToInt32(dr["sit_id"].ToString()));
                        _sites.Add(s);
                    }        
                }
                catch (Exception ex)
                {
                    Error.Report(ex, FUNCTIONNAME, "");
                }
            }
            public static void Update(SiteModel Details)
            {
                string FUNCTIONNAME = CLASSNAME + "[Function::Update]";
                try
                {
                    ((SiteModel)Details).UpdatedDate = DateTime.Now;
                    ((SiteModel)Details).UpdatedBy = Authentication.User.Name;

                    System.Data.DataSet ds = new System.Data.DataSet();
                    StringBuilder sSQL = new StringBuilder();
                    sSQL.Append("UPDATE sit_sites SET ");
                    sSQL.Append("sta_id = " + Details.Status.ToString() + ", ");
                    sSQL.Append("lng_id = " + Details.Language.ToString() + ", ");
                    sSQL.Append("sit_parentid = " + Details.ParentId.ToString() + ", ");
                    sSQL.Append("sit_order = " + Details.Order.ToString() + ", ");
                    sSQL.Append("sit_title = '" + Details.Title + "', ");
                    sSQL.Append("sit_alias = '" + Details.Alias + "', ");
                    sSQL.Append("sit_description = '" + Details.Description + "', ");
                    sSQL.Append("sit_createddate = '" + Details.CreatedDate.ToString() + "', ");
                    sSQL.Append("sit_createdby = '" + Details.CreatedBy + "', ");
                    sSQL.Append("sit_updateddate = '" + Details.UpdatedDate.ToString() + "', ");
                    sSQL.Append("sit_updatedby = '" + Details.UpdatedBy + "', ");
                    sSQL.Append("sit_hidden = " + (!Details.Hidden ? "0" : "1") + ", ");
                    sSQL.Append("sit_deleted = " + (!Details.Deleted ? "0" : "1") + " ");
                    sSQL.Append("WHERE sit_id = " + Details.Id.ToString());
                    using (iConsulting.iCDataHandler.iCDataObject oDo = new iConsulting.iCDataHandler.iCDataObject(System.Configuration.ConfigurationManager.AppSettings["Data.DataSource"].ToString(), System.Configuration.ConfigurationManager.AppSettings["Data.ConnectionString"].ToString(), false, true, true))
                    {
                        if (!oDo.ExecuteNonQuery(sSQL.ToString()).Equals(1))
                            throw new Exception(oDo.GetError);
                    }
                    SortAll();
                }
                catch (Exception ex)
                {
                    Error.Report(ex, FUNCTIONNAME, "");
                }
            }
            public static void Delete(SiteModel Details)
            {
                string FUNCTIONNAME = CLASSNAME + "[Function::Delete]";
                try
                {
                    System.Data.DataSet ds = new System.Data.DataSet();
                    StringBuilder sSQL = new StringBuilder();
                    sSQL.Append("UPDATE sit_sites SET sit_deleted = 1 WHERE sit_id = " + Details.Id.ToString());
                    using (iConsulting.iCDataHandler.iCDataObject oDo = new iConsulting.iCDataHandler.iCDataObject(System.Configuration.ConfigurationManager.AppSettings["Data.DataSource"].ToString(), System.Configuration.ConfigurationManager.AppSettings["Data.ConnectionString"].ToString(), false, true, true))
                    {
                        if (!oDo.ExecuteNonQuery(sSQL.ToString()).Equals(1))
                            throw new Exception(oDo.GetError);
                    }
                    ResetThis();
                    Details = null;
                }
                catch (Exception ex)
                {
                    Error.Report(ex, FUNCTIONNAME, "");
                }
            }
            public static void ResetThis()
            {
                string FUNCTIONNAME = CLASSNAME + "[Function::ResetThis]";
                try
                {
                    CacheData.Reset("LiquidCore.Sites");
                }
                catch (Exception ex)
                {
                    Error.Report(ex, FUNCTIONNAME, "");
                }
            }
            public static void SortAll()
            {
                string FUNCTIONNAME = CLASSNAME + "[Function::SortAll]";
                try
                {
                    Int32 Order = (Int32)OrderMinMax.Min;
                    StringBuilder sSQL = new StringBuilder();
                    sSQL.Append("SELECT sit_id FROM sit_sites WHERE sit_deleted = 0 ORDER BY sta_id, lng_id, sit_parentid, sit_order");
                    using (iConsulting.iCDataHandler.iCDataObject oDo = new iConsulting.iCDataHandler.iCDataObject(System.Configuration.ConfigurationManager.AppSettings["Data.DataSource"].ToString(), System.Configuration.ConfigurationManager.AppSettings["Data.ConnectionString"].ToString(), false, true, false))
                    {
                        DataTable dt = oDo.GetDataTable(sSQL.ToString());
                        if (oDo.HasError)
                            throw new Exception(oDo.GetError);
                        StringBuilder sSQL2 = new StringBuilder();
                        foreach (DataRow dr in dt.Rows)
                        { 
                            sSQL2.AppendLine("UPDATE sit_sites SET sit_order = " + Order.ToString() + " WHERE sit_id = " + dr["sit_id"].ToString());
                            Order = Order + (Int32)OrderMinMax.Step;
                            if (sSQL2.Length > DataBlockSize)
                            {
                                if (!(oDo.ExecuteNonQuery(sSQL2.ToString()) > 0))
                                    throw new Exception(oDo.GetError);
                                sSQL2 = new StringBuilder();
                            }
                        }
                        if (sSQL2.Length > 0)
                            if (!(oDo.ExecuteNonQuery(sSQL2.ToString()) > 0))
                                throw new Exception(oDo.GetError);
                        ResetThis();
                    }
                }
                catch (Exception ex)
                {
                    Error.Report(ex, FUNCTIONNAME, "");
                }
            }
        }
        public static class SettingData
        {
            static string CLASSNAME = "[Namespace::LiquidCore][Class::SettingData]";

            static Int32 DataBlockSize = Convert.ToInt32(System.Configuration.ConfigurationManager.AppSettings["Data.DataBlockSize"].ToString());

            public static void Create(SettingModel Details)
            {
                string FUNCTIONNAME = CLASSNAME + "[Function::Create]";
                try
                {
                    ((SettingModel)Details).Order = (Int32)OrderMinMax.Max;
                    ((SettingModel)Details).UpdatedDate = DateTime.Now;
                    ((SettingModel)Details).UpdatedBy = Authentication.User.Name;
                    ((SettingModel)Details).CreatedDate = DateTime.Now;
                    ((SettingModel)Details).CreatedBy = Authentication.User.Name;

                    System.Data.DataSet ds = new System.Data.DataSet();
                    StringBuilder sSQL = new StringBuilder();
                    sSQL.Append("INSERT INTO set_settings (sta_id, lng_id, sit_id, pag_id, mod_id, set_parentid, set_order, set_title, ");
                    sSQL.Append("set_alias, set_description, set_value, set_createddate, set_createdby, ");
                    sSQL.Append("set_updateddate, set_updatedby, set_hidden, set_deleted) VALUES ( ");
                    sSQL.Append(Details.Status.ToString() + ", ");
                    sSQL.Append(Details.Language.ToString() + ", ");
                    sSQL.Append(Details.SitId.ToString() + ", ");
                    sSQL.Append(Details.PagId.ToString() + ", ");
                    sSQL.Append(Details.ModId.ToString() + ", ");
                    sSQL.Append(Details.ParentId.ToString() + ", ");
                    sSQL.Append(Details.Order.ToString() + ", ");
                    sSQL.Append("'" + Details.Title + "', ");
                    sSQL.Append("'" + Details.Alias + "', ");
                    sSQL.Append("'" + Details.Description + "', ");
                    sSQL.Append("'" + Details.Value + "', ");
                    sSQL.Append("'" + Details.CreatedDate.ToString() + "', ");
                    sSQL.Append("'" + Details.CreatedBy + "', ");
                    sSQL.Append("'" + Details.UpdatedDate.ToString() + "', ");
                    sSQL.Append("'" + Details.UpdatedBy + "', ");
                    sSQL.Append("" + (Details.Hidden ? "1" : "0") + ", ");
                    sSQL.Append("" + (Details.Deleted ? "1" : "0") + ")");
                    using (iConsulting.iCDataHandler.iCDataObject oDo = new iConsulting.iCDataHandler.iCDataObject(System.Configuration.ConfigurationManager.AppSettings["Data.DataSource"].ToString(), System.Configuration.ConfigurationManager.AppSettings["Data.ConnectionString"].ToString(), false, true, true))
                    {
                        if (!oDo.ExecuteNonQuery(sSQL.ToString()).Equals(1))
                            throw new Exception(oDo.GetError);
                        ((SettingModel)Details).Id = Convert.ToInt32(oDo.GetDataTable("SELECT SCOPE_IDENTITY()").Rows[0][0]);
                    }
                    SortAll();
                }
                catch (Exception ex)
                {
                    Error.Report(ex, FUNCTIONNAME, "");
                }
            }
            public static void Load(ModelObject Details, NameValueSet DataFields)
            {
                string FUNCTIONNAME = CLASSNAME + "[Function::Load]";
                try
                {
                    StringBuilder sSQL = new StringBuilder();
                    String CacheItem = String.Empty;
                    String Id = String.Empty;
                    String Alias = String.Empty;
                    if (DataFields["Id"] != null)
                    {
                        Id = DataFields["Id"].ToString();
                        CacheItem = "LiquidCore.Settings.Setting.Id(" + Id + ")";
                        sSQL.Append("SELECT * FROM set_settings WHERE set_id = " + Id + " AND set_deleted = 0");
                    }
                    else if (DataFields["Alias"] != null)
                    {
                        Alias = DataFields["Alias"].ToString();
                        CacheItem = "LiquidCore.Settings.Setting.Alias(" + Alias + ")";
                        sSQL.Append("SELECT * FROM set_settings WHERE set_alias = '" + Alias + "' AND set_deleted = 0");
                    }
                    else
                        throw new Exception("Bad programmer !!!");

                    System.Data.DataTable dt = null;
                    if (HttpContext.Current != null) if (HttpContext.Current != null) dt = (DataTable)HttpContext.Current.Cache[CacheItem];
                    if (dt == null)
                    {
                        using (iConsulting.iCDataHandler.iCDataObject oDo = new iConsulting.iCDataHandler.iCDataObject(System.Configuration.ConfigurationManager.AppSettings["Data.DataSource"].ToString(), System.Configuration.ConfigurationManager.AppSettings["Data.ConnectionString"].ToString(), false, true))
                        {
                            dt = oDo.GetDataTable(sSQL.ToString());
                            if (oDo.HasError)
                                throw new Exception(oDo.GetError);
                        }
                        CacheData.Insert(CacheItem, dt);
                    }
                    if (dt.Rows.Count > 0)
                    {
                        System.Data.DataRow dr = dt.Rows[0];
                        ((SettingModel)Details).Id = Convert.ToInt32(dr["set_id"]);
                        ((SettingModel)Details).Status = Convert.ToInt32(dr["sta_id"]);
                        ((SettingModel)Details).Language = Convert.ToInt32(dr["lng_id"]);
                        ((SettingModel)Details).SitId = Convert.ToInt32(dr["sit_id"]);
                        ((SettingModel)Details).PagId = Convert.ToInt32(dr["pag_id"]);
                        ((SettingModel)Details).ModId = Convert.ToInt32(dr["mod_id"]);
                        ((SettingModel)Details).ParentId = Convert.ToInt32(dr["set_parentid"]);
                        ((SettingModel)Details).Order = Convert.ToInt32(dr["set_order"]);
                        ((SettingModel)Details).Title = Convert.ToString(dr["set_title"]);
                        ((SettingModel)Details).Alias = Convert.ToString(dr["set_alias"]);
                        ((SettingModel)Details).Description = Convert.ToString(dr["set_description"]);
                        ((SettingModel)Details).Value = Convert.ToString(dr["set_value"]);
                        ((SettingModel)Details).CreatedDate = Convert.ToDateTime(dr["set_createddate"]);
                        ((SettingModel)Details).CreatedBy = Convert.ToString(dr["set_createdby"]);
                        ((SettingModel)Details).UpdatedDate = Convert.ToDateTime(dr["set_updateddate"]);
                        ((SettingModel)Details).UpdatedBy = Convert.ToString(dr["set_updatedby"]);
                        ((SettingModel)Details).Hidden = (dr["set_hidden"].ToString().Equals("0") ? false : true);
                        ((SettingModel)Details).Deleted = (dr["set_deleted"].ToString().Equals("0") ? false : true);
                    }
                }
                catch (Exception ex)
                {
                    Error.Report(ex, FUNCTIONNAME, "");
                }
            }
            public static void LoadAll(ref List<Setting> _settings)
            {
                string FUNCTIONNAME = CLASSNAME + "[Function::LoadAll]";
                try
                {
                    DataTable dt = null;
                    String CacheItem = "LiquidCore.Settings";
                    if (HttpContext.Current != null) if (HttpContext.Current != null) dt = (DataTable)HttpContext.Current.Cache[CacheItem];
                    if (dt == null)
                    {
                        StringBuilder sSQL = new StringBuilder();
                        sSQL.Append("SELECT * FROM set_settings WHERE set_deleted = 0 ORDER BY sta_id, ");
                        sSQL.Append("lng_id, set_parentid, set_order");
                        using (iConsulting.iCDataHandler.iCDataObject oDo = new iConsulting.iCDataHandler.iCDataObject(System.Configuration.ConfigurationManager.AppSettings["Data.DataSource"].ToString(), System.Configuration.ConfigurationManager.AppSettings["Data.ConnectionString"].ToString(), false, true))
                        {
                            dt = oDo.GetDataTable(sSQL.ToString());
                            if (oDo.HasError)
                                throw new Exception(oDo.GetError);
                        }
                        CacheData.Insert(CacheItem, dt);
                    }
                    foreach (DataRow dr in dt.Rows)
                    {
                        Setting s = new Setting(Convert.ToInt32(dr["set_id"].ToString()));
                        _settings.Add(s);
                    }
                }
                catch (Exception ex)
                {
                    Error.Report(ex, FUNCTIONNAME, "");
                }
            }
            public static void LoadAll(ref List<Setting> _settings, NameValueSet DataFields)
            {
                string FUNCTIONNAME = CLASSNAME + "[Function::LoadAll]";
                try
                {
                    String PrimaryKey = String.Empty;
                    String CacheItem = String.Empty;
                    StringBuilder sSQL = new StringBuilder();
                    if (DataFields["SitId"] != null && DataFields["PagId"] != null && DataFields["ModId"] != null && DataFields["ParentId"] != null)
                    {
                        String SitId = DataFields["SitId"].ToString();
                        String PagId = DataFields["PagId"].ToString();
                        String ModId = DataFields["ModId"].ToString();
                        String ParentId = DataFields["ParentId"].ToString();
                        CacheItem = "LiquidCore.Settings.PrimaryKeys(SitId(" + SitId + "), PagId(" + PagId + "), ModId(" + ModId + "), ParentId(" + ParentId + "))";
                        sSQL.Append("SELECT * FROM set_settings WHERE sit_id = " + SitId + " AND pag_id = " + PagId + " AND mod_id = " + ModId + " AND set_parentid = " + ParentId + " AND set_deleted = 0 ORDER BY sta_id, lng_id, set_parentid, set_order");
                    }
                    else if (DataFields["Alias"] != null)
                    {
                        PrimaryKey = DataFields["Alias"].ToString();
                        CacheItem = "LiquidCore.Settings.PrimaryKey(Alias(" + PrimaryKey + "))";
                        sSQL.Append("SELECT * FROM set_settings WHERE set_alias = '" + PrimaryKey + "' AND set_deleted = 0 ORDER BY sta_id, lng_id, set_parentid, set_order");
                    }
                    else
                    {
                        LoadAll(ref _settings);
                        return;
                    }
                    DataTable dt = null;
                    if (HttpContext.Current != null) if (HttpContext.Current != null) dt = (DataTable)HttpContext.Current.Cache[CacheItem];
                    if (dt == null)
                    {
                        using (iConsulting.iCDataHandler.iCDataObject oDo = new iConsulting.iCDataHandler.iCDataObject(System.Configuration.ConfigurationManager.AppSettings["Data.DataSource"].ToString(), System.Configuration.ConfigurationManager.AppSettings["Data.ConnectionString"].ToString(), false, true))
                        {
                            dt = oDo.GetDataTable(sSQL.ToString());
                            if (oDo.HasError)
                                throw new Exception(oDo.GetError);
                        }
                        CacheData.Insert(CacheItem, dt);
                    }
                    foreach (DataRow dr in dt.Rows)
                    {
                        Setting s = new Setting(Convert.ToInt32(dr["set_id"].ToString()));
                        _settings.Add(s);
                    }
                }
                catch (Exception ex)
                {
                    Error.Report(ex, FUNCTIONNAME, "");
                }
            }
            public static void Update(SettingModel Details)
            {
                string FUNCTIONNAME = CLASSNAME + "[Function::Update]";
                try
                {
                    ((SettingModel)Details).UpdatedDate = DateTime.Now;
                    ((SettingModel)Details).UpdatedBy = Authentication.User.Name;

                    System.Data.DataSet ds = new System.Data.DataSet();
                    StringBuilder sSQL = new StringBuilder();
                    sSQL.Append("UPDATE set_settings SET ");
                    sSQL.Append("sta_id = " + Details.Status.ToString() + ", ");
                    sSQL.Append("lng_id = " + Details.Language.ToString() + ", ");
                    sSQL.Append("sit_id = " + Details.SitId.ToString() + ", ");
                    sSQL.Append("pag_id = " + Details.PagId.ToString() + ", ");
                    sSQL.Append("mod_id = " + Details.ModId.ToString() + ", ");
                    sSQL.Append("set_parentid = " + Details.ParentId.ToString() + ", ");
                    sSQL.Append("set_order = " + Details.Order.ToString() + ", ");
                    sSQL.Append("set_title = '" + Details.Title + "', ");
                    sSQL.Append("set_alias = '" + Details.Alias + "', ");
                    sSQL.Append("set_description = '" + Details.Description + "', ");
                    sSQL.Append("set_value = '" + Details.Value + "', ");
                    sSQL.Append("set_createddate = '" + Details.CreatedDate.ToString() + "', ");
                    sSQL.Append("set_createdby = '" + Details.CreatedBy + "', ");
                    sSQL.Append("set_updateddate = '" + Details.UpdatedDate.ToString() + "', ");
                    sSQL.Append("set_updatedby = '" + Details.UpdatedBy + "', ");
                    sSQL.Append("set_hidden = " + (!Details.Hidden ? "0" : "1") + ", ");
                    sSQL.Append("set_deleted = " + (!Details.Deleted ? "0" : "1") + " ");
                    sSQL.Append("WHERE set_id = " + Details.Id.ToString());
                    using (iConsulting.iCDataHandler.iCDataObject oDo = new iConsulting.iCDataHandler.iCDataObject(System.Configuration.ConfigurationManager.AppSettings["Data.DataSource"].ToString(), System.Configuration.ConfigurationManager.AppSettings["Data.ConnectionString"].ToString(), false, true, true))
                    {
                        if (!oDo.ExecuteNonQuery(sSQL.ToString()).Equals(1))
                            throw new Exception(oDo.GetError);
                    }
                    SortAll();
                }
                catch (Exception ex)
                {
                    Error.Report(ex, FUNCTIONNAME, "");
                }
            }
            public static void Delete(SettingModel Details)
            {
                string FUNCTIONNAME = CLASSNAME + "[Function::Delete]";
                try
                {
                    System.Data.DataSet ds = new System.Data.DataSet();
                    StringBuilder sSQL = new StringBuilder();
                    sSQL.Append("UPDATE set_settings SET set_deleted = 1 WHERE set_id = " + Details.Id.ToString());
                    using (iConsulting.iCDataHandler.iCDataObject oDo = new iConsulting.iCDataHandler.iCDataObject(System.Configuration.ConfigurationManager.AppSettings["Data.DataSource"].ToString(), System.Configuration.ConfigurationManager.AppSettings["Data.ConnectionString"].ToString(), false, true, true))
                    {
                        if (!oDo.ExecuteNonQuery(sSQL.ToString()).Equals(1))
                            throw new Exception(oDo.GetError);
                    }
                    ResetThis();
                    Details = null;
                }
                catch (Exception ex)
                {
                    Error.Report(ex, FUNCTIONNAME, "");
                }
            }
            public static void ResetThis()
            {
                string FUNCTIONNAME = CLASSNAME + "[Function::ResetThis]";
                try
                {
                    CacheData.Reset("LiquidCore.Settings");
                }
                catch (Exception ex)
                {
                    Error.Report(ex, FUNCTIONNAME, "");
                }
            }
            public static void SortAll()
            {
                string FUNCTIONNAME = CLASSNAME + "[Function::SortAll]";
                try
                {
                    Int32 Order = (Int32)OrderMinMax.Min;
                    StringBuilder sSQL = new StringBuilder();
                    sSQL.Append("SELECT set_id FROM set_settings WHERE set_deleted = 0 ORDER BY sta_id, lng_id, set_parentid, set_order");
                    using (iConsulting.iCDataHandler.iCDataObject oDo = new iConsulting.iCDataHandler.iCDataObject(System.Configuration.ConfigurationManager.AppSettings["Data.DataSource"].ToString(), System.Configuration.ConfigurationManager.AppSettings["Data.ConnectionString"].ToString(), false, true, false))
                    {
                        DataTable dt = oDo.GetDataTable(sSQL.ToString());
                        if (oDo.HasError)
                            throw new Exception(oDo.GetError);
                        StringBuilder sSQL2 = new StringBuilder();
                        foreach (DataRow dr in dt.Rows)
                        {
                            sSQL2.AppendLine("UPDATE set_settings SET set_order = " + Order.ToString() + " WHERE set_id = " + dr["set_id"].ToString());
                            Order = Order + (Int32)OrderMinMax.Step;
                            if (sSQL2.Length > DataBlockSize)
                            {
                                if (!(oDo.ExecuteNonQuery(sSQL2.ToString()) > 0))
                                    throw new Exception(oDo.GetError);
                                sSQL2 = new StringBuilder();
                            }
                        }
                        if (!(oDo.ExecuteNonQuery(sSQL2.ToString()) > 0))
                            throw new Exception(oDo.GetError);
                        ResetThis();
                    }
                }
                catch (Exception ex)
                {
                    Error.Report(ex, FUNCTIONNAME, "");
                }
            }
        }
        public static class PageData
        {
            static string CLASSNAME = "[Namespace::LiquidCore][Class::PageData]";

            static Int32 DataBlockSize = Convert.ToInt32(System.Configuration.ConfigurationManager.AppSettings["Data.DataBlockSize"].ToString());

            public static void Create(PageModel Details)
            {
                string FUNCTIONNAME = CLASSNAME + "[Function::Create]";
                try
                {
                    ((PageModel)Details).Order = (Int32)OrderMinMax.Max; 
                    ((PageModel)Details).UpdatedDate = DateTime.Now;
                    ((PageModel)Details).UpdatedBy = Authentication.User.Name;
                    ((PageModel)Details).CreatedDate = DateTime.Now;
                    ((PageModel)Details).CreatedBy = Authentication.User.Name;  

                    System.Data.DataSet ds = new System.Data.DataSet();
                    StringBuilder sSQL = new StringBuilder();
                    sSQL.Append("INSERT INTO pag_pages (sit_id, sta_id, lng_id, mdl_id, pag_parentid, pag_order, pag_title, ");
                    sSQL.Append("pag_alias, pag_description, pag_template, pag_createddate, pag_createdby, ");
                    sSQL.Append("pag_updateddate, pag_updatedby, pag_hidden, pag_deleted) VALUES ( ");
                    sSQL.Append(Details.SitId.ToString() + ", ");
                    sSQL.Append(Details.Status.ToString() + ", ");
                    sSQL.Append(Details.Language.ToString() + ", ");
                    sSQL.Append(Details.ModelId.ToString() + ", ");
                    sSQL.Append(Details.ParentId.ToString() + ", ");
                    sSQL.Append(Details.Order.ToString() + ", ");
                    sSQL.Append("'" + Details.Title + "', ");
                    sSQL.Append("'" + Details.Alias + "', ");
                    sSQL.Append("'" + Details.Description + "', ");
                    sSQL.Append("'" + Details.Template + "', ");
                    sSQL.Append("'" + Details.CreatedDate.ToString() + "', ");
                    sSQL.Append("'" + Details.CreatedBy + "', ");
                    sSQL.Append("'" + Details.UpdatedDate.ToString() + "', ");
                    sSQL.Append("'" + Details.UpdatedBy + "', ");
                    sSQL.Append("" + (Details.Hidden ? "1" : "0") + ", ");
                    sSQL.Append("" + (Details.Deleted ? "1" : "0") + ")");
                    using (iConsulting.iCDataHandler.iCDataObject oDo = new iConsulting.iCDataHandler.iCDataObject(System.Configuration.ConfigurationManager.AppSettings["Data.DataSource"].ToString(), System.Configuration.ConfigurationManager.AppSettings["Data.ConnectionString"].ToString(), false, true, true))
                    {
                        if (!oDo.ExecuteNonQuery(sSQL.ToString()).Equals(1))
                            throw new Exception(oDo.GetError);
                        ((PageModel)Details).Id = Convert.ToInt32(oDo.GetDataTable("SELECT SCOPE_IDENTITY()").Rows[0][0]);
                    }
                    SortAll();
                }
                catch (Exception ex)
                {
                    Error.Report(ex, FUNCTIONNAME, "");
                }
            }
            public static void Load(ModelObject Details, NameValueSet DataFields)
            {
                string FUNCTIONNAME = CLASSNAME + "[Function::Load]";
                try
                {
                    System.Data.DataTable dt = null;
                    String CacheItem = "LiquidCore.Pages.Page.Id(" + DataFields["Id"].ToString() + ")";
                    if (HttpContext.Current != null) if (HttpContext.Current != null) dt = (DataTable)HttpContext.Current.Cache[CacheItem];
                    if (dt == null)
                    {
                        StringBuilder sSQL = new StringBuilder();
                        sSQL.Append("SELECT * FROM pag_pages WHERE pag_id = " + DataFields["Id"].ToString() + " AND pag_deleted = 0");
                        using (iConsulting.iCDataHandler.iCDataObject oDo = new iConsulting.iCDataHandler.iCDataObject(System.Configuration.ConfigurationManager.AppSettings["Data.DataSource"].ToString(), System.Configuration.ConfigurationManager.AppSettings["Data.ConnectionString"].ToString(), false, true))
                        {
                            dt = oDo.GetDataTable(sSQL.ToString());
                            if (oDo.HasError)
                                throw new Exception(oDo.GetError);
                        }
                        CacheData.Insert(CacheItem, dt);  
                    }
                    if (dt.Rows.Count > 0)
                    {
                        System.Data.DataRow dr = dt.Rows[0];
                        ((PageModel)Details).Id = Convert.ToInt32(dr["pag_id"]);
                        ((PageModel)Details).SitId = Convert.ToInt32(dr["sit_id"]);
                        ((PageModel)Details).Status = Convert.ToInt32(dr["sta_id"]);
                        ((PageModel)Details).Language = Convert.ToInt32(dr["lng_id"]);
                        ((PageModel)Details).ModelId = Convert.ToInt32(dr["mdl_id"]);
                        ((PageModel)Details).ParentId = Convert.ToInt32(dr["pag_parentid"]);
                        ((PageModel)Details).Order = Convert.ToInt32(dr["pag_order"]);
                        ((PageModel)Details).Title = Convert.ToString(dr["pag_title"]);
                        ((PageModel)Details).Alias = Convert.ToString(dr["pag_alias"]);
                        ((PageModel)Details).Description = Convert.ToString(dr["pag_description"]);
                        ((PageModel)Details).Template = Convert.ToString(dr["pag_template"]);
                        ((PageModel)Details).CreatedDate = Convert.ToDateTime(dr["pag_createddate"]);
                        ((PageModel)Details).CreatedBy = Convert.ToString(dr["pag_createdby"]);
                        ((PageModel)Details).UpdatedDate = Convert.ToDateTime(dr["pag_updateddate"]);
                        ((PageModel)Details).UpdatedBy = Convert.ToString(dr["pag_updatedby"]);
                        ((PageModel)Details).Hidden = (dr["pag_hidden"].ToString().Equals("0") ? false : true);
                        ((PageModel)Details).Deleted = (dr["pag_deleted"].ToString().Equals("0") ? false : true);
                    }
                }
                catch (Exception ex)
                {
                    Error.Report(ex, FUNCTIONNAME, "");
                }
            }
            public static void LoadAll(ref List<Page> _pages)
            {
                string FUNCTIONNAME = CLASSNAME + "[Function::LoadAll]";
                try
                {
                    DataTable dt = null;
                    String CacheItem = "LiquidCore.Pages";
                    if (HttpContext.Current != null) if (HttpContext.Current != null) dt = (DataTable)HttpContext.Current.Cache[CacheItem];
                    if (dt == null)
                    {
                        StringBuilder sSQL = new StringBuilder();
                        sSQL.Append("SELECT * FROM pag_pages WHERE pag_deleted = 0 ORDER BY sit_id, sta_id, ");
                        sSQL.Append("lng_id, pag_parentid, pag_order");
                        using (iConsulting.iCDataHandler.iCDataObject oDo = new iConsulting.iCDataHandler.iCDataObject(System.Configuration.ConfigurationManager.AppSettings["Data.DataSource"].ToString(), System.Configuration.ConfigurationManager.AppSettings["Data.ConnectionString"].ToString(), false, true))
                        {
                            dt = oDo.GetDataTable(sSQL.ToString());
                            if (oDo.HasError)
                                throw new Exception(oDo.GetError);
                        }
                        CacheData.Insert(CacheItem, dt);  
                    }
                    foreach (DataRow dr in dt.Rows)
                    {
                        Page p = new Page(Convert.ToInt32(dr["pag_id"].ToString()));
                        _pages.Add(p);
                    }          
                }
                catch (Exception ex)
                {
                    Error.Report(ex, FUNCTIONNAME, "");
                }
            }
            public static void LoadAll(ref List<Page> _pages, NameValueSet DataFields)
            {
                string FUNCTIONNAME = CLASSNAME + "[Function::LoadAll]";
                try
                {
                    String PrimaryKey = String.Empty;
                    String CacheItem = String.Empty;
                    StringBuilder sSQL = new StringBuilder();
                    if (DataFields["SitId"] != null && DataFields["ParentId"] != null)
                    {
                        String SitId = DataFields["SitId"].ToString();
                        String ParentId = DataFields["ParentId"].ToString();
                        CacheItem = "LiquidCore.Pages.PrimaryKeys(SitId(" + SitId + "), ParentId(" + ParentId + "))";
                        sSQL.Append("SELECT * FROM pag_pages WHERE sit_id = " + SitId + " AND pag_parentid = " + ParentId + " AND pag_deleted = 0 ORDER BY sit_id, sta_id, lng_id, pag_parentid, pag_order");
                    }
                    else if (DataFields["Alias"] != null)
                    {
                        PrimaryKey = DataFields["Alias"].ToString();
                        CacheItem = "LiquidCore.Pages.PrimaryKey(Alias(" + PrimaryKey + "))";
                        sSQL.Append("SELECT * FROM pag_pages WHERE pag_alias = '" + PrimaryKey + "' AND pag_deleted = 0 ORDER BY sit_id, sta_id, lng_id, pag_parentid, pag_order");
                    }
                    else
                    {
                        LoadAll(ref _pages);
                        return;
                    }
                    DataTable dt = null;
                    if (HttpContext.Current != null) if (HttpContext.Current != null) dt = (DataTable)HttpContext.Current.Cache[CacheItem];
                    if (dt == null)
                    {
                        using (iConsulting.iCDataHandler.iCDataObject oDo = new iConsulting.iCDataHandler.iCDataObject(System.Configuration.ConfigurationManager.AppSettings["Data.DataSource"].ToString(), System.Configuration.ConfigurationManager.AppSettings["Data.ConnectionString"].ToString(), false, true))
                        {
                            dt = oDo.GetDataTable(sSQL.ToString());
                            if (oDo.HasError)
                                throw new Exception(oDo.GetError);
                        }
                        CacheData.Insert(CacheItem, dt);
                    }
                    foreach (DataRow dr in dt.Rows)
                    {
                        Page p = new Page(Convert.ToInt32(dr["pag_id"].ToString()));
                        _pages.Add(p);
                    }        
                }
                catch (Exception ex)
                {
                    Error.Report(ex, FUNCTIONNAME, "");
                }
            }
            public static void Update(PageModel Details)
            {
                string FUNCTIONNAME = CLASSNAME + "[Function::Update]";
                try
                {
                    ((PageModel)Details).UpdatedDate = DateTime.Now;
                    ((PageModel)Details).UpdatedBy = Authentication.User.Name;

                    System.Data.DataSet ds = new System.Data.DataSet();
                    StringBuilder sSQL = new StringBuilder();
                    sSQL.Append("UPDATE sit_sites SET ");
                    sSQL.Append("sit_id = " + Details.SitId.ToString() + ", ");
                    sSQL.Append("sta_id = " + Details.Status.ToString() + ", ");
                    sSQL.Append("lng_id = " + Details.Language.ToString() + ", ");
                    sSQL.Append("mdl_id = " + Details.ModelId.ToString() + ", ");
                    sSQL.Append("pag_parentid = " + Details.ParentId.ToString() + ", ");
                    sSQL.Append("pag_order = " + Details.Order.ToString() + ", ");
                    sSQL.Append("pag_title = '" + Details.Title + "', ");
                    sSQL.Append("pag_alias = '" + Details.Alias + "', ");
                    sSQL.Append("pag_description = '" + Details.Description + "', ");
                    sSQL.Append("pag_template = '" + Details.Template + "', ");
                    sSQL.Append("pag_createddate = '" + Details.CreatedDate.ToString() + "', ");
                    sSQL.Append("pag_createdby = '" + Details.CreatedBy + "', ");
                    sSQL.Append("pag_updateddate = '" + Details.UpdatedDate.ToString() + "', ");
                    sSQL.Append("pag_updatedby = '" + Details.UpdatedBy + "', ");
                    sSQL.Append("pag_hidden = " + (!Details.Hidden ? "0" : "1") + ", ");
                    sSQL.Append("pag_deleted = " + (!Details.Deleted ? "0" : "1") + " ");
                    sSQL.Append("WHERE pag_id = " + Details.Id.ToString());
                    using (iConsulting.iCDataHandler.iCDataObject oDo = new iConsulting.iCDataHandler.iCDataObject(System.Configuration.ConfigurationManager.AppSettings["Data.DataSource"].ToString(), System.Configuration.ConfigurationManager.AppSettings["Data.ConnectionString"].ToString(), false, true, true))
                    {
                        if (!oDo.ExecuteNonQuery(sSQL.ToString()).Equals(1))
                            throw new Exception(oDo.GetError);
                    }
                    SortAll();
                }
                catch (Exception ex)
                {
                    Error.Report(ex, FUNCTIONNAME, "");
                }
            }
            public static void Delete(PageModel Details)
            {
                string FUNCTIONNAME = CLASSNAME + "[Function::Delete]";
                try
                {
                    System.Data.DataSet ds = new System.Data.DataSet();
                    StringBuilder sSQL = new StringBuilder();
                    sSQL.Append("UPDATE pag_pages SET pag_deleted = 1 WHERE pag_id = " + Details.Id.ToString());
                    using (iConsulting.iCDataHandler.iCDataObject oDo = new iConsulting.iCDataHandler.iCDataObject(System.Configuration.ConfigurationManager.AppSettings["Data.DataSource"].ToString(), System.Configuration.ConfigurationManager.AppSettings["Data.ConnectionString"].ToString(), false, true, true))
                    {
                        if (!oDo.ExecuteNonQuery(sSQL.ToString()).Equals(1))
                            throw new Exception(oDo.GetError);
                    }
                    ResetThis();
                    Details = null;
                }
                catch (Exception ex)
                {
                    Error.Report(ex, FUNCTIONNAME, "");
                }
            }
            public static void ResetThis()
            {
                string FUNCTIONNAME = CLASSNAME + "[Function::ResetThis]";
                try
                {
                    CacheData.Reset("LiquidCore.Pages");
                }
                catch (Exception ex)
                {
                    Error.Report(ex, FUNCTIONNAME, "");
                }
            }
            public static void SortAll()
            {
                string FUNCTIONNAME = CLASSNAME + "[Function::SortAll]";
                try
                {
                    Int32 Order = (Int32)OrderMinMax.Min;
                    StringBuilder sSQL = new StringBuilder();
                    sSQL.Append("SELECT pag_id FROM pag_pages WHERE pag_deleted = 0 ORDER BY sit_id, sta_id, lng_id, pag_parentid, pag_order");
                    using (iConsulting.iCDataHandler.iCDataObject oDo = new iConsulting.iCDataHandler.iCDataObject(System.Configuration.ConfigurationManager.AppSettings["Data.DataSource"].ToString(), System.Configuration.ConfigurationManager.AppSettings["Data.ConnectionString"].ToString(), false, true, false))
                    {
                        DataTable dt = oDo.GetDataTable(sSQL.ToString());
                        if (oDo.HasError)
                            throw new Exception(oDo.GetError);
                        StringBuilder sSQL2 = new StringBuilder();
                        foreach (DataRow dr in dt.Rows)
                        { 
                            sSQL2.AppendLine("UPDATE pag_pages SET pag_order = " + Order.ToString() + " WHERE pag_id = " + dr["pag_id"].ToString());
                            Order = Order + (Int32)OrderMinMax.Step;
                            if (sSQL2.Length > DataBlockSize)
                            {
                                if (!(oDo.ExecuteNonQuery(sSQL2.ToString()) > 0))
                                    throw new Exception(oDo.GetError);
                                sSQL2 = new StringBuilder();
                            }
                        }
                        if (sSQL2.Length > 0)
                            if (!(oDo.ExecuteNonQuery(sSQL2.ToString()) > 0))
                                throw new Exception(oDo.GetError);
                        ResetThis();
                    }
                }
                catch (Exception ex)
                {
                    Error.Report(ex, FUNCTIONNAME, "");
                }
            }
        }
        public static class ModuleData
        {
            static string CLASSNAME = "[Namespace::LiquidCore][Class::ModuleData]";

            static Int32 DataBlockSize = Convert.ToInt32(System.Configuration.ConfigurationManager.AppSettings["Data.DataBlockSize"].ToString());

            public static void Create(ModuleModel Details)
            {
                string FUNCTIONNAME = CLASSNAME + "[Function::Create]";
                try
                {
                    ((ModuleModel)Details).Order = (Int32)OrderMinMax.Max;
                    ((ModuleModel)Details).UpdatedDate = DateTime.Now;
                    ((ModuleModel)Details).UpdatedBy = Authentication.User.Name;
                    ((ModuleModel)Details).CreatedDate = DateTime.Now;
                    ((ModuleModel)Details).CreatedBy = Authentication.User.Name;

                    System.Data.DataSet ds = new System.Data.DataSet();
                    StringBuilder sSQL = new StringBuilder();
                    sSQL.Append("INSERT INTO mod_modules (sit_id, pag_id, mde_id, sta_id, lng_id, mod_parentid, mod_order, mod_title, ");
                    sSQL.Append("mod_alias, mod_description, mod_src, mod_contentpane, mod_createddate, mod_createdby, ");
                    sSQL.Append("mod_updateddate, mod_updatedby, mod_hidden, mod_deleted) VALUES ( ");
                    sSQL.Append(Details.SitId.ToString() + ", ");
                    sSQL.Append(Details.PagId.ToString() + ", ");
                    sSQL.Append(Details.MdeId.ToString() + ", ");
                    sSQL.Append(Details.Status.ToString() + ", ");
                    sSQL.Append(Details.Language.ToString() + ", ");
                    sSQL.Append(Details.ParentId.ToString() + ", ");
                    sSQL.Append(Details.Order.ToString() + ", ");
                    sSQL.Append("'" + Details.Title + "', ");
                    sSQL.Append("'" + Details.Alias + "', ");
                    sSQL.Append("'" + Details.Description + "', ");
                    sSQL.Append("'" + Details.Src + "', ");
                    sSQL.Append("'" + Details.ContentPane + "', ");
                    sSQL.Append("'" + Details.CreatedDate.ToString() + "', ");
                    sSQL.Append("'" + Details.CreatedBy + "', ");
                    sSQL.Append("'" + Details.UpdatedDate.ToString() + "', ");
                    sSQL.Append("'" + Details.UpdatedBy + "', ");
                    sSQL.Append("" + (Details.Hidden ? "1" : "0") + ", ");
                    sSQL.Append("" + (Details.Deleted ? "1" : "0") + ")");
                    using (iConsulting.iCDataHandler.iCDataObject oDo = new iConsulting.iCDataHandler.iCDataObject(System.Configuration.ConfigurationManager.AppSettings["Data.DataSource"].ToString(), System.Configuration.ConfigurationManager.AppSettings["Data.ConnectionString"].ToString(), false, true, true))
                    {
                        if (!oDo.ExecuteNonQuery(sSQL.ToString()).Equals(1))
                            throw new Exception(oDo.GetError);
                        ((ModuleModel)Details).Id = Convert.ToInt32(oDo.GetDataTable("SELECT SCOPE_IDENTITY()").Rows[0][0]);
                    }
                    SortAll();
                }
                catch (Exception ex)
                {
                    Error.Report(ex, FUNCTIONNAME, "");
                }
            }
            public static void Load(ModelObject Details, NameValueSet DataFields)
            {
                string FUNCTIONNAME = CLASSNAME + "[Function::Load]";
                try
                {
                    System.Data.DataTable dt = null;
                    String CacheItem = "LiquidCore.Modules.Module.Id(" + DataFields["Id"].ToString() + ")";
                    if (HttpContext.Current != null) if (HttpContext.Current != null) dt = (DataTable)HttpContext.Current.Cache[CacheItem];
                    if (dt == null)
                    {
                        StringBuilder sSQL = new StringBuilder();
                        sSQL.Append("SELECT * FROM mod_modules WHERE mod_id = " + DataFields["Id"].ToString() + " AND mod_deleted = 0");
                        using (iConsulting.iCDataHandler.iCDataObject oDo = new iConsulting.iCDataHandler.iCDataObject(System.Configuration.ConfigurationManager.AppSettings["Data.DataSource"].ToString(), System.Configuration.ConfigurationManager.AppSettings["Data.ConnectionString"].ToString(), false, true))
                        {
                            dt = oDo.GetDataTable(sSQL.ToString());
                            if (oDo.HasError)
                                throw new Exception(oDo.GetError);
                        }
                        CacheData.Insert(CacheItem, dt);
                    }
                    if (dt.Rows.Count > 0)
                    {
                        System.Data.DataRow dr = dt.Rows[0];
                        ((ModuleModel)Details).Id = Convert.ToInt32(dr["mod_id"]);
                        ((ModuleModel)Details).SitId = Convert.ToInt32(dr["sit_id"]);
                        ((ModuleModel)Details).PagId = Convert.ToInt32(dr["pag_id"]);
                        ((ModuleModel)Details).MdeId = Convert.ToInt32(dr["mde_id"]);
                        ((ModuleModel)Details).Status = Convert.ToInt32(dr["sta_id"]);
                        ((ModuleModel)Details).Language = Convert.ToInt32(dr["lng_id"]);
                        ((ModuleModel)Details).ParentId = Convert.ToInt32(dr["mod_parentid"]);
                        ((ModuleModel)Details).Order = Convert.ToInt32(dr["mod_order"]);
                        ((ModuleModel)Details).Title = Convert.ToString(dr["mod_title"]);
                        ((ModuleModel)Details).Alias = Convert.ToString(dr["mod_alias"]);
                        ((ModuleModel)Details).Description = Convert.ToString(dr["mod_description"]);
                        ((ModuleModel)Details).Src = Convert.ToString(dr["mod_src"]);
                        ((ModuleModel)Details).ContentPane = Convert.ToString(dr["mod_contentpane"]);
                        ((ModuleModel)Details).CreatedDate = Convert.ToDateTime(dr["mod_createddate"]);
                        ((ModuleModel)Details).CreatedBy = Convert.ToString(dr["mod_createdby"]);
                        ((ModuleModel)Details).UpdatedDate = Convert.ToDateTime(dr["mod_updateddate"]);
                        ((ModuleModel)Details).UpdatedBy = Convert.ToString(dr["mod_updatedby"]);
                        ((ModuleModel)Details).Hidden = (dr["mod_hidden"].ToString().Equals("0") ? false : true);
                        ((ModuleModel)Details).Deleted = (dr["mod_deleted"].ToString().Equals("0") ? false : true);
                    }
                }
                catch (Exception ex)
                {
                    Error.Report(ex, FUNCTIONNAME, "");
                }
            }
            public static void LoadAll(ref List<Module> _modules)
            {
                string FUNCTIONNAME = CLASSNAME + "[Function::LoadAll]";
                try
                {
                    DataTable dt = null;
                    String CacheItem = "LiquidCore.Modules";
                    if (HttpContext.Current != null) if (HttpContext.Current != null) dt = (DataTable)HttpContext.Current.Cache[CacheItem];
                    if (dt == null)
                    {
                        StringBuilder sSQL = new StringBuilder();
                        sSQL.Append("SELECT * FROM mod_modules WHERE mod_deleted = 0 ORDER BY sit_id, pag_id, sta_id, ");
                        sSQL.Append("lng_id, mod_parentid, mod_order");
                        using (iConsulting.iCDataHandler.iCDataObject oDo = new iConsulting.iCDataHandler.iCDataObject(System.Configuration.ConfigurationManager.AppSettings["Data.DataSource"].ToString(), System.Configuration.ConfigurationManager.AppSettings["Data.ConnectionString"].ToString(), false, true))
                        {
                            dt = oDo.GetDataTable(sSQL.ToString());
                            if (oDo.HasError)
                                throw new Exception(oDo.GetError);
                        }
                        CacheData.Insert(CacheItem, dt);
                    }
                    foreach (DataRow dr in dt.Rows)
                    {
                        Module m = new Module(Convert.ToInt32(dr["mod_id"].ToString()));
                        _modules.Add(m);
                    }
                }
                catch (Exception ex)
                {
                    Error.Report(ex, FUNCTIONNAME, "");
                }
            }
            public static void LoadAll(ref List<Module> _modules, NameValueSet DataFields)
            {
                string FUNCTIONNAME = CLASSNAME + "[Function::LoadAll]";
                try
                {
                    String PrimaryKey = String.Empty;
                    String CacheItem = String.Empty;
                    StringBuilder sSQL = new StringBuilder();
                    if (DataFields["SitId"] != null && DataFields["PagId"] != null && DataFields["ParentId"] != null)
                    {
                        String SitId = DataFields["SitId"].ToString();
                        String PagId = DataFields["PagId"].ToString();
                        String ParentId = DataFields["ParentId"].ToString();
                        CacheItem = "LiquidCore.Modules.PrimaryKeys(SitId(" + SitId + "), PagId(" + PagId + "), ParentId(" + ParentId + "))";
                        sSQL.Append("SELECT * FROM mod_modules WHERE sit_id = " + SitId + " AND pag_id = " + PagId + " AND mod_parentid = " + ParentId + " AND mod_deleted = 0 ORDER BY sit_id, pag_id, sta_id, lng_id, mod_parentid, mod_order");
                    }
                    else if (DataFields["Alias"] != null)
                    {
                        PrimaryKey = DataFields["Alias"].ToString();
                        CacheItem = "LiquidCore.Modules.PrimaryKey(Alias(" + PrimaryKey + "))";
                        sSQL.Append("SELECT * FROM mod_modules WHERE mod_alias = '" + PrimaryKey + "' AND mod_deleted = 0 ORDER BY sit_id, pag_id, sta_id, lng_id, mod_parentid, mod_order");
                    }
                    else
                    {
                        LoadAll(ref _modules);
                        return;
                    }
                    DataTable dt = null;
                    if (HttpContext.Current != null) if (HttpContext.Current != null) dt = (DataTable)HttpContext.Current.Cache[CacheItem];
                    if (dt == null)
                    {
                        using (iConsulting.iCDataHandler.iCDataObject oDo = new iConsulting.iCDataHandler.iCDataObject(System.Configuration.ConfigurationManager.AppSettings["Data.DataSource"].ToString(), System.Configuration.ConfigurationManager.AppSettings["Data.ConnectionString"].ToString(), false, true))
                        {
                            dt = oDo.GetDataTable(sSQL.ToString());
                            if (oDo.HasError)
                                throw new Exception(oDo.GetError);
                        }
                        CacheData.Insert(CacheItem, dt);
                    }
                    foreach (DataRow dr in dt.Rows)
                    {
                        Module m = new Module(Convert.ToInt32(dr["mod_id"].ToString()));
                        _modules.Add(m);
                    }
                }
                catch (Exception ex)
                {
                    Error.Report(ex, FUNCTIONNAME, "");
                }
            }
            public static void Update(ModuleModel Details)
            {
                string FUNCTIONNAME = CLASSNAME + "[Function::Update]";
                try
                {
                    ((ModuleModel)Details).UpdatedDate = DateTime.Now;
                    ((ModuleModel)Details).UpdatedBy = Authentication.User.Name;

                    System.Data.DataSet ds = new System.Data.DataSet();
                    StringBuilder sSQL = new StringBuilder();
                    sSQL.Append("UPDATE mod_modules SET ");
                    sSQL.Append("sit_id = " + Details.SitId.ToString() + ", ");
                    sSQL.Append("pag_id = " + Details.SitId.ToString() + ", ");
                    sSQL.Append("mde_id = " + Details.SitId.ToString() + ", ");
                    sSQL.Append("sta_id = " + Details.Status.ToString() + ", ");
                    sSQL.Append("lng_id = " + Details.Language.ToString() + ", ");
                    sSQL.Append("mod_parentid = " + Details.ParentId.ToString() + ", ");
                    sSQL.Append("mod_order = " + Details.Order.ToString() + ", ");
                    sSQL.Append("mod_title = '" + Details.Title + "', ");
                    sSQL.Append("mod_alias = '" + Details.Alias + "', ");
                    sSQL.Append("mod_description = '" + Details.Description + "', ");
                    sSQL.Append("mod_src = '" + Details.Src + "', ");
                    sSQL.Append("mod_contentpane = '" + Details.ContentPane + "', ");
                    sSQL.Append("mod_createddate = '" + Details.CreatedDate.ToString() + "', ");
                    sSQL.Append("mod_createdby = '" + Details.CreatedBy + "', ");
                    sSQL.Append("mod_updateddate = '" + Details.UpdatedDate.ToString() + "', ");
                    sSQL.Append("mod_updatedby = '" + Details.UpdatedBy + "', ");
                    sSQL.Append("mod_hidden = " + (!Details.Hidden ? "0" : "1") + ", ");
                    sSQL.Append("mod_deleted = " + (!Details.Deleted ? "0" : "1") + " ");
                    sSQL.Append("WHERE mod_id = " + Details.Id.ToString());
                    using (iConsulting.iCDataHandler.iCDataObject oDo = new iConsulting.iCDataHandler.iCDataObject(System.Configuration.ConfigurationManager.AppSettings["Data.DataSource"].ToString(), System.Configuration.ConfigurationManager.AppSettings["Data.ConnectionString"].ToString(), false, true, true))
                    {
                        if (!oDo.ExecuteNonQuery(sSQL.ToString()).Equals(1))
                            throw new Exception(oDo.GetError);
                    }
                    SortAll();
                }
                catch (Exception ex)
                {
                    Error.Report(ex, FUNCTIONNAME, "");
                }
            }
            public static void Delete(ModuleModel Details)
            {
                string FUNCTIONNAME = CLASSNAME + "[Function::Delete]";
                try
                {
                    System.Data.DataSet ds = new System.Data.DataSet();
                    StringBuilder sSQL = new StringBuilder();
                    sSQL.Append("UPDATE mod_modules SET mod_deleted = 1 WHERE mod_id = " + Details.Id.ToString());
                    using (iConsulting.iCDataHandler.iCDataObject oDo = new iConsulting.iCDataHandler.iCDataObject(System.Configuration.ConfigurationManager.AppSettings["Data.DataSource"].ToString(), System.Configuration.ConfigurationManager.AppSettings["Data.ConnectionString"].ToString(), false, true, true))
                    {
                        if (!oDo.ExecuteNonQuery(sSQL.ToString()).Equals(1))
                            throw new Exception(oDo.GetError);
                    }
                    ResetThis();
                    Details = null;
                }
                catch (Exception ex)
                {
                    Error.Report(ex, FUNCTIONNAME, "");
                }
            }
            public static void ResetThis()
            {
                string FUNCTIONNAME = CLASSNAME + "[Function::ResetThis]";
                try
                {
                    CacheData.Reset("LiquidCore.Modules");
                }
                catch (Exception ex)
                {
                    Error.Report(ex, FUNCTIONNAME, "");
                }
            }
            public static void SortAll()
            {
                string FUNCTIONNAME = CLASSNAME + "[Function::SortAll]";
                try
                {
                    Int32 Order = (Int32)OrderMinMax.Min;
                    StringBuilder sSQL = new StringBuilder();
                    sSQL.Append("SELECT mod_id FROM mod_modules WHERE mod_deleted = 0 ORDER BY sit_id, pag_id, sta_id, lng_id, mod_parentid, mod_order");
                    using (iConsulting.iCDataHandler.iCDataObject oDo = new iConsulting.iCDataHandler.iCDataObject(System.Configuration.ConfigurationManager.AppSettings["Data.DataSource"].ToString(), System.Configuration.ConfigurationManager.AppSettings["Data.ConnectionString"].ToString(), false, true, false))
                    {
                        DataTable dt = oDo.GetDataTable(sSQL.ToString());
                        if (oDo.HasError)
                            throw new Exception(oDo.GetError);
                        StringBuilder sSQL2 = new StringBuilder();
                        foreach (DataRow dr in dt.Rows)
                        {
                            sSQL2.AppendLine("UPDATE mod_modules SET mod_order = " + Order.ToString() + " WHERE mod_id = " + dr["mod_id"].ToString());
                            Order = Order + (Int32)OrderMinMax.Step;
                            if (sSQL2.Length > DataBlockSize)
                            {
                                if (!(oDo.ExecuteNonQuery(sSQL2.ToString()) > 0))
                                    throw new Exception(oDo.GetError);
                                sSQL2 = new StringBuilder();
                            }
                        }
                        if (sSQL2.Length > 0)
                            if (!(oDo.ExecuteNonQuery(sSQL2.ToString()) > 0))
                                throw new Exception(oDo.GetError);
                        ResetThis();
                    }
                }
                catch (Exception ex)
                {
                    Error.Report(ex, FUNCTIONNAME, "");
                }
            }
        }
        public static class ObjectData
        {
            static string CLASSNAME = "[Namespace::LiquidCore][Class::ObjectData]";

            static Int32 DataBlockSize = Convert.ToInt32(System.Configuration.ConfigurationManager.AppSettings["Data.DataBlockSize"].ToString());

            public static void Create(ObjectModel Details)
            {
                string FUNCTIONNAME = CLASSNAME + "[Function::Create]";
                try
                {
                    ((ObjectModel)Details).Order = (Int32)OrderMinMax.Max;
                    ((ObjectModel)Details).UpdatedDate = DateTime.Now;
                    ((ObjectModel)Details).UpdatedBy = Authentication.User.Name;
                    ((ObjectModel)Details).CreatedDate = DateTime.Now;
                    ((ObjectModel)Details).CreatedBy = Authentication.User.Name;

                    System.Data.DataSet ds = new System.Data.DataSet();
                    StringBuilder sSQL = new StringBuilder();
                    sSQL.Append("INSERT INTO obd_objectdata (sit_id, pag_id, mod_id, sta_id, lng_id, obd_parentid, obd_order, obd_type, obd_title, ");
                    sSQL.Append("obd_alias, obd_description, obd_varchar1, obd_varchar2, obd_varchar3, obd_varchar4, obd_varchar5, ");
                    sSQL.Append("obd_varchar6, obd_varchar7, obd_varchar8, obd_varchar9, obd_varchar10, obd_createddate, obd_createdby, ");
                    sSQL.Append("obd_updateddate, obd_updatedby, obd_hidden, obd_deleted) VALUES ( ");
                    sSQL.Append(Details.SitId.ToString() + ", ");
                    sSQL.Append(Details.PagId.ToString() + ", ");
                    sSQL.Append(Details.ModId.ToString() + ", ");
                    sSQL.Append(Details.Status.ToString() + ", ");
                    sSQL.Append(Details.Language.ToString() + ", ");
                    sSQL.Append(Details.ParentId.ToString() + ", ");
                    sSQL.Append(Details.Order.ToString() + ", ");
                    sSQL.Append(Details.Type.ToString() + ", ");
                    sSQL.Append("'" + Details.Title + "', ");
                    sSQL.Append("'" + Details.Alias + "', ");
                    sSQL.Append("'" + Details.Description + "', ");
                    sSQL.Append("'" + Details.Value1 + "', ");
                    sSQL.Append("'" + Details.Value2 + "', ");
                    sSQL.Append("'" + Details.Value3 + "', ");
                    sSQL.Append("'" + Details.Value4 + "', ");
                    sSQL.Append("'" + Details.Value5 + "', ");
                    sSQL.Append("'" + Details.Value6 + "', ");
                    sSQL.Append("'" + Details.Value7 + "', ");
                    sSQL.Append("'" + Details.Value8 + "', ");
                    sSQL.Append("'" + Details.Value9 + "', ");
                    sSQL.Append("'" + Details.Value10 + "', ");
                    sSQL.Append("'" + Details.CreatedDate.ToString() + "', ");
                    sSQL.Append("'" + Details.CreatedBy + "', ");
                    sSQL.Append("'" + Details.UpdatedDate.ToString() + "', ");
                    sSQL.Append("'" + Details.UpdatedBy + "', ");
                    sSQL.Append("" + (Details.Hidden ? "1" : "0") + ", ");
                    sSQL.Append("" + (Details.Deleted ? "1" : "0") + ")");
                    using (iConsulting.iCDataHandler.iCDataObject oDo = new iConsulting.iCDataHandler.iCDataObject(System.Configuration.ConfigurationManager.AppSettings["Data.DataSource"].ToString(), System.Configuration.ConfigurationManager.AppSettings["Data.ConnectionString"].ToString(), false, true, true))
                    {
                        if (!oDo.ExecuteNonQuery(sSQL.ToString()).Equals(1))
                            throw new Exception(oDo.GetError);
                        ((ObjectModel)Details).Id = Convert.ToInt32(oDo.GetDataTable("SELECT SCOPE_IDENTITY()").Rows[0][0]);
                    }
                    SortAll();
                }
                catch (Exception ex)
                {
                    Error.Report(ex, FUNCTIONNAME, "");
                }
            }
            public static void Load(ModelObject Details, NameValueSet DataFields)
            {
                string FUNCTIONNAME = CLASSNAME + "[Function::Load]";
                try
                {
                    System.Data.DataTable dt = null;
                    String CacheItem = "LiquidCore.Objects.Object.Id(" + DataFields["Id"].ToString() + ")";
                    if (HttpContext.Current != null) if (HttpContext.Current != null) dt = (DataTable)HttpContext.Current.Cache[CacheItem];
                    if (dt == null)
                    {
                        StringBuilder sSQL = new StringBuilder();
                        sSQL.Append("SELECT * FROM obd_objectdata WHERE obd_id = " + DataFields["Id"].ToString() + " AND obd_deleted = 0");
                        using (iConsulting.iCDataHandler.iCDataObject oDo = new iConsulting.iCDataHandler.iCDataObject(System.Configuration.ConfigurationManager.AppSettings["Data.DataSource"].ToString(), System.Configuration.ConfigurationManager.AppSettings["Data.ConnectionString"].ToString(), false, true))
                        {
                            dt = oDo.GetDataTable(sSQL.ToString());
                            if (oDo.HasError)
                                throw new Exception(oDo.GetError);
                        }
                        CacheData.Insert(CacheItem, dt);
                    }
                    if (dt.Rows.Count > 0)
                    {
                        System.Data.DataRow dr = dt.Rows[0];
                        ((ObjectModel)Details).Id = Convert.ToInt32(dr["obd_id"]);
                        ((ObjectModel)Details).SitId = Convert.ToInt32(dr["sit_id"]);
                        ((ObjectModel)Details).PagId = Convert.ToInt32(dr["pag_id"]);
                        ((ObjectModel)Details).ModId = Convert.ToInt32(dr["mod_id"]);
                        ((ObjectModel)Details).Status = Convert.ToInt32(dr["sta_id"]);
                        ((ObjectModel)Details).Language = Convert.ToInt32(dr["lng_id"]);
                        ((ObjectModel)Details).ParentId = Convert.ToInt32(dr["obd_parentid"]);
                        ((ObjectModel)Details).Order = Convert.ToInt32(dr["obd_order"]);
                        ((ObjectModel)Details).Type = Convert.ToInt32(dr["obd_type"]);
                        ((ObjectModel)Details).Title = Convert.ToString(dr["obd_title"]);
                        ((ObjectModel)Details).Alias = Convert.ToString(dr["obd_alias"]);
                        ((ObjectModel)Details).Description = Convert.ToString(dr["obd_description"]);
                        ((ObjectModel)Details).Value1 = Convert.ToString(dr["obd_value1"]);
                        ((ObjectModel)Details).Value2 = Convert.ToString(dr["obd_value2"]);
                        ((ObjectModel)Details).Value3 = Convert.ToString(dr["obd_value3"]);
                        ((ObjectModel)Details).Value4 = Convert.ToString(dr["obd_value4"]);
                        ((ObjectModel)Details).Value5 = Convert.ToString(dr["obd_value5"]);
                        ((ObjectModel)Details).Value6 = Convert.ToString(dr["obd_value6"]);
                        ((ObjectModel)Details).Value7 = Convert.ToString(dr["obd_value7"]);
                        ((ObjectModel)Details).Value8 = Convert.ToString(dr["obd_value8"]);
                        ((ObjectModel)Details).Value9 = Convert.ToString(dr["obd_value9"]);
                        ((ObjectModel)Details).Value10 = Convert.ToString(dr["obd_value10"]);
                        ((ObjectModel)Details).CreatedDate = Convert.ToDateTime(dr["obd_createddate"]);
                        ((ObjectModel)Details).CreatedBy = Convert.ToString(dr["obd_createdby"]);
                        ((ObjectModel)Details).UpdatedDate = Convert.ToDateTime(dr["obd_updateddate"]);
                        ((ObjectModel)Details).UpdatedBy = Convert.ToString(dr["obd_updatedby"]);
                        ((ObjectModel)Details).Hidden = (dr["obd_hidden"].ToString().Equals("0") ? false : true);
                        ((ObjectModel)Details).Deleted = (dr["obd_deleted"].ToString().Equals("0") ? false : true);
                    }
                }
                catch (Exception ex)
                {
                    Error.Report(ex, FUNCTIONNAME, "");
                }
            }
            public static void LoadAll(ref List<Object> _objects)
            {
                string FUNCTIONNAME = CLASSNAME + "[Function::LoadAll]";
                try
                {
                    DataTable dt = null;
                    String CacheItem = "LiquidCore.Objects";
                    if (HttpContext.Current != null) if (HttpContext.Current != null) dt = (DataTable)HttpContext.Current.Cache[CacheItem];
                    if (dt == null)
                    {
                        StringBuilder sSQL = new StringBuilder();
                        sSQL.Append("SELECT * FROM obd_objectdata WHERE obd_deleted = 0 ORDER BY sit_id, pag_id, mod_id, sta_id, ");
                        sSQL.Append("lng_id, obd_parentid, obd_order");
                        using (iConsulting.iCDataHandler.iCDataObject oDo = new iConsulting.iCDataHandler.iCDataObject(System.Configuration.ConfigurationManager.AppSettings["Data.DataSource"].ToString(), System.Configuration.ConfigurationManager.AppSettings["Data.ConnectionString"].ToString(), false, true))
                        {
                            dt = oDo.GetDataTable(sSQL.ToString());
                            if (oDo.HasError)
                                throw new Exception(oDo.GetError);
                        }
                        CacheData.Insert(CacheItem, dt);
                    }
                    foreach (DataRow dr in dt.Rows)
                    {
                        Object o = new Object(Convert.ToInt32(dr["obd_id"].ToString()));
                        _objects.Add(o);
                    }
                }
                catch (Exception ex)
                {
                    Error.Report(ex, FUNCTIONNAME, "");
                }
            }
            public static void LoadAll(ref List<Object> _objects, NameValueSet DataFields)
            {
                string FUNCTIONNAME = CLASSNAME + "[Function::LoadAll]";
                try
                {
                    String PrimaryKey = String.Empty;
                    String CacheItem = String.Empty;
                    StringBuilder sSQL = new StringBuilder();
                    if (DataFields["SitId"] != null && DataFields["PagId"] != null && DataFields["ParentId"] != null && DataFields["ModId"] != null)
                    {
                        String SitId = DataFields["SitId"].ToString();
                        String PagId = DataFields["PagId"].ToString();
                        String ModId = DataFields["ModId"].ToString();
                        String ParentId = DataFields["ParentId"].ToString();
                        CacheItem = "LiquidCore.Objects.PrimaryKeys(SitId(" + SitId + "), PagId(" + PagId + "), ModId(" + ModId + "), ParentId(" + ParentId + "))";
                        sSQL.Append("SELECT * FROM obd_objectdata WHERE sit_id = " + SitId + " AND pag_id = " + PagId + " AND mod_id = " + ModId + " AND obd_parentid = " + ParentId + " AND obd_deleted = 0 ORDER BY sit_id, pag_id, mod_id, sta_id, lng_id, obd_parentid, obd_order");
                    }
                    else if (DataFields["Alias"] != null)
                    {
                        PrimaryKey = DataFields["Alias"].ToString();
                        CacheItem = "LiquidCore.Objects.PrimaryKey(Alias(" + PrimaryKey + "))";
                        sSQL.Append("SELECT * FROM obd_objectdata WHERE obd_alias = '" + PrimaryKey + "' AND obd_deleted = 0 ORDER BY sit_id, pag_id, mod_id, sta_id, lng_id, obd_parentid, obd_order");
                    }
                    else
                    {
                        LoadAll(ref _objects);
                        return;
                    }
                    DataTable dt = null;
                    if (HttpContext.Current != null) if (HttpContext.Current != null) dt = (DataTable)HttpContext.Current.Cache[CacheItem];
                    if (dt == null)
                    {
                        using (iConsulting.iCDataHandler.iCDataObject oDo = new iConsulting.iCDataHandler.iCDataObject(System.Configuration.ConfigurationManager.AppSettings["Data.DataSource"].ToString(), System.Configuration.ConfigurationManager.AppSettings["Data.ConnectionString"].ToString(), false, true))
                        {
                            dt = oDo.GetDataTable(sSQL.ToString());
                            if (oDo.HasError)
                                throw new Exception(oDo.GetError);
                        }
                        CacheData.Insert(CacheItem, dt);
                    }
                    foreach (DataRow dr in dt.Rows)
                    {
                        Object o = new Object(Convert.ToInt32(dr["obd_id"].ToString()));
                        _objects.Add(o);
                    }
                }
                catch (Exception ex)
                {
                    Error.Report(ex, FUNCTIONNAME, "");
                }
            }
            public static void Update(ObjectModel Details)
            {
                string FUNCTIONNAME = CLASSNAME + "[Function::Update]";
                try
                {
                    ((ObjectModel)Details).UpdatedDate = DateTime.Now;
                    ((ObjectModel)Details).UpdatedBy = Authentication.User.Name;

                    System.Data.DataSet ds = new System.Data.DataSet();
                    StringBuilder sSQL = new StringBuilder();
                    sSQL.Append("UPDATE obd_objectdata SET ");
                    sSQL.Append("sit_id = " + Details.SitId.ToString() + ", ");
                    sSQL.Append("pag_id = " + Details.SitId.ToString() + ", ");
                    sSQL.Append("mod_id = " + Details.SitId.ToString() + ", ");
                    sSQL.Append("sta_id = " + Details.Status.ToString() + ", ");
                    sSQL.Append("lng_id = " + Details.Language.ToString() + ", ");
                    sSQL.Append("obd_parentid = " + Details.ParentId.ToString() + ", ");
                    sSQL.Append("obd_order = " + Details.Order.ToString() + ", ");
                    sSQL.Append("obd_type = " + Details.Type.ToString() + ", ");
                    sSQL.Append("obd_title = '" + Details.Title + "', ");
                    sSQL.Append("obd_alias = '" + Details.Alias + "', ");
                    sSQL.Append("obd_description = '" + Details.Description + "', ");
                    sSQL.Append("obd_varchar1 = '" + Details.Value1 + "', ");
                    sSQL.Append("obd_varchar2 = '" + Details.Value2 + "', ");
                    sSQL.Append("obd_varchar3 = '" + Details.Value3 + "', ");
                    sSQL.Append("obd_varchar4 = '" + Details.Value4 + "', ");
                    sSQL.Append("obd_varchar5 = '" + Details.Value5 + "', ");
                    sSQL.Append("obd_varchar6 = '" + Details.Value6 + "', ");
                    sSQL.Append("obd_varchar7 = '" + Details.Value7 + "', ");
                    sSQL.Append("obd_varchar8 = '" + Details.Value8 + "', ");
                    sSQL.Append("obd_varchar9 = '" + Details.Value9 + "', ");
                    sSQL.Append("obd_varchar10 = '" + Details.Value10 + "', ");
                    sSQL.Append("obd_createddate = '" + Details.CreatedDate.ToString() + "', ");
                    sSQL.Append("obd_createdby = '" + Details.CreatedBy + "', ");
                    sSQL.Append("obd_updateddate = '" + Details.UpdatedDate.ToString() + "', ");
                    sSQL.Append("obd_updatedby = '" + Details.UpdatedBy + "', ");
                    sSQL.Append("obd_hidden = " + (!Details.Hidden ? "0" : "1") + ", ");
                    sSQL.Append("obd_deleted = " + (!Details.Deleted ? "0" : "1") + " ");
                    sSQL.Append("WHERE obd_id = " + Details.Id.ToString());
                    using (iConsulting.iCDataHandler.iCDataObject oDo = new iConsulting.iCDataHandler.iCDataObject(System.Configuration.ConfigurationManager.AppSettings["Data.DataSource"].ToString(), System.Configuration.ConfigurationManager.AppSettings["Data.ConnectionString"].ToString(), false, true, true))
                    {
                        if (!oDo.ExecuteNonQuery(sSQL.ToString()).Equals(1))
                            throw new Exception(oDo.GetError);
                    }
                    SortAll();
                }
                catch (Exception ex)
                {
                    Error.Report(ex, FUNCTIONNAME, "");
                }
            }
            public static void Delete(ObjectModel Details)
            {
                string FUNCTIONNAME = CLASSNAME + "[Function::Delete]";
                try
                {
                    System.Data.DataSet ds = new System.Data.DataSet();
                    StringBuilder sSQL = new StringBuilder();
                    sSQL.Append("UPDATE obd_objectdata SET obd_deleted = 1 WHERE obd_id = " + Details.Id.ToString());
                    using (iConsulting.iCDataHandler.iCDataObject oDo = new iConsulting.iCDataHandler.iCDataObject(System.Configuration.ConfigurationManager.AppSettings["Data.DataSource"].ToString(), System.Configuration.ConfigurationManager.AppSettings["Data.ConnectionString"].ToString(), false, true, true))
                    {
                        if (!oDo.ExecuteNonQuery(sSQL.ToString()).Equals(1))
                            throw new Exception(oDo.GetError);
                    }
                    ResetThis();
                    Details = null;
                }
                catch (Exception ex)
                {
                    Error.Report(ex, FUNCTIONNAME, "");
                }
            }
            public static void ResetThis()
            {
                string FUNCTIONNAME = CLASSNAME + "[Function::ResetThis]";
                try
                {
                    CacheData.Reset("LiquidCore.Objects");
                }
                catch (Exception ex)
                {
                    Error.Report(ex, FUNCTIONNAME, "");
                }
            }
            public static void SortAll()
            {
                string FUNCTIONNAME = CLASSNAME + "[Function::SortAll]";
                try
                {
                    Int32 Order = (Int32)OrderMinMax.Min;
                    StringBuilder sSQL = new StringBuilder();
                    sSQL.Append("SELECT obd_id FROM obd_objectdata WHERE obd_deleted = 0 ORDER BY sit_id, pag_id, mod_id, sta_id, lng_id, obd_parentid, obd_order");
                    using (iConsulting.iCDataHandler.iCDataObject oDo = new iConsulting.iCDataHandler.iCDataObject(System.Configuration.ConfigurationManager.AppSettings["Data.DataSource"].ToString(), System.Configuration.ConfigurationManager.AppSettings["Data.ConnectionString"].ToString(), false, true, false))
                    {
                        DataTable dt = oDo.GetDataTable(sSQL.ToString());
                        if (oDo.HasError)
                            throw new Exception(oDo.GetError);
                        StringBuilder sSQL2 = new StringBuilder();
                        foreach (DataRow dr in dt.Rows)
                        {
                            sSQL2.AppendLine("UPDATE obd_objectdata SET obd_order = " + Order.ToString() + " WHERE obd_id = " + dr["obd_id"].ToString());
                            Order = Order + (Int32)OrderMinMax.Step;
                            if (sSQL2.Length > DataBlockSize)
                            {
                                if (!(oDo.ExecuteNonQuery(sSQL2.ToString()) > 0))
                                    throw new Exception(oDo.GetError);
                                sSQL2 = new StringBuilder();
                            }
                        }
                        if (sSQL2.Length > 0)
                            if (!(oDo.ExecuteNonQuery(sSQL2.ToString()) > 0))
                                throw new Exception(oDo.GetError);
                        ResetThis();
                    }
                }
                catch (Exception ex)
                {
                    Error.Report(ex, FUNCTIONNAME, "");
                }
            }
        }
        public static class ModelData
        {
            static string CLASSNAME = "[Namespace::LiquidCore][Class::ModelData]";

            static Int32 DataBlockSize = Convert.ToInt32(System.Configuration.ConfigurationManager.AppSettings["Data.DataBlockSize"].ToString());

            public static void Create(ModelModel Details)
            {
                string FUNCTIONNAME = CLASSNAME + "[Function::Create]";
                try
                {
                    ((ModelModel)Details).Order = (Int32)OrderMinMax.Max;
                    ((ModelModel)Details).UpdatedDate = DateTime.Now;
                    ((ModelModel)Details).UpdatedBy = Authentication.User.Name;
                    ((ModelModel)Details).CreatedDate = DateTime.Now;
                    ((ModelModel)Details).CreatedBy = Authentication.User.Name;

                    System.Data.DataSet ds = new System.Data.DataSet();
                    StringBuilder sSQL = new StringBuilder();
                    sSQL.Append("INSERT INTO mdl_model (sit_id, sta_id, lng_id, mdl_parentid, mdl_order, mdl_title, ");
                    sSQL.Append("mdl_alias, mdl_description, mdl_createddate, mdl_createdby, ");
                    sSQL.Append("mdl_updateddate, mdl_updatedby, mdl_hidden, mdl_deleted) VALUES ( ");
                    sSQL.Append(Details.SitId.ToString() + ", ");
                    sSQL.Append(Details.Status.ToString() + ", ");
                    sSQL.Append(Details.Language.ToString() + ", ");
                    sSQL.Append(Details.ParentId.ToString() + ", ");
                    sSQL.Append(Details.Order.ToString() + ", ");
                    sSQL.Append("'" + Details.Title + "', ");
                    sSQL.Append("'" + Details.Alias + "', ");
                    sSQL.Append("'" + Details.Description + "', ");
                    sSQL.Append("'" + Details.CreatedDate.ToString() + "', ");
                    sSQL.Append("'" + Details.CreatedBy + "', ");
                    sSQL.Append("'" + Details.UpdatedDate.ToString() + "', ");
                    sSQL.Append("'" + Details.UpdatedBy + "', ");
                    sSQL.Append("" + (Details.Hidden ? "1" : "0") + ", ");
                    sSQL.Append("" + (Details.Deleted ? "1" : "0") + ")");
                    using (iConsulting.iCDataHandler.iCDataObject oDo = new iConsulting.iCDataHandler.iCDataObject(System.Configuration.ConfigurationManager.AppSettings["Data.DataSource"].ToString(), System.Configuration.ConfigurationManager.AppSettings["Data.ConnectionString"].ToString(), false, true, true))
                    {
                        if (!oDo.ExecuteNonQuery(sSQL.ToString()).Equals(1))
                            throw new Exception(oDo.GetError);
                        ((ModelModel)Details).Id = Convert.ToInt32(oDo.GetDataTable("SELECT SCOPE_IDENTITY()").Rows[0][0]);
                    }
                    SortAll();
                }
                catch (Exception ex)
                {
                    Error.Report(ex, FUNCTIONNAME, "");
                }
            }
            public static void Load(ModelObject Details, NameValueSet DataFields)
            {
                string FUNCTIONNAME = CLASSNAME + "[Function::Load]";
                try
                {
                    System.Data.DataTable dt = null;
                    String CacheItem = "LiquidCore.Models.Model.Id(" + DataFields["Id"].ToString() + ")";
                    if (HttpContext.Current != null) if (HttpContext.Current != null) dt = (DataTable)HttpContext.Current.Cache[CacheItem];
                    if (dt == null)
                    {
                        StringBuilder sSQL = new StringBuilder();
                        sSQL.Append("SELECT * FROM mdl_model WHERE mdl_id = " + DataFields["Id"].ToString() + " AND mdl_deleted = 0");
                        using (iConsulting.iCDataHandler.iCDataObject oDo = new iConsulting.iCDataHandler.iCDataObject(System.Configuration.ConfigurationManager.AppSettings["Data.DataSource"].ToString(), System.Configuration.ConfigurationManager.AppSettings["Data.ConnectionString"].ToString(), false, true))
                        {
                            dt = oDo.GetDataTable(sSQL.ToString());
                            if (oDo.HasError)
                                throw new Exception(oDo.GetError);
                        }
                        CacheData.Insert(CacheItem, dt);
                    }
                    if (dt.Rows.Count > 0)
                    {
                        System.Data.DataRow dr = dt.Rows[0];
                        ((ModelModel)Details).Id = Convert.ToInt32(dr["mdl_id"]);
                        ((ModelModel)Details).SitId = Convert.ToInt32(dr["sit_id"]);
                        ((ModelModel)Details).Status = Convert.ToInt32(dr["sta_id"]);
                        ((ModelModel)Details).Language = Convert.ToInt32(dr["lng_id"]);
                        ((ModelModel)Details).ParentId = Convert.ToInt32(dr["mdl_parentid"]);
                        ((ModelModel)Details).Order = Convert.ToInt32(dr["mdl_order"]);
                        ((ModelModel)Details).Title = Convert.ToString(dr["mdl_title"]);
                        ((ModelModel)Details).Alias = Convert.ToString(dr["mdl_alias"]);
                        ((ModelModel)Details).Description = Convert.ToString(dr["mdl_description"]);
                        ((ModelModel)Details).CreatedDate = Convert.ToDateTime(dr["mdl_createddate"]);
                        ((ModelModel)Details).CreatedBy = Convert.ToString(dr["mdl_createdby"]);
                        ((ModelModel)Details).UpdatedDate = Convert.ToDateTime(dr["mdl_updateddate"]);
                        ((ModelModel)Details).UpdatedBy = Convert.ToString(dr["mdl_updatedby"]);
                        ((ModelModel)Details).Hidden = (dr["mdl_hidden"].ToString().Equals("0") ? false : true);
                        ((ModelModel)Details).Deleted = (dr["mdl_deleted"].ToString().Equals("0") ? false : true);
                    }
                }
                catch (Exception ex)
                {
                    Error.Report(ex, FUNCTIONNAME, "");
                }
            }
            public static void LoadAll(ref List<Model> _models)
            {
                string FUNCTIONNAME = CLASSNAME + "[Function::LoadAll]";
                try
                {
                    DataTable dt = null;
                    String CacheItem = "LiquidCore.Models";
                    if (HttpContext.Current != null) if (HttpContext.Current != null) dt = (DataTable)HttpContext.Current.Cache[CacheItem];
                    if (dt == null)
                    {
                        StringBuilder sSQL = new StringBuilder();
                        sSQL.Append("SELECT * FROM mdl_model WHERE mdl_deleted = 0 ORDER BY sit_id, sta_id, ");
                        sSQL.Append("lng_id, mdl_parentid, mdl_order");
                        using (iConsulting.iCDataHandler.iCDataObject oDo = new iConsulting.iCDataHandler.iCDataObject(System.Configuration.ConfigurationManager.AppSettings["Data.DataSource"].ToString(), System.Configuration.ConfigurationManager.AppSettings["Data.ConnectionString"].ToString(), false, true))
                        {
                            dt = oDo.GetDataTable(sSQL.ToString());
                            if (oDo.HasError)
                                throw new Exception(oDo.GetError);
                        }
                        CacheData.Insert(CacheItem, dt);
                    }
                    foreach (DataRow dr in dt.Rows)
                    {
                        Model m = new Model(Convert.ToInt32(dr["mdl_id"].ToString()));
                        _models.Add(m);
                    }
                }
                catch (Exception ex)
                {
                    Error.Report(ex, FUNCTIONNAME, "");
                }
            }
            public static void LoadAll(ref List<Model> _models, NameValueSet DataFields)
            {
                string FUNCTIONNAME = CLASSNAME + "[Function::LoadAll]";
                try
                {
                    String PrimaryKey = String.Empty;
                    String CacheItem = String.Empty;
                    StringBuilder sSQL = new StringBuilder();
                    if (DataFields["SitId"] != null && DataFields["ParentId"] != null)
                    {
                        String SitId = DataFields["SitId"].ToString();
                        String ParentId = DataFields["ParentId"].ToString();
                        CacheItem = "LiquidCore.Models.PrimaryKeys(SitId(" + SitId + "), ParentId(" + ParentId + "))";
                        sSQL.Append("SELECT * FROM mdl_model WHERE sit_id = " + SitId + " AND mdl_parentid = " + ParentId + " AND mdl_deleted = 0 ORDER BY sit_id, sta_id, lng_id, mdl_parentid, mdl_order");
                    }
                    else
                    {
                        LoadAll(ref _models);
                        return;
                    }
                    DataTable dt = null;
                    if (HttpContext.Current != null) if (HttpContext.Current != null) dt = (DataTable)HttpContext.Current.Cache[CacheItem];
                    if (dt == null)
                    {
                        using (iConsulting.iCDataHandler.iCDataObject oDo = new iConsulting.iCDataHandler.iCDataObject(System.Configuration.ConfigurationManager.AppSettings["Data.DataSource"].ToString(), System.Configuration.ConfigurationManager.AppSettings["Data.ConnectionString"].ToString(), false, true))
                        {
                            dt = oDo.GetDataTable(sSQL.ToString());
                            if (oDo.HasError)
                                throw new Exception(oDo.GetError);
                        }
                        CacheData.Insert(CacheItem, dt);
                    }
                    foreach (DataRow dr in dt.Rows)
                    {
                        Model m = new Model(Convert.ToInt32(dr["mdl_id"].ToString()));
                        _models.Add(m);
                    }
                }
                catch (Exception ex)
                {
                    Error.Report(ex, FUNCTIONNAME, "");
                }
            }
            public static void Update(ModelModel Details)
            {
                string FUNCTIONNAME = CLASSNAME + "[Function::Update]";
                try
                {
                    ((ModelModel)Details).UpdatedDate = DateTime.Now;
                    ((ModelModel)Details).UpdatedBy = Authentication.User.Name;

                    System.Data.DataSet ds = new System.Data.DataSet();
                    StringBuilder sSQL = new StringBuilder();
                    sSQL.Append("UPDATE mdl_model SET ");
                    sSQL.Append("sit_id = " + Details.SitId.ToString() + ", ");
                    sSQL.Append("sta_id = " + Details.Status.ToString() + ", ");
                    sSQL.Append("lng_id = " + Details.Language.ToString() + ", ");
                    sSQL.Append("mdl_parentid = " + Details.ParentId.ToString() + ", ");
                    sSQL.Append("mdl_order = " + Details.Order.ToString() + ", ");
                    sSQL.Append("mdl_title = '" + Details.Title + "', ");
                    sSQL.Append("mdl_alias = '" + Details.Alias + "', ");
                    sSQL.Append("mdl_description = '" + Details.Description + "', ");
                    sSQL.Append("mdl_createddate = '" + Details.CreatedDate.ToString() + "', ");
                    sSQL.Append("mdl_createdby = '" + Details.CreatedBy + "', ");
                    sSQL.Append("mdl_updateddate = '" + Details.UpdatedDate.ToString() + "', ");
                    sSQL.Append("mdl_updatedby = '" + Details.UpdatedBy + "', ");
                    sSQL.Append("mdl_hidden = " + (!Details.Hidden ? "0" : "1") + ", ");
                    sSQL.Append("mdl_deleted = " + (!Details.Deleted ? "0" : "1") + " ");
                    sSQL.Append("WHERE mdl_id = " + Details.Id.ToString());
                    using (iConsulting.iCDataHandler.iCDataObject oDo = new iConsulting.iCDataHandler.iCDataObject(System.Configuration.ConfigurationManager.AppSettings["Data.DataSource"].ToString(), System.Configuration.ConfigurationManager.AppSettings["Data.ConnectionString"].ToString(), false, true, true))
                    {
                        if (!oDo.ExecuteNonQuery(sSQL.ToString()).Equals(1))
                            throw new Exception(oDo.GetError);
                    }
                    SortAll();
                }
                catch (Exception ex)
                {
                    Error.Report(ex, FUNCTIONNAME, "");
                }
            }
            public static void Delete(ModelModel Details)
            {
                string FUNCTIONNAME = CLASSNAME + "[Function::Delete]";
                try
                {
                    System.Data.DataSet ds = new System.Data.DataSet();
                    StringBuilder sSQL = new StringBuilder();
                    sSQL.Append("UPDATE mdl_model SET mdl_deleted = 1 WHERE mdl_id = " + Details.Id.ToString());
                    using (iConsulting.iCDataHandler.iCDataObject oDo = new iConsulting.iCDataHandler.iCDataObject(System.Configuration.ConfigurationManager.AppSettings["Data.DataSource"].ToString(), System.Configuration.ConfigurationManager.AppSettings["Data.ConnectionString"].ToString(), false, true, true))
                    {
                        if (!oDo.ExecuteNonQuery(sSQL.ToString()).Equals(1))
                            throw new Exception(oDo.GetError);
                    }
                    ResetThis();
                    Details = null;
                }
                catch (Exception ex)
                {
                    Error.Report(ex, FUNCTIONNAME, "");
                }
            }
            public static void ResetThis()
            {
                string FUNCTIONNAME = CLASSNAME + "[Function::ResetThis]";
                try
                {
                    CacheData.Reset("LiquidCore.Models");
                }
                catch (Exception ex)
                {
                    Error.Report(ex, FUNCTIONNAME, "");
                }
            }
            public static void SortAll()
            {
                string FUNCTIONNAME = CLASSNAME + "[Function::SortAll]";
                try
                {
                    Int32 Order = (Int32)OrderMinMax.Min;
                    StringBuilder sSQL = new StringBuilder();
                    sSQL.Append("SELECT mdl_id FROM mdl_model WHERE mdl_deleted = 0 ORDER BY sit_id, sta_id, lng_id, mdl_parentid, mdl_order");
                    using (iConsulting.iCDataHandler.iCDataObject oDo = new iConsulting.iCDataHandler.iCDataObject(System.Configuration.ConfigurationManager.AppSettings["Data.DataSource"].ToString(), System.Configuration.ConfigurationManager.AppSettings["Data.ConnectionString"].ToString(), false, true, false))
                    {
                        DataTable dt = oDo.GetDataTable(sSQL.ToString());
                        if (oDo.HasError)
                            throw new Exception(oDo.GetError);
                        StringBuilder sSQL2 = new StringBuilder();
                        foreach (DataRow dr in dt.Rows)
                        {
                            sSQL2.AppendLine("UPDATE mdl_model SET mdl_order = " + Order.ToString() + " WHERE mdl_id = " + dr["mdl_id"].ToString());
                            Order = Order + (Int32)OrderMinMax.Step;
                            if (sSQL2.Length > DataBlockSize)
                            {
                                if (!(oDo.ExecuteNonQuery(sSQL2.ToString()) > 0))
                                    throw new Exception(oDo.GetError);
                                sSQL2 = new StringBuilder();
                            }
                        }
                        if (sSQL2.Length > 0)
                            if (!(oDo.ExecuteNonQuery(sSQL2.ToString()) > 0))
                                throw new Exception(oDo.GetError);
                        ResetThis();
                    }
                }
                catch (Exception ex)
                {
                    Error.Report(ex, FUNCTIONNAME, "");
                }
            }
        }
        public static class ModelItemData
        {
            static string CLASSNAME = "[Namespace::LiquidCore][Class::ModelItemData]";

            static Int32 DataBlockSize = Convert.ToInt32(System.Configuration.ConfigurationManager.AppSettings["Data.DataBlockSize"].ToString());

            public static void Create(ModelItemModel Details)
            {
                string FUNCTIONNAME = CLASSNAME + "[Function::Create]";
                try
                {
                    ((ModelItemModel)Details).Order = (Int32)OrderMinMax.Max;
                    ((ModelItemModel)Details).UpdatedDate = DateTime.Now;
                    ((ModelItemModel)Details).UpdatedBy = Authentication.User.Name;
                    ((ModelItemModel)Details).CreatedDate = DateTime.Now;
                    ((ModelItemModel)Details).CreatedBy = Authentication.User.Name;

                    System.Data.DataSet ds = new System.Data.DataSet();
                    StringBuilder sSQL = new StringBuilder();
                    sSQL.Append("INSERT INTO mdi_modelitems (sit_id, mdl_id, mde_id, sta_id, lng_id, mdi_parentid, mdi_order, mdi_contentpane, ");
                    sSQL.Append("mdi_createddate, mdi_createdby, ");
                    sSQL.Append("mdi_updateddate, mdi_updatedby, mdi_hidden, mdi_deleted) VALUES ( ");
                    sSQL.Append(Details.SitId.ToString() + ", ");
                    sSQL.Append(Details.MdlId.ToString() + ", ");
                    sSQL.Append(Details.MdeId.ToString() + ", ");
                    sSQL.Append(Details.Status.ToString() + ", ");
                    sSQL.Append(Details.Language.ToString() + ", ");
                    sSQL.Append(Details.ParentId.ToString() + ", ");
                    sSQL.Append(Details.Order.ToString() + ", ");
                    sSQL.Append("'" + Details.ContentPane + "', ");
                    sSQL.Append("'" + Details.CreatedDate.ToString() + "', ");
                    sSQL.Append("'" + Details.CreatedBy + "', ");
                    sSQL.Append("'" + Details.UpdatedDate.ToString() + "', ");
                    sSQL.Append("'" + Details.UpdatedBy + "', ");
                    sSQL.Append("" + (Details.Hidden ? "1" : "0") + ", ");
                    sSQL.Append("" + (Details.Deleted ? "1" : "0") + ")");
                    using (iConsulting.iCDataHandler.iCDataObject oDo = new iConsulting.iCDataHandler.iCDataObject(System.Configuration.ConfigurationManager.AppSettings["Data.DataSource"].ToString(), System.Configuration.ConfigurationManager.AppSettings["Data.ConnectionString"].ToString(), false, true, true))
                    {
                        if (!oDo.ExecuteNonQuery(sSQL.ToString()).Equals(1))
                            throw new Exception(oDo.GetError);
                        ((ModelItemModel)Details).Id = Convert.ToInt32(oDo.GetDataTable("SELECT SCOPE_IDENTITY()").Rows[0][0]);
                    }
                    SortAll();
                }
                catch (Exception ex)
                {
                    Error.Report(ex, FUNCTIONNAME, "");
                }
            }
            public static void Load(ModelObject Details, NameValueSet DataFields)
            {
                string FUNCTIONNAME = CLASSNAME + "[Function::Load]";
                try
                {
                    System.Data.DataTable dt = null;
                    String CacheItem = "LiquidCore.ModelItems.ModelItem.Id(" + DataFields["Id"].ToString() + ")";
                    if (HttpContext.Current != null) if (HttpContext.Current != null) dt = (DataTable)HttpContext.Current.Cache[CacheItem];
                    if (dt == null)
                    {
                        StringBuilder sSQL = new StringBuilder();
                        sSQL.Append("SELECT * FROM mdi_modelitems WHERE mdi_id = " + DataFields["Id"].ToString() + " AND mdi_deleted = 0");
                        using (iConsulting.iCDataHandler.iCDataObject oDo = new iConsulting.iCDataHandler.iCDataObject(System.Configuration.ConfigurationManager.AppSettings["Data.DataSource"].ToString(), System.Configuration.ConfigurationManager.AppSettings["Data.ConnectionString"].ToString(), false, true))
                        {
                            dt = oDo.GetDataTable(sSQL.ToString());
                            if (oDo.HasError)
                                throw new Exception(oDo.GetError);
                        }
                        CacheData.Insert(CacheItem, dt);
                    }
                    if (dt.Rows.Count > 0)
                    {
                        System.Data.DataRow dr = dt.Rows[0];
                        ((ModelItemModel)Details).Id = Convert.ToInt32(dr["mdi_id"]);
                        ((ModelItemModel)Details).SitId = Convert.ToInt32(dr["sit_id"]);
                        ((ModelItemModel)Details).MdlId = Convert.ToInt32(dr["mdl_id"]);
                        ((ModelItemModel)Details).MdeId = Convert.ToInt32(dr["mde_id"]);
                        ((ModelItemModel)Details).Status = Convert.ToInt32(dr["sta_id"]);
                        ((ModelItemModel)Details).Language = Convert.ToInt32(dr["lng_id"]);
                        ((ModelItemModel)Details).ParentId = Convert.ToInt32(dr["mdi_parentid"]);
                        ((ModelItemModel)Details).Order = Convert.ToInt32(dr["mdi_order"]);
                        ((ModelItemModel)Details).ContentPane = Convert.ToString(dr["mdi_contentpane"]);
                        ((ModelItemModel)Details).CreatedDate = Convert.ToDateTime(dr["mdi_createddate"]);
                        ((ModelItemModel)Details).CreatedBy = Convert.ToString(dr["mdi_createdby"]);
                        ((ModelItemModel)Details).UpdatedDate = Convert.ToDateTime(dr["mdi_updateddate"]);
                        ((ModelItemModel)Details).UpdatedBy = Convert.ToString(dr["mdi_updatedby"]);
                        ((ModelItemModel)Details).Hidden = (dr["mdi_hidden"].ToString().Equals("0") ? false : true);
                        ((ModelItemModel)Details).Deleted = (dr["mdi_deleted"].ToString().Equals("0") ? false : true);
                    }
                }
                catch (Exception ex)
                {
                    Error.Report(ex, FUNCTIONNAME, "");
                }
            }
            public static void LoadAll(ref List<ModelItem> _modelitems)
            {
                string FUNCTIONNAME = CLASSNAME + "[Function::LoadAll]";
                try
                {
                    DataTable dt = null;
                    String CacheItem = "LiquidCore.ModelItems";
                    if (HttpContext.Current != null) if (HttpContext.Current != null) dt = (DataTable)HttpContext.Current.Cache[CacheItem];
                    if (dt == null)
                    {
                        StringBuilder sSQL = new StringBuilder();
                        sSQL.Append("SELECT * FROM mdi_modelitems WHERE mdi_deleted = 0 ORDER BY sit_id, mdl_id, sta_id, ");
                        sSQL.Append("lng_id, mdi_parentid, mdi_order");
                        using (iConsulting.iCDataHandler.iCDataObject oDo = new iConsulting.iCDataHandler.iCDataObject(System.Configuration.ConfigurationManager.AppSettings["Data.DataSource"].ToString(), System.Configuration.ConfigurationManager.AppSettings["Data.ConnectionString"].ToString(), false, true))
                        {
                            dt = oDo.GetDataTable(sSQL.ToString());
                            if (oDo.HasError)
                                throw new Exception(oDo.GetError);
                        }
                        CacheData.Insert(CacheItem, dt);
                    }
                    foreach (DataRow dr in dt.Rows)
                    {
                        ModelItem m = new ModelItem(Convert.ToInt32(dr["mdi_id"].ToString()));
                        _modelitems.Add(m);
                    }
                }
                catch (Exception ex)
                {
                    Error.Report(ex, FUNCTIONNAME, "");
                }
            }
            public static void LoadAll(ref List<ModelItem> _modelitems, NameValueSet DataFields)
            {
                string FUNCTIONNAME = CLASSNAME + "[Function::LoadAll]";
                try
                {
                    String PrimaryKey = String.Empty;
                    String CacheItem = String.Empty;
                    StringBuilder sSQL = new StringBuilder();
                    if (DataFields["SitId"] != null && DataFields["MdlId"] != null && DataFields["ParentId"] != null)
                    {
                        String SitId = DataFields["SitId"].ToString();
                        String MdlId = DataFields["MdlId"].ToString();
                        String ParentId = DataFields["ParentId"].ToString();
                        CacheItem = "LiquidCore.ModelItems.PrimaryKeys(SitId(" + SitId + "), MdlId(" + MdlId + "), ParentId(" + ParentId + "))";
                        sSQL.Append("SELECT * FROM mdi_modelitems WHERE sit_id = " + SitId + " AND mdl_id = " + MdlId + " AND mdi_parentid = " + ParentId + " AND mdi_deleted = 0 ORDER BY sit_id, mdl_id, sta_id, lng_id, mdi_parentid, mdi_order");
                    }
                    else
                    {
                        LoadAll(ref _modelitems);
                        return;
                    }
                    DataTable dt = null;
                    if (HttpContext.Current != null) if (HttpContext.Current != null) dt = (DataTable)HttpContext.Current.Cache[CacheItem];
                    if (dt == null)
                    {
                        using (iConsulting.iCDataHandler.iCDataObject oDo = new iConsulting.iCDataHandler.iCDataObject(System.Configuration.ConfigurationManager.AppSettings["Data.DataSource"].ToString(), System.Configuration.ConfigurationManager.AppSettings["Data.ConnectionString"].ToString(), false, true))
                        {
                            dt = oDo.GetDataTable(sSQL.ToString());
                            if (oDo.HasError)
                                throw new Exception(oDo.GetError);
                        }
                        CacheData.Insert(CacheItem, dt);
                    }
                    foreach (DataRow dr in dt.Rows)
                    {
                        ModelItem m = new ModelItem(Convert.ToInt32(dr["mdi_id"].ToString()));
                        _modelitems.Add(m);
                    }
                }
                catch (Exception ex)
                {
                    Error.Report(ex, FUNCTIONNAME, "");
                }
            }
            public static void Update(ModelItemModel Details)
            {
                string FUNCTIONNAME = CLASSNAME + "[Function::Update]";
                try
                {
                    ((ModelItemModel)Details).UpdatedDate = DateTime.Now;
                    ((ModelItemModel)Details).UpdatedBy = Authentication.User.Name;

                    System.Data.DataSet ds = new System.Data.DataSet();
                    StringBuilder sSQL = new StringBuilder();
                    sSQL.Append("UPDATE mdi_modelitems SET ");
                    sSQL.Append("sit_id = " + Details.SitId.ToString() + ", ");
                    sSQL.Append("mdl_id = " + Details.MdlId.ToString() + ", ");
                    sSQL.Append("mde_id = " + Details.MdeId.ToString() + ", ");
                    sSQL.Append("sta_id = " + Details.Status.ToString() + ", ");
                    sSQL.Append("lng_id = " + Details.Language.ToString() + ", ");
                    sSQL.Append("mdi_parentid = " + Details.ParentId.ToString() + ", ");
                    sSQL.Append("mdi_order = " + Details.Order.ToString() + ", ");
                    sSQL.Append("mdi_contentpane = '" + Details.ContentPane + "', ");
                    sSQL.Append("mdi_createddate = '" + Details.CreatedDate.ToString() + "', ");
                    sSQL.Append("mdi_createdby = '" + Details.CreatedBy + "', ");
                    sSQL.Append("mdi_updateddate = '" + Details.UpdatedDate.ToString() + "', ");
                    sSQL.Append("mdi_updatedby = '" + Details.UpdatedBy + "', ");
                    sSQL.Append("mdi_hidden = " + (!Details.Hidden ? "0" : "1") + ", ");
                    sSQL.Append("mdi_deleted = " + (!Details.Deleted ? "0" : "1") + " ");
                    sSQL.Append("WHERE mdi_id = " + Details.Id.ToString());
                    using (iConsulting.iCDataHandler.iCDataObject oDo = new iConsulting.iCDataHandler.iCDataObject(System.Configuration.ConfigurationManager.AppSettings["Data.DataSource"].ToString(), System.Configuration.ConfigurationManager.AppSettings["Data.ConnectionString"].ToString(), false, true, true))
                    {
                        if (!oDo.ExecuteNonQuery(sSQL.ToString()).Equals(1))
                            throw new Exception(oDo.GetError);
                    }
                    SortAll();
                }
                catch (Exception ex)
                {
                    Error.Report(ex, FUNCTIONNAME, "");
                }
            }
            public static void Delete(ModelItemModel Details)
            {
                string FUNCTIONNAME = CLASSNAME + "[Function::Delete]";
                try
                {
                    System.Data.DataSet ds = new System.Data.DataSet();
                    StringBuilder sSQL = new StringBuilder();
                    sSQL.Append("UPDATE mdi_modelitems SET mdi_deleted = 1 WHERE mdi_id = " + Details.Id.ToString());
                    using (iConsulting.iCDataHandler.iCDataObject oDo = new iConsulting.iCDataHandler.iCDataObject(System.Configuration.ConfigurationManager.AppSettings["Data.DataSource"].ToString(), System.Configuration.ConfigurationManager.AppSettings["Data.ConnectionString"].ToString(), false, true, true))
                    {
                        if (!oDo.ExecuteNonQuery(sSQL.ToString()).Equals(1))
                            throw new Exception(oDo.GetError);
                    }
                    ResetThis();
                    Details = null;
                }
                catch (Exception ex)
                {
                    Error.Report(ex, FUNCTIONNAME, "");
                }
            }
            public static void ResetThis()
            {
                string FUNCTIONNAME = CLASSNAME + "[Function::ResetThis]";
                try
                {
                    CacheData.Reset("LiquidCore.ModelItems");
                }
                catch (Exception ex)
                {
                    Error.Report(ex, FUNCTIONNAME, "");
                }
            }
            public static void SortAll()
            {
                string FUNCTIONNAME = CLASSNAME + "[Function::SortAll]";
                try
                {
                    Int32 Order = (Int32)OrderMinMax.Min;
                    StringBuilder sSQL = new StringBuilder();
                    sSQL.Append("SELECT mdi_id FROM mdi_modelitems WHERE mdi_deleted = 0 ORDER BY sit_id, mdl_id, sta_id, lng_id, mdi_parentid, mdi_order");
                    using (iConsulting.iCDataHandler.iCDataObject oDo = new iConsulting.iCDataHandler.iCDataObject(System.Configuration.ConfigurationManager.AppSettings["Data.DataSource"].ToString(), System.Configuration.ConfigurationManager.AppSettings["Data.ConnectionString"].ToString(), false, true, false))
                    {
                        DataTable dt = oDo.GetDataTable(sSQL.ToString());
                        if (oDo.HasError)
                            throw new Exception(oDo.GetError);
                        StringBuilder sSQL2 = new StringBuilder();
                        foreach (DataRow dr in dt.Rows)
                        {
                            sSQL2.AppendLine("UPDATE mdi_modelitems SET mdi_order = " + Order.ToString() + " WHERE mdi_id = " + dr["mdi_id"].ToString());
                            Order = Order + (Int32)OrderMinMax.Step;
                            if (sSQL2.Length > DataBlockSize)
                            {
                                if (!(oDo.ExecuteNonQuery(sSQL2.ToString()) > 0))
                                    throw new Exception(oDo.GetError);
                                sSQL2 = new StringBuilder();
                            }
                        }
                        if (sSQL2.Length > 0)
                            if (!(oDo.ExecuteNonQuery(sSQL2.ToString()) > 0))
                                throw new Exception(oDo.GetError);
                        ResetThis();
                    }
                }
                catch (Exception ex)
                {
                    Error.Report(ex, FUNCTIONNAME, "");
                }
            }
        }
        public static class ModDefData
        {
            static string CLASSNAME = "[Namespace::LiquidCore][Class::ModDefData]";

            static Int32 DataBlockSize = Convert.ToInt32(System.Configuration.ConfigurationManager.AppSettings["Data.DataBlockSize"].ToString());

            public static void Create(ModDefModel Details)
            {
                string FUNCTIONNAME = CLASSNAME + "[Function::Create]";
                try
                {
                    ((ModDefModel)Details).Order = (Int32)OrderMinMax.Max;
                    ((ModDefModel)Details).UpdatedDate = DateTime.Now;
                    ((ModDefModel)Details).UpdatedBy = Authentication.User.Name;
                    ((ModDefModel)Details).CreatedDate = DateTime.Now;
                    ((ModDefModel)Details).CreatedBy = Authentication.User.Name;

                    System.Data.DataSet ds = new System.Data.DataSet();
                    StringBuilder sSQL = new StringBuilder();
                    sSQL.Append("INSERT INTO mde_moduledefinitions (sit_id, sta_id, lng_id, mde_parentid, mde_order, mde_src, ");
                    sSQL.Append("mde_title, mde_alias, mde_description, mde_createddate, mde_createdby, ");
                    sSQL.Append("mde_updateddate, mde_updatedby, mde_hidden, mde_deleted) VALUES ( ");
                    sSQL.Append(Details.SitId.ToString() + ", ");
                    sSQL.Append(Details.Status.ToString() + ", ");
                    sSQL.Append(Details.Language.ToString() + ", ");
                    sSQL.Append(Details.ParentId.ToString() + ", ");
                    sSQL.Append(Details.Order.ToString() + ", ");
                    sSQL.Append("'" + Details.Src + "', ");
                    sSQL.Append("'" + Details.Title + "', ");
                    sSQL.Append("'" + Details.Alias + "', ");
                    sSQL.Append("'" + Details.Description + "', ");
                    sSQL.Append("'" + Details.CreatedDate.ToString() + "', ");
                    sSQL.Append("'" + Details.CreatedBy + "', ");
                    sSQL.Append("'" + Details.UpdatedDate.ToString() + "', ");
                    sSQL.Append("'" + Details.UpdatedBy + "', ");
                    sSQL.Append("" + (Details.Hidden ? "1" : "0") + ", ");
                    sSQL.Append("" + (Details.Deleted ? "1" : "0") + ")");
                    using (iConsulting.iCDataHandler.iCDataObject oDo = new iConsulting.iCDataHandler.iCDataObject(System.Configuration.ConfigurationManager.AppSettings["Data.DataSource"].ToString(), System.Configuration.ConfigurationManager.AppSettings["Data.ConnectionString"].ToString(), false, true, true))
                    {
                        if (!oDo.ExecuteNonQuery(sSQL.ToString()).Equals(1))
                            throw new Exception(oDo.GetError);
                        ((ModDefModel)Details).Id = Convert.ToInt32(oDo.GetDataTable("SELECT SCOPE_IDENTITY()").Rows[0][0]);
                    }
                    SortAll();
                }
                catch (Exception ex)
                {
                    Error.Report(ex, FUNCTIONNAME, "");
                }
            }
            public static void Load(ModelObject Details, NameValueSet DataFields)
            {
                string FUNCTIONNAME = CLASSNAME + "[Function::Load]";
                try
                {
                    System.Data.DataTable dt = null;
                    String CacheItem = "LiquidCore.ModDefs.ModDef.Id(" + DataFields["Id"].ToString() + ")";
                    if (HttpContext.Current != null) if (HttpContext.Current != null) dt = (DataTable)HttpContext.Current.Cache[CacheItem];
                    if (dt == null)
                    {
                        StringBuilder sSQL = new StringBuilder();
                        sSQL.Append("SELECT * FROM mde_moduledefinitions WHERE mde_id = " + DataFields["Id"].ToString() + " AND mde_deleted = 0");
                        using (iConsulting.iCDataHandler.iCDataObject oDo = new iConsulting.iCDataHandler.iCDataObject(System.Configuration.ConfigurationManager.AppSettings["Data.DataSource"].ToString(), System.Configuration.ConfigurationManager.AppSettings["Data.ConnectionString"].ToString(), false, true))
                        {
                            dt = oDo.GetDataTable(sSQL.ToString());
                            if (oDo.HasError)
                                throw new Exception(oDo.GetError);
                        }
                        CacheData.Insert(CacheItem, dt);
                    }
                    if (dt.Rows.Count > 0)
                    {
                        System.Data.DataRow dr = dt.Rows[0];
                        ((ModDefModel)Details).Id = Convert.ToInt32(dr["mde_id"]);
                        ((ModDefModel)Details).SitId = Convert.ToInt32(dr["sit_id"]);
                        ((ModDefModel)Details).Status = Convert.ToInt32(dr["sta_id"]);
                        ((ModDefModel)Details).Language = Convert.ToInt32(dr["lng_id"]);
                        ((ModDefModel)Details).ParentId = Convert.ToInt32(dr["mde_parentid"]);
                        ((ModDefModel)Details).Order = Convert.ToInt32(dr["mde_order"]);
                        ((ModDefModel)Details).Title = Convert.ToString(dr["mde_title"]);
                        ((ModDefModel)Details).Alias = Convert.ToString(dr["mde_alias"]);
                        ((ModDefModel)Details).Description = Convert.ToString(dr["mde_description"]);
                        ((ModDefModel)Details).Src = Convert.ToString(dr["mde_src"]);
                        ((ModDefModel)Details).CreatedDate = Convert.ToDateTime(dr["mde_createddate"]);
                        ((ModDefModel)Details).CreatedBy = Convert.ToString(dr["mde_createdby"]);
                        ((ModDefModel)Details).UpdatedDate = Convert.ToDateTime(dr["mde_updateddate"]);
                        ((ModDefModel)Details).UpdatedBy = Convert.ToString(dr["mde_updatedby"]);
                        ((ModDefModel)Details).Hidden = (dr["mde_hidden"].ToString().Equals("0") ? false : true);
                        ((ModDefModel)Details).Deleted = (dr["mde_deleted"].ToString().Equals("0") ? false : true);
                    }
                }
                catch (Exception ex)
                {
                    Error.Report(ex, FUNCTIONNAME, "");
                }
            }
            public static void LoadAll(ref List<ModDef> _moddefs)
            {
                string FUNCTIONNAME = CLASSNAME + "[Function::LoadAll]";
                try
                {
                    DataTable dt = null;
                    String CacheItem = "LiquidCore.ModDefs";
                    if (HttpContext.Current != null) if (HttpContext.Current != null) dt = (DataTable)HttpContext.Current.Cache[CacheItem];
                    if (dt == null)
                    {
                        StringBuilder sSQL = new StringBuilder();
                        sSQL.Append("SELECT * FROM mde_moduledefinitions WHERE mde_deleted = 0 ORDER BY sit_id, sta_id, ");
                        sSQL.Append("lng_id, mde_parentid, mde_order");
                        using (iConsulting.iCDataHandler.iCDataObject oDo = new iConsulting.iCDataHandler.iCDataObject(System.Configuration.ConfigurationManager.AppSettings["Data.DataSource"].ToString(), System.Configuration.ConfigurationManager.AppSettings["Data.ConnectionString"].ToString(), false, true))
                        {
                            dt = oDo.GetDataTable(sSQL.ToString());
                            if (oDo.HasError)
                                throw new Exception(oDo.GetError);
                        }
                        CacheData.Insert(CacheItem, dt);
                    }
                    foreach (DataRow dr in dt.Rows)
                    {
                        ModDef m = new ModDef(Convert.ToInt32(dr["mde_id"].ToString()));
                        _moddefs.Add(m);
                    }
                }
                catch (Exception ex)
                {
                    Error.Report(ex, FUNCTIONNAME, "");
                }
            }
            public static void LoadAll(ref List<ModDef> _moddefs, NameValueSet DataFields)
            {
                string FUNCTIONNAME = CLASSNAME + "[Function::LoadAll]";
                try
                {
                    String PrimaryKey = String.Empty;
                    String CacheItem = String.Empty;
                    StringBuilder sSQL = new StringBuilder();
                    if (DataFields["SitId"] != null && DataFields["ParentId"] != null)
                    {
                        String SitId = DataFields["SitId"].ToString();
                        String ParentId = DataFields["ParentId"].ToString();
                        CacheItem = "LiquidCore.ModDefs.PrimaryKeys(SitId(" + SitId + "), ParentId(" + ParentId + "))";
                        sSQL.Append("SELECT * FROM mde_moduledefinitions WHERE sit_id = " + SitId + " AND mde_parentid = " + ParentId + " AND mde_deleted = 0 ORDER BY sit_id, sta_id, lng_id, mde_parentid, mde_order");
                    }
                    else
                    {
                        LoadAll(ref _moddefs);
                        return;
                    }
                    DataTable dt = null;
                    if (HttpContext.Current != null) if (HttpContext.Current != null) dt = (DataTable)HttpContext.Current.Cache[CacheItem];
                    if (dt == null)
                    {
                        using (iConsulting.iCDataHandler.iCDataObject oDo = new iConsulting.iCDataHandler.iCDataObject(System.Configuration.ConfigurationManager.AppSettings["Data.DataSource"].ToString(), System.Configuration.ConfigurationManager.AppSettings["Data.ConnectionString"].ToString(), false, true))
                        {
                            dt = oDo.GetDataTable(sSQL.ToString());
                            if (oDo.HasError)
                                throw new Exception(oDo.GetError);
                        }
                        CacheData.Insert(CacheItem, dt);
                    }
                    foreach (DataRow dr in dt.Rows)
                    {
                        ModDef m = new ModDef(Convert.ToInt32(dr["mde_id"].ToString()));
                        _moddefs.Add(m);
                    }
                }
                catch (Exception ex)
                {
                    Error.Report(ex, FUNCTIONNAME, "");
                }
            }
            public static void Update(ModDefModel Details)
            {
                string FUNCTIONNAME = CLASSNAME + "[Function::Update]";
                try
                {
                    ((ModDefModel)Details).UpdatedDate = DateTime.Now;
                    ((ModDefModel)Details).UpdatedBy = Authentication.User.Name;

                    System.Data.DataSet ds = new System.Data.DataSet();
                    StringBuilder sSQL = new StringBuilder();
                    sSQL.Append("UPDATE mde_moduledefinitions SET ");
                    sSQL.Append("sit_id = " + Details.SitId.ToString() + ", ");
                    sSQL.Append("sta_id = " + Details.Status.ToString() + ", ");
                    sSQL.Append("lng_id = " + Details.Language.ToString() + ", ");
                    sSQL.Append("mde_parentid = " + Details.ParentId.ToString() + ", ");
                    sSQL.Append("mde_order = " + Details.Order.ToString() + ", ");
                    sSQL.Append("mde_title = '" + Details.Title + "', ");
                    sSQL.Append("mde_alias = '" + Details.Alias + "', ");
                    sSQL.Append("mde_description = '" + Details.Description + "', ");
                    sSQL.Append("mde_src = '" + Details.Src + "', ");
                    sSQL.Append("mde_createddate = '" + Details.CreatedDate.ToString() + "', ");
                    sSQL.Append("mde_createdby = '" + Details.CreatedBy + "', ");
                    sSQL.Append("mde_updateddate = '" + Details.UpdatedDate.ToString() + "', ");
                    sSQL.Append("mde_updatedby = '" + Details.UpdatedBy + "', ");
                    sSQL.Append("mde_hidden = " + (!Details.Hidden ? "0" : "1") + ", ");
                    sSQL.Append("mde_deleted = " + (!Details.Deleted ? "0" : "1") + " ");
                    sSQL.Append("WHERE mde_id = " + Details.Id.ToString());
                    using (iConsulting.iCDataHandler.iCDataObject oDo = new iConsulting.iCDataHandler.iCDataObject(System.Configuration.ConfigurationManager.AppSettings["Data.DataSource"].ToString(), System.Configuration.ConfigurationManager.AppSettings["Data.ConnectionString"].ToString(), false, true, true))
                    {
                        if (!oDo.ExecuteNonQuery(sSQL.ToString()).Equals(1))
                            throw new Exception(oDo.GetError);
                    }
                    SortAll();
                }
                catch (Exception ex)
                {
                    Error.Report(ex, FUNCTIONNAME, "");
                }
            }
            public static void Delete(ModDefModel Details)
            {
                string FUNCTIONNAME = CLASSNAME + "[Function::Delete]";
                try
                {
                    System.Data.DataSet ds = new System.Data.DataSet();
                    StringBuilder sSQL = new StringBuilder();
                    sSQL.Append("UPDATE mde_moduledefinitions SET mde_deleted = 1 WHERE mde_id = " + Details.Id.ToString());
                    using (iConsulting.iCDataHandler.iCDataObject oDo = new iConsulting.iCDataHandler.iCDataObject(System.Configuration.ConfigurationManager.AppSettings["Data.DataSource"].ToString(), System.Configuration.ConfigurationManager.AppSettings["Data.ConnectionString"].ToString(), false, true, true))
                    {
                        if (!oDo.ExecuteNonQuery(sSQL.ToString()).Equals(1))
                            throw new Exception(oDo.GetError);
                    }
                    ResetThis();
                    Details = null;
                }
                catch (Exception ex)
                {
                    Error.Report(ex, FUNCTIONNAME, "");
                }
            }
            public static void ResetThis()
            {
                string FUNCTIONNAME = CLASSNAME + "[Function::ResetThis]";
                try
                {
                    CacheData.Reset("LiquidCore.ModDefs");
                }
                catch (Exception ex)
                {
                    Error.Report(ex, FUNCTIONNAME, "");
                }
            }
            public static void SortAll()
            {
                string FUNCTIONNAME = CLASSNAME + "[Function::SortAll]";
                try
                {
                    Int32 Order = (Int32)OrderMinMax.Min;
                    StringBuilder sSQL = new StringBuilder();
                    sSQL.Append("SELECT mde_id FROM mde_moduledefinitions WHERE mde_deleted = 0 ORDER BY sit_id, sta_id, lng_id, mde_parentid, mde_order");
                    using (iConsulting.iCDataHandler.iCDataObject oDo = new iConsulting.iCDataHandler.iCDataObject(System.Configuration.ConfigurationManager.AppSettings["Data.DataSource"].ToString(), System.Configuration.ConfigurationManager.AppSettings["Data.ConnectionString"].ToString(), false, true, false))
                    {
                        DataTable dt = oDo.GetDataTable(sSQL.ToString());
                        if (oDo.HasError)
                            throw new Exception(oDo.GetError);
                        StringBuilder sSQL2 = new StringBuilder();
                        foreach (DataRow dr in dt.Rows)
                        {
                            sSQL2.AppendLine("UPDATE mde_moduledefinitions SET mde_order = " + Order.ToString() + " WHERE mde_id = " + dr["mde_id"].ToString());
                            Order = Order + (Int32)OrderMinMax.Step;
                            if (sSQL2.Length > DataBlockSize)
                            {
                                if (!(oDo.ExecuteNonQuery(sSQL2.ToString()) > 0))
                                    throw new Exception(oDo.GetError);
                                sSQL2 = new StringBuilder();
                            }
                        }
                        if (sSQL2.Length > 0)
                            if (!(oDo.ExecuteNonQuery(sSQL2.ToString()) > 0))
                                throw new Exception(oDo.GetError);
                        ResetThis();
                    }
                }
                catch (Exception ex)
                {
                    Error.Report(ex, FUNCTIONNAME, "");
                }
            }
        }
        public static class CacheData
        {
            static Int32 CacheTimeOut = Convert.ToInt32(System.Configuration.ConfigurationManager.AppSettings["Data.CacheTimeOutInMinutes"].ToString());
            static bool ShowCacheHistory = Convert.ToBoolean(System.Configuration.ConfigurationManager.AppSettings["Data.ShowCacheHistory"].ToString());

            public static void Insert(String CacheItem, DataTable dt)
            {
                if (HttpContext.Current != null && CacheTimeOut > 0)
                {
                    if (HttpContext.Current.Cache[CacheItem] == null)
                    {
                        Reset(CacheItem);
                        HttpContext.Current.Cache.Insert(CacheItem, dt, null, DateTime.Now.AddMinutes(CacheTimeOut), TimeSpan.Zero, System.Web.Caching.CacheItemPriority.High, null);
                        dt = (DataTable)HttpContext.Current.Cache[CacheItem];
                        if (ShowCacheHistory)
                            System.Diagnostics.Debug.WriteLine("LiquidCore is inserting item: " + CacheItem + " into cache for " + CacheTimeOut.ToString() + " minutes.");
                    }
                }
            }

            public static void Reset(String CachePreValue)
            {
                if (HttpContext.Current != null && CacheTimeOut > 0)
                {
                    String cacheItem = String.Empty;
                    IDictionaryEnumerator CacheEnum = HttpContext.Current.Cache.GetEnumerator();
                    while (CacheEnum.MoveNext())
                    {
                        cacheItem = CacheEnum.Key.ToString();
                        if (cacheItem.StartsWith(CachePreValue))
                        {
                            if (ShowCacheHistory)
                                System.Diagnostics.Debug.WriteLine("LiquidCore is removing: " + cacheItem + " from cache.");
                            HttpContext.Current.Cache.Remove(cacheItem);
                        }
                    }
                }
            }

            public static void Reset()
            {
                Reset("LiquidCore");
            }

        }
    }
}

// Error
namespace LiquidCore
{
    public class Error
    {
        static bool ShowErrorHistory = Convert.ToBoolean(System.Configuration.ConfigurationManager.AppSettings["Error.ShowErrorHistory"].ToString());

        public static void Report(Exception ex, String Function, String Variant)
        {
            if (ShowErrorHistory)
                System.Diagnostics.Debug.WriteLine("ToDo: Build Error.Report" + ex.ToString() + Function + Variant);   
        }
    }
}

// Authentication
namespace LiquidCore
{
    public class Authentication
    { 
        public class User
        {
            public static bool Authorized = false;
            public static string Name = "";
            public static string Password = "";
        }
    }
}

// Config
namespace LiquidCore
{
    public class ConfigSettings
    {
        private ConfigSettings() { }

        public static string ReadSetting(string key)
        {
            return ConfigurationManager.AppSettings[key];
        }

        public static void WriteSetting(string key, string value)
        {
            // load config document for current assembly
            XmlDocument doc = loadConfigDocument();

            // retrieve appSettings node
            XmlNode node = doc.SelectSingleNode("//appSettings");

            if (node == null)
                throw new InvalidOperationException("appSettings section not found in config file.");

            try
            {
                // select the 'add' element that contains the key
                XmlElement elem = (XmlElement)node.SelectSingleNode(string.Format("//add[@key='{0}']", key));

                if (elem != null)
                {
                    // add value for key
                    elem.SetAttribute("value", value);
                }
                else
                {
                    // key was not found so create the 'add' element 
                    // and set it's key/value attributes 
                    elem = doc.CreateElement("add");
                    elem.SetAttribute("key", key);
                    elem.SetAttribute("value", value);
                    node.AppendChild(elem);
                }
                doc.Save(getConfigFilePath());
            }
            catch
            {
                throw;
            }
        }

        public static void RemoveSetting(string key)
        {
            // load config document for current assembly
            XmlDocument doc = loadConfigDocument();

            // retrieve appSettings node
            XmlNode node = doc.SelectSingleNode("//appSettings");

            try
            {
                if (node == null)
                    throw new InvalidOperationException("appSettings section not found in config file.");
                else
                {
                    // remove 'add' element with coresponding key
                    node.RemoveChild(node.SelectSingleNode(string.Format("//add[@key='{0}']", key)));
                    doc.Save(getConfigFilePath());
                }
            }
            catch (NullReferenceException e)
            {
                throw new Exception(string.Format("The key {0} does not exist.", key), e);
            }
        }

        private static XmlDocument loadConfigDocument()
        {
            XmlDocument doc = null;
            try
            {
                doc = new XmlDocument();
                doc.Load(getConfigFilePath());
                return doc;
            }
            catch (System.IO.FileNotFoundException e)
            {
                throw new Exception("No configuration file found.", e);
            }
        }

        private static string getConfigFilePath()
        {
            return HttpContext.Current.Server.MapPath("web.config");   
            //return Assembly.GetExecutingAssembly().Location + ".config";
        }
    }
}



